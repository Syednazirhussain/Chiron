/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/trainer/_include/_common.js":
/*!**************************************************!*\
  !*** ./resources/js/trainer/_include/_common.js ***!
  \**************************************************/
/***/ (() => {

eval("/**find current page link and add .active class on navbar link**/\njQuery(function () {\n  var url = window.location;\n  jQuery('.main-sidebar .sidebar a[href=\"' + url + '\"]').addClass('active');\n  jQuery('.main-sidebar .sidebar a').filter(function () {\n    return this.href == url;\n  }).addClass('active');\n});\n/**./find current page link and add .active class on navbar link**/\n\n/*addClass if URL is Root url (is Home page)*/\n\njQuery('body').toggleClass('is_index home index-page', /\\/$/.test(location.pathname));\n/**URL added on body tag as a Class**/\n\njQuery(function () {\n  var locReal = window.location.pathname; // returns the full URL\n\n  var loc = locReal.replace(\".\", \"/\");\n  var split_loc = loc.split('/');\n  active_locLastParent2 = split_loc[split_loc.length - 3];\n  active_locLastParent = split_loc[split_loc.length - 2];\n  active_locLast = split_loc[split_loc.length - 1];\n  jQuery('body').addClass(active_locLastParent2 + \"-page\");\n  jQuery('body').addClass(active_locLastParent + \"-page\");\n  jQuery('body').addClass(active_locLast + \"-page\");\n  var urlParameters = window.location.search; // returns the URL Parameters\n\n  var split_urlParameters = urlParameters.split(/[ .=:;?!~,`\"&|()<>{}\\[\\]\\r\\n/\\\\]+/);\n  urlParametersLast = split_urlParameters[split_urlParameters.length - 1];\n  urlParametersLast2 = split_urlParameters[split_urlParameters.length - 2];\n  jQuery('body').addClass(\"parameter--\" + urlParametersLast);\n  jQuery('body').addClass(\"parameter--\" + urlParametersLast2);\n  var urlHash = window.location.hash;\n  var urlHashSplit = urlHash.split(\"#\");\n  var urlHashAfterSplit = \"-no-hash\";\n\n  if (urlHashSplit[1] != null) {\n    urlHashAfterSplit = urlHashSplit[1];\n  }\n\n  jQuery('body').addClass(\"hashtag--\" + urlHashAfterSplit);\n});\n/**./URL added on body tag as a Class**///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvdHJhaW5lci9faW5jbHVkZS9fY29tbW9uLmpzPzQyOTkiXSwibmFtZXMiOlsialF1ZXJ5IiwidXJsIiwid2luZG93IiwibG9jYXRpb24iLCJhZGRDbGFzcyIsImZpbHRlciIsImhyZWYiLCJ0b2dnbGVDbGFzcyIsInRlc3QiLCJwYXRobmFtZSIsImxvY1JlYWwiLCJsb2MiLCJyZXBsYWNlIiwic3BsaXRfbG9jIiwic3BsaXQiLCJhY3RpdmVfbG9jTGFzdFBhcmVudDIiLCJsZW5ndGgiLCJhY3RpdmVfbG9jTGFzdFBhcmVudCIsImFjdGl2ZV9sb2NMYXN0IiwidXJsUGFyYW1ldGVycyIsInNlYXJjaCIsInNwbGl0X3VybFBhcmFtZXRlcnMiLCJ1cmxQYXJhbWV0ZXJzTGFzdCIsInVybFBhcmFtZXRlcnNMYXN0MiIsInVybEhhc2giLCJoYXNoIiwidXJsSGFzaFNwbGl0IiwidXJsSGFzaEFmdGVyU3BsaXQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0FBLE1BQU0sQ0FBQyxZQUFZO0FBQ2YsTUFBSUMsR0FBRyxHQUFHQyxNQUFNLENBQUNDLFFBQWpCO0FBQ0FILEVBQUFBLE1BQU0sQ0FBQyxvQ0FBb0NDLEdBQXBDLEdBQTBDLElBQTNDLENBQU4sQ0FBdURHLFFBQXZELENBQWdFLFFBQWhFO0FBQ0FKLEVBQUFBLE1BQU0sQ0FBQywwQkFBRCxDQUFOLENBQW1DSyxNQUFuQyxDQUEwQyxZQUFZO0FBQ2xELFdBQU8sS0FBS0MsSUFBTCxJQUFhTCxHQUFwQjtBQUNILEdBRkQsRUFFR0csUUFGSCxDQUVZLFFBRlo7QUFHSCxDQU5LLENBQU47QUFPQTs7QUFDQTs7QUFDQUosTUFBTSxDQUFDLE1BQUQsQ0FBTixDQUFlTyxXQUFmLENBQTJCLDBCQUEzQixFQUF1RCxNQUFNQyxJQUFOLENBQVdMLFFBQVEsQ0FBQ00sUUFBcEIsQ0FBdkQ7QUFFQTs7QUFDQVQsTUFBTSxDQUFDLFlBQVk7QUFDZixNQUFJVSxPQUFPLEdBQUdSLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQk0sUUFBOUIsQ0FEZSxDQUN5Qjs7QUFDeEMsTUFBSUUsR0FBRyxHQUFHRCxPQUFPLENBQUNFLE9BQVIsQ0FBZ0IsR0FBaEIsRUFBcUIsR0FBckIsQ0FBVjtBQUNBLE1BQUlDLFNBQVMsR0FBR0YsR0FBRyxDQUFDRyxLQUFKLENBQVUsR0FBVixDQUFoQjtBQUNBQyxFQUFBQSxxQkFBcUIsR0FBR0YsU0FBUyxDQUFDQSxTQUFTLENBQUNHLE1BQVYsR0FBbUIsQ0FBcEIsQ0FBakM7QUFDQUMsRUFBQUEsb0JBQW9CLEdBQUdKLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDRyxNQUFWLEdBQW1CLENBQXBCLENBQWhDO0FBQ0FFLEVBQUFBLGNBQWMsR0FBR0wsU0FBUyxDQUFDQSxTQUFTLENBQUNHLE1BQVYsR0FBbUIsQ0FBcEIsQ0FBMUI7QUFHQWhCLEVBQUFBLE1BQU0sQ0FBQyxNQUFELENBQU4sQ0FBZUksUUFBZixDQUF3QlcscUJBQXFCLEdBQUcsT0FBaEQ7QUFDQWYsRUFBQUEsTUFBTSxDQUFDLE1BQUQsQ0FBTixDQUFlSSxRQUFmLENBQXdCYSxvQkFBb0IsR0FBRyxPQUEvQztBQUNBakIsRUFBQUEsTUFBTSxDQUFDLE1BQUQsQ0FBTixDQUFlSSxRQUFmLENBQXdCYyxjQUFjLEdBQUcsT0FBekM7QUFFQSxNQUFJQyxhQUFhLEdBQUdqQixNQUFNLENBQUNDLFFBQVAsQ0FBZ0JpQixNQUFwQyxDQWJlLENBYTZCOztBQUM1QyxNQUFJQyxtQkFBbUIsR0FBR0YsYUFBYSxDQUFDTCxLQUFkLENBQW9CLG1DQUFwQixDQUExQjtBQUNBUSxFQUFBQSxpQkFBaUIsR0FBR0QsbUJBQW1CLENBQUNBLG1CQUFtQixDQUFDTCxNQUFwQixHQUE2QixDQUE5QixDQUF2QztBQUNBTyxFQUFBQSxrQkFBa0IsR0FBR0YsbUJBQW1CLENBQUNBLG1CQUFtQixDQUFDTCxNQUFwQixHQUE2QixDQUE5QixDQUF4QztBQUNBaEIsRUFBQUEsTUFBTSxDQUFDLE1BQUQsQ0FBTixDQUFlSSxRQUFmLENBQXdCLGdCQUFnQmtCLGlCQUF4QztBQUNBdEIsRUFBQUEsTUFBTSxDQUFDLE1BQUQsQ0FBTixDQUFlSSxRQUFmLENBQXdCLGdCQUFnQm1CLGtCQUF4QztBQUVBLE1BQUlDLE9BQU8sR0FBR3RCLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQnNCLElBQTlCO0FBQ0EsTUFBSUMsWUFBWSxHQUFHRixPQUFPLENBQUNWLEtBQVIsQ0FBYyxHQUFkLENBQW5CO0FBQ0EsTUFBSWEsaUJBQWlCLEdBQUcsVUFBeEI7O0FBQ0EsTUFBSUQsWUFBWSxDQUFDLENBQUQsQ0FBWixJQUFtQixJQUF2QixFQUE2QjtBQUN6QkMsSUFBQUEsaUJBQWlCLEdBQUdELFlBQVksQ0FBQyxDQUFELENBQWhDO0FBQ0g7O0FBQ0QxQixFQUFBQSxNQUFNLENBQUMsTUFBRCxDQUFOLENBQWVJLFFBQWYsQ0FBd0IsY0FBY3VCLGlCQUF0QztBQUdILENBN0JLLENBQU47QUE4QkEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipmaW5kIGN1cnJlbnQgcGFnZSBsaW5rIGFuZCBhZGQgLmFjdGl2ZSBjbGFzcyBvbiBuYXZiYXIgbGluayoqL1xyXG5qUXVlcnkoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHVybCA9IHdpbmRvdy5sb2NhdGlvbjtcclxuICAgIGpRdWVyeSgnLm1haW4tc2lkZWJhciAuc2lkZWJhciBhW2hyZWY9XCInICsgdXJsICsgJ1wiXScpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgIGpRdWVyeSgnLm1haW4tc2lkZWJhciAuc2lkZWJhciBhJykuZmlsdGVyKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ocmVmID09IHVybDtcclxuICAgIH0pLmFkZENsYXNzKCdhY3RpdmUnKTtcclxufSk7XHJcbi8qKi4vZmluZCBjdXJyZW50IHBhZ2UgbGluayBhbmQgYWRkIC5hY3RpdmUgY2xhc3Mgb24gbmF2YmFyIGxpbmsqKi9cclxuLyphZGRDbGFzcyBpZiBVUkwgaXMgUm9vdCB1cmwgKGlzIEhvbWUgcGFnZSkqL1xyXG5qUXVlcnkoJ2JvZHknKS50b2dnbGVDbGFzcygnaXNfaW5kZXggaG9tZSBpbmRleC1wYWdlJywgL1xcLyQvLnRlc3QobG9jYXRpb24ucGF0aG5hbWUpKTtcclxuXHJcbi8qKlVSTCBhZGRlZCBvbiBib2R5IHRhZyBhcyBhIENsYXNzKiovXHJcbmpRdWVyeShmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgbG9jUmVhbCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTsgLy8gcmV0dXJucyB0aGUgZnVsbCBVUkxcclxuICAgIHZhciBsb2MgPSBsb2NSZWFsLnJlcGxhY2UoXCIuXCIsIFwiL1wiKTtcclxuICAgIHZhciBzcGxpdF9sb2MgPSBsb2Muc3BsaXQoJy8nKTtcclxuICAgIGFjdGl2ZV9sb2NMYXN0UGFyZW50MiA9IHNwbGl0X2xvY1tzcGxpdF9sb2MubGVuZ3RoIC0gM107XHJcbiAgICBhY3RpdmVfbG9jTGFzdFBhcmVudCA9IHNwbGl0X2xvY1tzcGxpdF9sb2MubGVuZ3RoIC0gMl07XHJcbiAgICBhY3RpdmVfbG9jTGFzdCA9IHNwbGl0X2xvY1tzcGxpdF9sb2MubGVuZ3RoIC0gMV07XHJcblxyXG5cclxuICAgIGpRdWVyeSgnYm9keScpLmFkZENsYXNzKGFjdGl2ZV9sb2NMYXN0UGFyZW50MiArIFwiLXBhZ2VcIik7XHJcbiAgICBqUXVlcnkoJ2JvZHknKS5hZGRDbGFzcyhhY3RpdmVfbG9jTGFzdFBhcmVudCArIFwiLXBhZ2VcIik7XHJcbiAgICBqUXVlcnkoJ2JvZHknKS5hZGRDbGFzcyhhY3RpdmVfbG9jTGFzdCArIFwiLXBhZ2VcIik7XHJcblxyXG4gICAgdmFyIHVybFBhcmFtZXRlcnMgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoOyAvLyByZXR1cm5zIHRoZSBVUkwgUGFyYW1ldGVyc1xyXG4gICAgdmFyIHNwbGl0X3VybFBhcmFtZXRlcnMgPSB1cmxQYXJhbWV0ZXJzLnNwbGl0KC9bIC49Ojs/IX4sYFwiJnwoKTw+e31cXFtcXF1cXHJcXG4vXFxcXF0rLyk7XHJcbiAgICB1cmxQYXJhbWV0ZXJzTGFzdCA9IHNwbGl0X3VybFBhcmFtZXRlcnNbc3BsaXRfdXJsUGFyYW1ldGVycy5sZW5ndGggLSAxXTtcclxuICAgIHVybFBhcmFtZXRlcnNMYXN0MiA9IHNwbGl0X3VybFBhcmFtZXRlcnNbc3BsaXRfdXJsUGFyYW1ldGVycy5sZW5ndGggLSAyXTtcclxuICAgIGpRdWVyeSgnYm9keScpLmFkZENsYXNzKFwicGFyYW1ldGVyLS1cIiArIHVybFBhcmFtZXRlcnNMYXN0KTtcclxuICAgIGpRdWVyeSgnYm9keScpLmFkZENsYXNzKFwicGFyYW1ldGVyLS1cIiArIHVybFBhcmFtZXRlcnNMYXN0Mik7XHJcblxyXG4gICAgdmFyIHVybEhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcclxuICAgIHZhciB1cmxIYXNoU3BsaXQgPSB1cmxIYXNoLnNwbGl0KFwiI1wiKTtcclxuICAgIHZhciB1cmxIYXNoQWZ0ZXJTcGxpdCA9IFwiLW5vLWhhc2hcIjtcclxuICAgIGlmICh1cmxIYXNoU3BsaXRbMV0gIT0gbnVsbCkge1xyXG4gICAgICAgIHVybEhhc2hBZnRlclNwbGl0ID0gdXJsSGFzaFNwbGl0WzFdO1xyXG4gICAgfVxyXG4gICAgalF1ZXJ5KCdib2R5JykuYWRkQ2xhc3MoXCJoYXNodGFnLS1cIiArIHVybEhhc2hBZnRlclNwbGl0KTtcclxuXHJcblxyXG59KTtcclxuLyoqLi9VUkwgYWRkZWQgb24gYm9keSB0YWcgYXMgYSBDbGFzcyoqLyJdLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvdHJhaW5lci9faW5jbHVkZS9fY29tbW9uLmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/trainer/_include/_common.js\n");

/***/ }),

/***/ "./resources/js/trainer/adminlte.js":
/*!******************************************!*\
  !*** ./resources/js/trainer/adminlte.js ***!
  \******************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\r\n * AdminLTE v3.0.1 (https://adminlte.io)\r\n * Copyright 2014-2019 Colorlib <http://colorlib.com>\r\n * Licensed under MIT (https://github.com/ColorlibHQ/AdminLTE/blob/master/LICENSE)\r\n */\n(function (global, factory) {\n  ( false ? 0 : _typeof(exports)) === 'object' && \"object\" !== 'undefined' ? factory(exports) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (0);\n})(this, function (exports) {\n  'use strict';\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE ControlSidebar.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n  var ControlSidebar = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'ControlSidebar';\n    var DATA_KEY = 'lte.controlsidebar';\n    var EVENT_KEY = \".\" + DATA_KEY;\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Event = {\n      COLLAPSED: \"collapsed\" + EVENT_KEY,\n      EXPANDED: \"expanded\" + EVENT_KEY\n    };\n    var Selector = {\n      CONTROL_SIDEBAR: '.control-sidebar',\n      CONTROL_SIDEBAR_CONTENT: '.control-sidebar-content',\n      DATA_TOGGLE: '[data-widget=\"control-sidebar\"]',\n      CONTENT: '.content-wrapper',\n      HEADER: '.main-header',\n      FOOTER: '.main-footer'\n    };\n    var ClassName = {\n      CONTROL_SIDEBAR_ANIMATE: 'control-sidebar-animate',\n      CONTROL_SIDEBAR_OPEN: 'control-sidebar-open',\n      CONTROL_SIDEBAR_SLIDE: 'control-sidebar-slide-open',\n      LAYOUT_FIXED: 'layout-fixed',\n      NAVBAR_FIXED: 'layout-navbar-fixed',\n      NAVBAR_SM_FIXED: 'layout-sm-navbar-fixed',\n      NAVBAR_MD_FIXED: 'layout-md-navbar-fixed',\n      NAVBAR_LG_FIXED: 'layout-lg-navbar-fixed',\n      NAVBAR_XL_FIXED: 'layout-xl-navbar-fixed',\n      FOOTER_FIXED: 'layout-footer-fixed',\n      FOOTER_SM_FIXED: 'layout-sm-footer-fixed',\n      FOOTER_MD_FIXED: 'layout-md-footer-fixed',\n      FOOTER_LG_FIXED: 'layout-lg-footer-fixed',\n      FOOTER_XL_FIXED: 'layout-xl-footer-fixed'\n    };\n    var Default = {\n      controlsidebarSlide: true,\n      scrollbarTheme: 'os-theme-light',\n      scrollbarAutoHide: 'l'\n    };\n    /**\r\n     * Class Definition\r\n     * ====================================================\r\n     */\n\n    var ControlSidebar = /*#__PURE__*/function () {\n      function ControlSidebar(element, config) {\n        this._element = element;\n        this._config = config;\n\n        this._init();\n      } // Public\n\n\n      var _proto = ControlSidebar.prototype;\n\n      _proto.show = function show() {\n        // Show the control sidebar\n        if (this._config.controlsidebarSlide) {\n          $('html').addClass(ClassName.CONTROL_SIDEBAR_ANIMATE);\n          $('body').removeClass(ClassName.CONTROL_SIDEBAR_SLIDE).delay(300).queue(function () {\n            $(Selector.CONTROL_SIDEBAR).hide();\n            $('html').removeClass(ClassName.CONTROL_SIDEBAR_ANIMATE);\n            $(this).dequeue();\n          });\n        } else {\n          $('body').removeClass(ClassName.CONTROL_SIDEBAR_OPEN);\n        }\n\n        var expandedEvent = $.Event(Event.EXPANDED);\n        $(this._element).trigger(expandedEvent);\n      };\n\n      _proto.collapse = function collapse() {\n        // Collapse the control sidebar\n        if (this._config.controlsidebarSlide) {\n          $('html').addClass(ClassName.CONTROL_SIDEBAR_ANIMATE);\n          $(Selector.CONTROL_SIDEBAR).show().delay(10).queue(function () {\n            $('body').addClass(ClassName.CONTROL_SIDEBAR_SLIDE).delay(300).queue(function () {\n              $('html').removeClass(ClassName.CONTROL_SIDEBAR_ANIMATE);\n              $(this).dequeue();\n            });\n            $(this).dequeue();\n          });\n        } else {\n          $('body').addClass(ClassName.CONTROL_SIDEBAR_OPEN);\n        }\n\n        var collapsedEvent = $.Event(Event.COLLAPSED);\n        $(this._element).trigger(collapsedEvent);\n      };\n\n      _proto.toggle = function toggle() {\n        var shouldOpen = $('body').hasClass(ClassName.CONTROL_SIDEBAR_OPEN) || $('body').hasClass(ClassName.CONTROL_SIDEBAR_SLIDE);\n\n        if (shouldOpen) {\n          // Open the control sidebar\n          this.show();\n        } else {\n          // Close the control sidebar\n          this.collapse();\n        }\n      } // Private\n      ;\n\n      _proto._init = function _init() {\n        var _this = this;\n\n        this._fixHeight();\n\n        this._fixScrollHeight();\n\n        $(window).resize(function () {\n          _this._fixHeight();\n\n          _this._fixScrollHeight();\n        });\n        $(window).scroll(function () {\n          if ($('body').hasClass(ClassName.CONTROL_SIDEBAR_OPEN) || $('body').hasClass(ClassName.CONTROL_SIDEBAR_SLIDE)) {\n            _this._fixScrollHeight();\n          }\n        });\n      };\n\n      _proto._fixScrollHeight = function _fixScrollHeight() {\n        var heights = {\n          scroll: $(document).height(),\n          window: $(window).height(),\n          header: $(Selector.HEADER).outerHeight(),\n          footer: $(Selector.FOOTER).outerHeight()\n        };\n        var positions = {\n          bottom: Math.abs(heights.window + $(window).scrollTop() - heights.scroll),\n          top: $(window).scrollTop()\n        };\n        var navbarFixed = false;\n        var footerFixed = false;\n\n        if ($('body').hasClass(ClassName.LAYOUT_FIXED)) {\n          if ($('body').hasClass(ClassName.NAVBAR_FIXED) || $('body').hasClass(ClassName.NAVBAR_SM_FIXED) || $('body').hasClass(ClassName.NAVBAR_MD_FIXED) || $('body').hasClass(ClassName.NAVBAR_LG_FIXED) || $('body').hasClass(ClassName.NAVBAR_XL_FIXED)) {\n            if ($(Selector.HEADER).css(\"position\") === \"fixed\") {\n              navbarFixed = true;\n            }\n          }\n\n          if ($('body').hasClass(ClassName.FOOTER_FIXED) || $('body').hasClass(ClassName.FOOTER_SM_FIXED) || $('body').hasClass(ClassName.FOOTER_MD_FIXED) || $('body').hasClass(ClassName.FOOTER_LG_FIXED) || $('body').hasClass(ClassName.FOOTER_XL_FIXED)) {\n            if ($(Selector.FOOTER).css(\"position\") === \"fixed\") {\n              footerFixed = true;\n            }\n          }\n\n          if (positions.top === 0 && positions.bottom === 0) {\n            $(Selector.CONTROL_SIDEBAR).css('bottom', heights.footer);\n            $(Selector.CONTROL_SIDEBAR).css('top', heights.header);\n            $(Selector.CONTROL_SIDEBAR + ', ' + Selector.CONTROL_SIDEBAR + ' ' + Selector.CONTROL_SIDEBAR_CONTENT).css('height', heights.window - (heights.header + heights.footer));\n          } else if (positions.bottom <= heights.footer) {\n            if (footerFixed === false) {\n              $(Selector.CONTROL_SIDEBAR).css('bottom', heights.footer - positions.bottom);\n              $(Selector.CONTROL_SIDEBAR + ', ' + Selector.CONTROL_SIDEBAR + ' ' + Selector.CONTROL_SIDEBAR_CONTENT).css('height', heights.window - (heights.footer - positions.bottom));\n            } else {\n              $(Selector.CONTROL_SIDEBAR).css('bottom', heights.footer);\n            }\n          } else if (positions.top <= heights.header) {\n            if (navbarFixed === false) {\n              $(Selector.CONTROL_SIDEBAR).css('top', heights.header - positions.top);\n              $(Selector.CONTROL_SIDEBAR + ', ' + Selector.CONTROL_SIDEBAR + ' ' + Selector.CONTROL_SIDEBAR_CONTENT).css('height', heights.window - (heights.header - positions.top));\n            } else {\n              $(Selector.CONTROL_SIDEBAR).css('top', heights.header);\n            }\n          } else {\n            if (navbarFixed === false) {\n              $(Selector.CONTROL_SIDEBAR).css('top', 0);\n              $(Selector.CONTROL_SIDEBAR + ', ' + Selector.CONTROL_SIDEBAR + ' ' + Selector.CONTROL_SIDEBAR_CONTENT).css('height', heights.window);\n            } else {\n              $(Selector.CONTROL_SIDEBAR).css('top', heights.header);\n            }\n          }\n        }\n      };\n\n      _proto._fixHeight = function _fixHeight() {\n        var heights = {\n          window: $(window).height(),\n          header: $(Selector.HEADER).outerHeight(),\n          footer: $(Selector.FOOTER).outerHeight()\n        };\n\n        if ($('body').hasClass(ClassName.LAYOUT_FIXED)) {\n          var sidebarHeight = heights.window - heights.header;\n\n          if ($('body').hasClass(ClassName.FOOTER_FIXED) || $('body').hasClass(ClassName.FOOTER_SM_FIXED) || $('body').hasClass(ClassName.FOOTER_MD_FIXED) || $('body').hasClass(ClassName.FOOTER_LG_FIXED) || $('body').hasClass(ClassName.FOOTER_XL_FIXED)) {\n            if ($(Selector.FOOTER).css(\"position\") === \"fixed\") {\n              sidebarHeight = heights.window - heights.header - heights.footer;\n            }\n          }\n\n          $(Selector.CONTROL_SIDEBAR + ' ' + Selector.CONTROL_SIDEBAR_CONTENT).css('height', sidebarHeight);\n\n          if (typeof $.fn.overlayScrollbars !== 'undefined') {\n            $(Selector.CONTROL_SIDEBAR + ' ' + Selector.CONTROL_SIDEBAR_CONTENT).overlayScrollbars({\n              className: this._config.scrollbarTheme,\n              sizeAutoCapable: true,\n              scrollbars: {\n                autoHide: this._config.scrollbarAutoHide,\n                clickScrolling: true\n              }\n            });\n          }\n        }\n      } // Static\n      ;\n\n      ControlSidebar._jQueryInterface = function _jQueryInterface(operation) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n\n          var _options = $.extend({}, Default, $(this).data());\n\n          if (!data) {\n            data = new ControlSidebar(this, _options);\n            $(this).data(DATA_KEY, data);\n          }\n\n          if (data[operation] === 'undefined') {\n            throw new Error(operation + \" is not a function\");\n          }\n\n          data[operation]();\n        });\n      };\n\n      return ControlSidebar;\n    }();\n    /**\r\n     *\r\n     * Data Api implementation\r\n     * ====================================================\r\n     */\n\n\n    $(document).on('click', Selector.DATA_TOGGLE, function (event) {\n      event.preventDefault();\n\n      ControlSidebar._jQueryInterface.call($(this), 'toggle');\n    });\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n    $.fn[NAME] = ControlSidebar._jQueryInterface;\n    $.fn[NAME].Constructor = ControlSidebar;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return ControlSidebar._jQueryInterface;\n    };\n\n    return ControlSidebar;\n  }(jQuery);\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE Layout.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n\n  var Layout = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'Layout';\n    var DATA_KEY = 'lte.layout';\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Selector = {\n      HEADER: '.main-header',\n      MAIN_SIDEBAR: '.main-sidebar',\n      SIDEBAR: '.main-sidebar .sidebar',\n      CONTENT: '.content-wrapper',\n      BRAND: '.brand-link',\n      CONTENT_HEADER: '.content-header',\n      WRAPPER: '.wrapper',\n      CONTROL_SIDEBAR: '.control-sidebar',\n      LAYOUT_FIXED: '.layout-fixed',\n      FOOTER: '.main-footer',\n      PUSHMENU_BTN: '[data-widget=\"pushmenu\"]',\n      LOGIN_BOX: '.login-box',\n      REGISTER_BOX: '.register-box'\n    };\n    var ClassName = {\n      HOLD: 'hold-transition',\n      SIDEBAR: 'main-sidebar',\n      CONTENT_FIXED: 'content-fixed',\n      SIDEBAR_FOCUSED: 'sidebar-focused',\n      LAYOUT_FIXED: 'layout-fixed',\n      NAVBAR_FIXED: 'layout-navbar-fixed',\n      FOOTER_FIXED: 'layout-footer-fixed',\n      LOGIN_PAGE: 'login-page',\n      REGISTER_PAGE: 'register-page'\n    };\n    var Default = {\n      scrollbarTheme: 'os-theme-light',\n      scrollbarAutoHide: 'l'\n    };\n    /**\r\n     * Class Definition\r\n     * ====================================================\r\n     */\n\n    var Layout = /*#__PURE__*/function () {\n      function Layout(element, config) {\n        this._config = config;\n        this._element = element;\n\n        this._init();\n      } // Public\n\n\n      var _proto = Layout.prototype;\n\n      _proto.fixLayoutHeight = function fixLayoutHeight() {\n        var heights = {\n          window: $(window).height(),\n          header: $(Selector.HEADER).length !== 0 ? $(Selector.HEADER).outerHeight() : 0,\n          footer: $(Selector.FOOTER).length !== 0 ? $(Selector.FOOTER).outerHeight() : 0,\n          sidebar: $(Selector.SIDEBAR).length !== 0 ? $(Selector.SIDEBAR).height() : 0\n        };\n\n        var max = this._max(heights);\n\n        if (max == heights.window) {\n          $(Selector.CONTENT).css('min-height', max - heights.header - heights.footer);\n        } else {\n          $(Selector.CONTENT).css('min-height', max - heights.header);\n        }\n\n        if ($('body').hasClass(ClassName.LAYOUT_FIXED)) {\n          $(Selector.CONTENT).css('min-height', max - heights.header - heights.footer);\n\n          if (typeof $.fn.overlayScrollbars !== 'undefined') {\n            $(Selector.SIDEBAR).overlayScrollbars({\n              className: this._config.scrollbarTheme,\n              sizeAutoCapable: true,\n              scrollbars: {\n                autoHide: this._config.scrollbarAutoHide,\n                clickScrolling: true\n              }\n            });\n          }\n        }\n      } // Private\n      ;\n\n      _proto._init = function _init() {\n        var _this = this; // Activate layout height watcher\n\n\n        this.fixLayoutHeight();\n        $(Selector.SIDEBAR).on('collapsed.lte.treeview expanded.lte.treeview', function () {\n          _this.fixLayoutHeight();\n        });\n        $(Selector.PUSHMENU_BTN).on('collapsed.lte.pushmenu shown.lte.pushmenu', function () {\n          _this.fixLayoutHeight();\n        });\n        $(window).resize(function () {\n          _this.fixLayoutHeight();\n        });\n\n        if (!$('body').hasClass(ClassName.LOGIN_PAGE) && !$('body').hasClass(ClassName.REGISTER_PAGE)) {\n          $('body, html').css('height', 'auto');\n        } else if ($('body').hasClass(ClassName.LOGIN_PAGE) || $('body').hasClass(ClassName.REGISTER_PAGE)) {\n          var box_height = $(Selector.LOGIN_BOX + ', ' + Selector.REGISTER_BOX).height();\n          $('body').css('min-height', box_height);\n        }\n\n        $('body.hold-transition').removeClass('hold-transition');\n      };\n\n      _proto._max = function _max(numbers) {\n        // Calculate the maximum number in a list\n        var max = 0;\n        Object.keys(numbers).forEach(function (key) {\n          if (numbers[key] > max) {\n            max = numbers[key];\n          }\n        });\n        return max;\n      } // Static\n      ;\n\n      Layout._jQueryInterface = function _jQueryInterface(config) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n\n          var _options = $.extend({}, Default, $(this).data());\n\n          if (!data) {\n            data = new Layout($(this), _options);\n            $(this).data(DATA_KEY, data);\n          }\n\n          if (config === 'init') {\n            data[config]();\n          }\n        });\n      };\n\n      return Layout;\n    }();\n    /**\r\n     * Data API\r\n     * ====================================================\r\n     */\n\n\n    $(window).on('load', function () {\n      Layout._jQueryInterface.call($('body'));\n    });\n    $(Selector.SIDEBAR + ' a').on('focusin', function () {\n      $(Selector.MAIN_SIDEBAR).addClass(ClassName.SIDEBAR_FOCUSED);\n    });\n    $(Selector.SIDEBAR + ' a').on('focusout', function () {\n      $(Selector.MAIN_SIDEBAR).removeClass(ClassName.SIDEBAR_FOCUSED);\n    });\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n    $.fn[NAME] = Layout._jQueryInterface;\n    $.fn[NAME].Constructor = Layout;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return Layout._jQueryInterface;\n    };\n\n    return Layout;\n  }(jQuery);\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE PushMenu.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n\n  var PushMenu = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'PushMenu';\n    var DATA_KEY = 'lte.pushmenu';\n    var EVENT_KEY = \".\" + DATA_KEY;\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Event = {\n      COLLAPSED: \"collapsed\" + EVENT_KEY,\n      SHOWN: \"shown\" + EVENT_KEY\n    };\n    var Default = {\n      autoCollapseSize: 992,\n      enableRemember: false,\n      noTransitionAfterReload: true\n    };\n    var Selector = {\n      TOGGLE_BUTTON: '[data-widget=\"pushmenu\"]',\n      SIDEBAR_MINI: '.sidebar-mini',\n      SIDEBAR_COLLAPSED: '.sidebar-collapse',\n      BODY: 'body',\n      OVERLAY: '#sidebar-overlay',\n      WRAPPER: '.wrapper'\n    };\n    var ClassName = {\n      SIDEBAR_OPEN: 'sidebar-open',\n      COLLAPSED: 'sidebar-collapse',\n      OPEN: 'sidebar-open'\n    };\n    /**\r\n     * Class Definition\r\n     * ====================================================\r\n     */\n\n    var PushMenu = /*#__PURE__*/function () {\n      function PushMenu(element, options) {\n        this._element = element;\n        this._options = $.extend({}, Default, options);\n\n        if (!$(Selector.OVERLAY).length) {\n          this._addOverlay();\n        }\n\n        this._init();\n      } // Public\n\n\n      var _proto = PushMenu.prototype;\n\n      _proto.expand = function expand() {\n        if (this._options.autoCollapseSize) {\n          if ($(window).width() <= this._options.autoCollapseSize) {\n            $(Selector.BODY).addClass(ClassName.OPEN);\n          }\n        }\n\n        $(Selector.BODY).removeClass(ClassName.COLLAPSED);\n\n        if (this._options.enableRemember) {\n          localStorage.setItem(\"remember\" + EVENT_KEY, ClassName.OPEN);\n        }\n\n        var shownEvent = $.Event(Event.SHOWN);\n        $(this._element).trigger(shownEvent);\n      };\n\n      _proto.collapse = function collapse() {\n        if (this._options.autoCollapseSize) {\n          if ($(window).width() <= this._options.autoCollapseSize) {\n            $(Selector.BODY).removeClass(ClassName.OPEN);\n          }\n        }\n\n        $(Selector.BODY).addClass(ClassName.COLLAPSED);\n\n        if (this._options.enableRemember) {\n          localStorage.setItem(\"remember\" + EVENT_KEY, ClassName.COLLAPSED);\n        }\n\n        var collapsedEvent = $.Event(Event.COLLAPSED);\n        $(this._element).trigger(collapsedEvent);\n      };\n\n      _proto.toggle = function toggle() {\n        if (!$(Selector.BODY).hasClass(ClassName.COLLAPSED)) {\n          this.collapse();\n        } else {\n          this.expand();\n        }\n      };\n\n      _proto.autoCollapse = function autoCollapse(resize) {\n        if (resize === void 0) {\n          resize = false;\n        }\n\n        if (this._options.autoCollapseSize) {\n          if ($(window).width() <= this._options.autoCollapseSize) {\n            if (!$(Selector.BODY).hasClass(ClassName.OPEN)) {\n              this.collapse();\n            }\n          } else if (resize == true) {\n            if ($(Selector.BODY).hasClass(ClassName.OPEN)) {\n              $(Selector.BODY).removeClass(ClassName.OPEN);\n            }\n          }\n        }\n      };\n\n      _proto.remember = function remember() {\n        if (this._options.enableRemember) {\n          var toggleState = localStorage.getItem(\"remember\" + EVENT_KEY);\n\n          if (toggleState == ClassName.COLLAPSED) {\n            if (this._options.noTransitionAfterReload) {\n              $(\"body\").addClass('hold-transition').addClass(ClassName.COLLAPSED).delay(50).queue(function () {\n                $(this).removeClass('hold-transition');\n                $(this).dequeue();\n              });\n            } else {\n              $(\"body\").addClass(ClassName.COLLAPSED);\n            }\n          } else {\n            if (this._options.noTransitionAfterReload) {\n              $(\"body\").addClass('hold-transition').removeClass(ClassName.COLLAPSED).delay(50).queue(function () {\n                $(this).removeClass('hold-transition');\n                $(this).dequeue();\n              });\n            } else {\n              $(\"body\").removeClass(ClassName.COLLAPSED);\n            }\n          }\n        }\n      } // Private\n      ;\n\n      _proto._init = function _init() {\n        var _this = this;\n\n        this.remember();\n        this.autoCollapse();\n        $(window).resize(function () {\n          _this.autoCollapse(true);\n        });\n      };\n\n      _proto._addOverlay = function _addOverlay() {\n        var _this2 = this;\n\n        var overlay = $('<div />', {\n          id: 'sidebar-overlay'\n        });\n        overlay.on('click', function () {\n          _this2.collapse();\n        });\n        $(Selector.WRAPPER).append(overlay);\n      } // Static\n      ;\n\n      PushMenu._jQueryInterface = function _jQueryInterface(operation) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n\n          var _options = $.extend({}, Default, $(this).data());\n\n          if (!data) {\n            data = new PushMenu(this, _options);\n            $(this).data(DATA_KEY, data);\n          }\n\n          if (typeof operation === 'string' && operation.match(/collapse|expand|toggle/)) {\n            data[operation]();\n          }\n        });\n      };\n\n      return PushMenu;\n    }();\n    /**\r\n     * Data API\r\n     * ====================================================\r\n     */\n\n\n    $(document).on('click', Selector.TOGGLE_BUTTON, function (event) {\n      event.preventDefault();\n      var button = event.currentTarget;\n\n      if ($(button).data('widget') !== 'pushmenu') {\n        button = $(button).closest(Selector.TOGGLE_BUTTON);\n      }\n\n      PushMenu._jQueryInterface.call($(button), 'toggle');\n    });\n    $(window).on('load', function () {\n      PushMenu._jQueryInterface.call($(Selector.TOGGLE_BUTTON));\n    });\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n    $.fn[NAME] = PushMenu._jQueryInterface;\n    $.fn[NAME].Constructor = PushMenu;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return PushMenu._jQueryInterface;\n    };\n\n    return PushMenu;\n  }(jQuery);\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE Treeview.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n\n  var Treeview = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'Treeview';\n    var DATA_KEY = 'lte.treeview';\n    var EVENT_KEY = \".\" + DATA_KEY;\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Event = {\n      SELECTED: \"selected\" + EVENT_KEY,\n      EXPANDED: \"expanded\" + EVENT_KEY,\n      COLLAPSED: \"collapsed\" + EVENT_KEY,\n      LOAD_DATA_API: \"load\" + EVENT_KEY\n    };\n    var Selector = {\n      LI: '.nav-item',\n      LINK: '.nav-link',\n      TREEVIEW_MENU: '.nav-treeview',\n      OPEN: '.menu-open',\n      DATA_WIDGET: '[data-widget=\"treeview\"]'\n    };\n    var ClassName = {\n      LI: 'nav-item',\n      LINK: 'nav-link',\n      TREEVIEW_MENU: 'nav-treeview',\n      OPEN: 'menu-open',\n      SIDEBAR_COLLAPSED: 'sidebar-collapse'\n    };\n    var Default = {\n      trigger: Selector.DATA_WIDGET + \" \" + Selector.LINK,\n      animationSpeed: 300,\n      accordion: true,\n      expandSidebar: false,\n      sidebarButtonSelector: '[data-widget=\"pushmenu\"]'\n    };\n    /**\r\n     * Class Definition\r\n     * ====================================================\r\n     */\n\n    var Treeview = /*#__PURE__*/function () {\n      function Treeview(element, config) {\n        this._config = config;\n        this._element = element;\n      } // Public\n\n\n      var _proto = Treeview.prototype;\n\n      _proto.init = function init() {\n        this._setupListeners();\n      };\n\n      _proto.expand = function expand(treeviewMenu, parentLi) {\n        var _this = this;\n\n        var expandedEvent = $.Event(Event.EXPANDED);\n\n        if (this._config.accordion) {\n          var openMenuLi = parentLi.siblings(Selector.OPEN).first();\n          var openTreeview = openMenuLi.find(Selector.TREEVIEW_MENU).first();\n          this.collapse(openTreeview, openMenuLi);\n        }\n\n        treeviewMenu.stop().slideDown(this._config.animationSpeed, function () {\n          parentLi.addClass(ClassName.OPEN);\n          $(_this._element).trigger(expandedEvent);\n        });\n\n        if (this._config.expandSidebar) {\n          this._expandSidebar();\n        }\n      };\n\n      _proto.collapse = function collapse(treeviewMenu, parentLi) {\n        var _this2 = this;\n\n        var collapsedEvent = $.Event(Event.COLLAPSED);\n        treeviewMenu.stop().slideUp(this._config.animationSpeed, function () {\n          parentLi.removeClass(ClassName.OPEN);\n          $(_this2._element).trigger(collapsedEvent);\n          treeviewMenu.find(Selector.OPEN + \" > \" + Selector.TREEVIEW_MENU).slideUp();\n          treeviewMenu.find(Selector.OPEN).removeClass(ClassName.OPEN);\n        });\n      };\n\n      _proto.toggle = function toggle(event) {\n        var $relativeTarget = $(event.currentTarget);\n        var $parent = $relativeTarget.parent();\n        var treeviewMenu = $parent.find('> ' + Selector.TREEVIEW_MENU);\n\n        if (!treeviewMenu.is(Selector.TREEVIEW_MENU)) {\n          if (!$parent.is(Selector.LI)) {\n            treeviewMenu = $parent.parent().find('> ' + Selector.TREEVIEW_MENU);\n          }\n\n          if (!treeviewMenu.is(Selector.TREEVIEW_MENU)) {\n            return;\n          }\n        }\n\n        event.preventDefault();\n        var parentLi = $relativeTarget.parents(Selector.LI).first();\n        var isOpen = parentLi.hasClass(ClassName.OPEN);\n\n        if (isOpen) {\n          this.collapse($(treeviewMenu), parentLi);\n        } else {\n          this.expand($(treeviewMenu), parentLi);\n        }\n      } // Private\n      ;\n\n      _proto._setupListeners = function _setupListeners() {\n        var _this3 = this;\n\n        $(document).on('click', this._config.trigger, function (event) {\n          _this3.toggle(event);\n        });\n      };\n\n      _proto._expandSidebar = function _expandSidebar() {\n        if ($('body').hasClass(ClassName.SIDEBAR_COLLAPSED)) {\n          $(this._config.sidebarButtonSelector).PushMenu('expand');\n        }\n      } // Static\n      ;\n\n      Treeview._jQueryInterface = function _jQueryInterface(config) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n\n          var _options = $.extend({}, Default, $(this).data());\n\n          if (!data) {\n            data = new Treeview($(this), _options);\n            $(this).data(DATA_KEY, data);\n          }\n\n          if (config === 'init') {\n            data[config]();\n          }\n        });\n      };\n\n      return Treeview;\n    }();\n    /**\r\n     * Data API\r\n     * ====================================================\r\n     */\n\n\n    $(window).on(Event.LOAD_DATA_API, function () {\n      $(Selector.DATA_WIDGET).each(function () {\n        Treeview._jQueryInterface.call($(this), 'init');\n      });\n    });\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n    $.fn[NAME] = Treeview._jQueryInterface;\n    $.fn[NAME].Constructor = Treeview;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return Treeview._jQueryInterface;\n    };\n\n    return Treeview;\n  }(jQuery);\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE DirectChat.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n\n  var DirectChat = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'DirectChat';\n    var DATA_KEY = 'lte.directchat';\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Event = {\n      TOGGLED: \"toggled{EVENT_KEY}\"\n    };\n    var Selector = {\n      DATA_TOGGLE: '[data-widget=\"chat-pane-toggle\"]',\n      DIRECT_CHAT: '.direct-chat'\n    };\n    var ClassName = {\n      DIRECT_CHAT_OPEN: 'direct-chat-contacts-open'\n    };\n    /**\r\n     * Class Definition\r\n     * ====================================================\r\n     */\n\n    var DirectChat = /*#__PURE__*/function () {\n      function DirectChat(element, config) {\n        this._element = element;\n      }\n\n      var _proto = DirectChat.prototype;\n\n      _proto.toggle = function toggle() {\n        $(this._element).parents(Selector.DIRECT_CHAT).first().toggleClass(ClassName.DIRECT_CHAT_OPEN);\n        var toggledEvent = $.Event(Event.TOGGLED);\n        $(this._element).trigger(toggledEvent);\n      } // Static\n      ;\n\n      DirectChat._jQueryInterface = function _jQueryInterface(config) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n\n          if (!data) {\n            data = new DirectChat($(this));\n            $(this).data(DATA_KEY, data);\n          }\n\n          data[config]();\n        });\n      };\n\n      return DirectChat;\n    }();\n    /**\r\n     *\r\n     * Data Api implementation\r\n     * ====================================================\r\n     */\n\n\n    $(document).on('click', Selector.DATA_TOGGLE, function (event) {\n      if (event) event.preventDefault();\n\n      DirectChat._jQueryInterface.call($(this), 'toggle');\n    });\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n    $.fn[NAME] = DirectChat._jQueryInterface;\n    $.fn[NAME].Constructor = DirectChat;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return DirectChat._jQueryInterface;\n    };\n\n    return DirectChat;\n  }(jQuery);\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE TodoList.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n\n  var TodoList = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'TodoList';\n    var DATA_KEY = 'lte.todolist';\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Selector = {\n      DATA_TOGGLE: '[data-widget=\"todo-list\"]'\n    };\n    var ClassName = {\n      TODO_LIST_DONE: 'done'\n    };\n    var Default = {\n      onCheck: function onCheck(item) {\n        return item;\n      },\n      onUnCheck: function onUnCheck(item) {\n        return item;\n      }\n    };\n    /**\r\n     * Class Definition\r\n     * ====================================================\r\n     */\n\n    var TodoList = /*#__PURE__*/function () {\n      function TodoList(element, config) {\n        this._config = config;\n        this._element = element;\n\n        this._init();\n      } // Public\n\n\n      var _proto = TodoList.prototype;\n\n      _proto.toggle = function toggle(item) {\n        item.parents('li').toggleClass(ClassName.TODO_LIST_DONE);\n\n        if (!$(item).prop('checked')) {\n          this.unCheck($(item));\n          return;\n        }\n\n        this.check(item);\n      };\n\n      _proto.check = function check(item) {\n        this._config.onCheck.call(item);\n      };\n\n      _proto.unCheck = function unCheck(item) {\n        this._config.onUnCheck.call(item);\n      } // Private\n      ;\n\n      _proto._init = function _init() {\n        var that = this;\n        $(Selector.DATA_TOGGLE).find('input:checkbox:checked').parents('li').toggleClass(ClassName.TODO_LIST_DONE);\n        $(Selector.DATA_TOGGLE).on('change', 'input:checkbox', function (event) {\n          that.toggle($(event.target));\n        });\n      } // Static\n      ;\n\n      TodoList._jQueryInterface = function _jQueryInterface(config) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n\n          var _options = $.extend({}, Default, $(this).data());\n\n          if (!data) {\n            data = new TodoList($(this), _options);\n            $(this).data(DATA_KEY, data);\n          }\n\n          if (config === 'init') {\n            data[config]();\n          }\n        });\n      };\n\n      return TodoList;\n    }();\n    /**\r\n     * Data API\r\n     * ====================================================\r\n     */\n\n\n    $(window).on('load', function () {\n      TodoList._jQueryInterface.call($(Selector.DATA_TOGGLE));\n    });\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n    $.fn[NAME] = TodoList._jQueryInterface;\n    $.fn[NAME].Constructor = TodoList;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return TodoList._jQueryInterface;\n    };\n\n    return TodoList;\n  }(jQuery);\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE CardWidget.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n\n  var CardWidget = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'CardWidget';\n    var DATA_KEY = 'lte.cardwidget';\n    var EVENT_KEY = \".\" + DATA_KEY;\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Event = {\n      EXPANDED: \"expanded\" + EVENT_KEY,\n      COLLAPSED: \"collapsed\" + EVENT_KEY,\n      MAXIMIZED: \"maximized\" + EVENT_KEY,\n      MINIMIZED: \"minimized\" + EVENT_KEY,\n      REMOVED: \"removed\" + EVENT_KEY\n    };\n    var ClassName = {\n      CARD: 'card',\n      COLLAPSED: 'collapsed-card',\n      WAS_COLLAPSED: 'was-collapsed',\n      MAXIMIZED: 'maximized-card'\n    };\n    var Selector = {\n      DATA_REMOVE: '[data-card-widget=\"remove\"]',\n      DATA_COLLAPSE: '[data-card-widget=\"collapse\"]',\n      DATA_MAXIMIZE: '[data-card-widget=\"maximize\"]',\n      CARD: \".\" + ClassName.CARD,\n      CARD_HEADER: '.card-header',\n      CARD_BODY: '.card-body',\n      CARD_FOOTER: '.card-footer',\n      COLLAPSED: \".\" + ClassName.COLLAPSED\n    };\n    var Default = {\n      animationSpeed: 'normal',\n      collapseTrigger: Selector.DATA_COLLAPSE,\n      removeTrigger: Selector.DATA_REMOVE,\n      maximizeTrigger: Selector.DATA_MAXIMIZE,\n      collapseIcon: 'fa-minus',\n      expandIcon: 'fa-plus',\n      maximizeIcon: 'fa-expand',\n      minimizeIcon: 'fa-compress'\n    };\n\n    var CardWidget = /*#__PURE__*/function () {\n      function CardWidget(element, settings) {\n        this._element = element;\n        this._parent = element.parents(Selector.CARD).first();\n\n        if (element.hasClass(ClassName.CARD)) {\n          this._parent = element;\n        }\n\n        this._settings = $.extend({}, Default, settings);\n      }\n\n      var _proto = CardWidget.prototype;\n\n      _proto.collapse = function collapse() {\n        var _this = this;\n\n        this._parent.children(Selector.CARD_BODY + \", \" + Selector.CARD_FOOTER).slideUp(this._settings.animationSpeed, function () {\n          _this._parent.addClass(ClassName.COLLAPSED);\n        });\n\n        this._parent.find(this._settings.collapseTrigger + ' .' + this._settings.collapseIcon).addClass(this._settings.expandIcon).removeClass(this._settings.collapseIcon);\n\n        var collapsed = $.Event(Event.COLLAPSED);\n\n        this._element.trigger(collapsed, this._parent);\n      };\n\n      _proto.expand = function expand() {\n        var _this2 = this;\n\n        this._parent.children(Selector.CARD_BODY + \", \" + Selector.CARD_FOOTER).slideDown(this._settings.animationSpeed, function () {\n          _this2._parent.removeClass(ClassName.COLLAPSED);\n        });\n\n        this._parent.find(this._settings.collapseTrigger + ' .' + this._settings.expandIcon).addClass(this._settings.collapseIcon).removeClass(this._settings.expandIcon);\n\n        var expanded = $.Event(Event.EXPANDED);\n\n        this._element.trigger(expanded, this._parent);\n      };\n\n      _proto.remove = function remove() {\n        this._parent.slideUp();\n\n        var removed = $.Event(Event.REMOVED);\n\n        this._element.trigger(removed, this._parent);\n      };\n\n      _proto.toggle = function toggle() {\n        if (this._parent.hasClass(ClassName.COLLAPSED)) {\n          this.expand();\n          return;\n        }\n\n        this.collapse();\n      };\n\n      _proto.maximize = function maximize() {\n        this._parent.find(this._settings.maximizeTrigger + ' .' + this._settings.maximizeIcon).addClass(this._settings.minimizeIcon).removeClass(this._settings.maximizeIcon);\n\n        this._parent.css({\n          'height': this._parent.height(),\n          'width': this._parent.width(),\n          'transition': 'all .15s'\n        }).delay(150).queue(function () {\n          $(this).addClass(ClassName.MAXIMIZED);\n          $('html').addClass(ClassName.MAXIMIZED);\n\n          if ($(this).hasClass(ClassName.COLLAPSED)) {\n            $(this).addClass(ClassName.WAS_COLLAPSED);\n          }\n\n          $(this).dequeue();\n        });\n\n        var maximized = $.Event(Event.MAXIMIZED);\n\n        this._element.trigger(maximized, this._parent);\n      };\n\n      _proto.minimize = function minimize() {\n        this._parent.find(this._settings.maximizeTrigger + ' .' + this._settings.minimizeIcon).addClass(this._settings.maximizeIcon).removeClass(this._settings.minimizeIcon);\n\n        this._parent.css('cssText', 'height:' + this._parent[0].style.height + ' !important;' + 'width:' + this._parent[0].style.width + ' !important; transition: all .15s;').delay(10).queue(function () {\n          $(this).removeClass(ClassName.MAXIMIZED);\n          $('html').removeClass(ClassName.MAXIMIZED);\n          $(this).css({\n            'height': 'inherit',\n            'width': 'inherit'\n          });\n\n          if ($(this).hasClass(ClassName.WAS_COLLAPSED)) {\n            $(this).removeClass(ClassName.WAS_COLLAPSED);\n          }\n\n          $(this).dequeue();\n        });\n\n        var MINIMIZED = $.Event(Event.MINIMIZED);\n\n        this._element.trigger(MINIMIZED, this._parent);\n      };\n\n      _proto.toggleMaximize = function toggleMaximize() {\n        if (this._parent.hasClass(ClassName.MAXIMIZED)) {\n          this.minimize();\n          return;\n        }\n\n        this.maximize();\n      } // Private\n      ;\n\n      _proto._init = function _init(card) {\n        var _this3 = this;\n\n        this._parent = card;\n        $(this).find(this._settings.collapseTrigger).click(function () {\n          _this3.toggle();\n        });\n        $(this).find(this._settings.maximizeTrigger).click(function () {\n          _this3.toggleMaximize();\n        });\n        $(this).find(this._settings.removeTrigger).click(function () {\n          _this3.remove();\n        });\n      } // Static\n      ;\n\n      CardWidget._jQueryInterface = function _jQueryInterface(config) {\n        var data = $(this).data(DATA_KEY);\n\n        var _options = $.extend({}, Default, $(this).data());\n\n        if (!data) {\n          data = new CardWidget($(this), _options);\n          $(this).data(DATA_KEY, typeof config === 'string' ? data : config);\n        }\n\n        if (typeof config === 'string' && config.match(/collapse|expand|remove|toggle|maximize|minimize|toggleMaximize/)) {\n          data[config]();\n        } else if (_typeof(config) === 'object') {\n          data._init($(this));\n        }\n      };\n\n      return CardWidget;\n    }();\n    /**\r\n     * Data API\r\n     * ====================================================\r\n     */\n\n\n    $(document).on('click', Selector.DATA_COLLAPSE, function (event) {\n      if (event) {\n        event.preventDefault();\n      }\n\n      CardWidget._jQueryInterface.call($(this), 'toggle');\n    });\n    $(document).on('click', Selector.DATA_REMOVE, function (event) {\n      if (event) {\n        event.preventDefault();\n      }\n\n      CardWidget._jQueryInterface.call($(this), 'remove');\n    });\n    $(document).on('click', Selector.DATA_MAXIMIZE, function (event) {\n      if (event) {\n        event.preventDefault();\n      }\n\n      CardWidget._jQueryInterface.call($(this), 'toggleMaximize');\n    });\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n    $.fn[NAME] = CardWidget._jQueryInterface;\n    $.fn[NAME].Constructor = CardWidget;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return CardWidget._jQueryInterface;\n    };\n\n    return CardWidget;\n  }(jQuery);\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE CardRefresh.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n\n  var CardRefresh = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'CardRefresh';\n    var DATA_KEY = 'lte.cardrefresh';\n    var EVENT_KEY = \".\" + DATA_KEY;\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Event = {\n      LOADED: \"loaded\" + EVENT_KEY,\n      OVERLAY_ADDED: \"overlay.added\" + EVENT_KEY,\n      OVERLAY_REMOVED: \"overlay.removed\" + EVENT_KEY\n    };\n    var ClassName = {\n      CARD: 'card'\n    };\n    var Selector = {\n      CARD: \".\" + ClassName.CARD,\n      DATA_REFRESH: '[data-card-widget=\"card-refresh\"]'\n    };\n    var Default = {\n      source: '',\n      sourceSelector: '',\n      params: {},\n      trigger: Selector.DATA_REFRESH,\n      content: '.card-body',\n      loadInContent: true,\n      loadOnInit: true,\n      responseType: '',\n      overlayTemplate: '<div class=\"overlay\"><i class=\"fas fa-2x fa-sync-alt fa-spin\"></i></div>',\n      onLoadStart: function onLoadStart() {},\n      onLoadDone: function onLoadDone(response) {\n        return response;\n      }\n    };\n\n    var CardRefresh = /*#__PURE__*/function () {\n      function CardRefresh(element, settings) {\n        this._element = element;\n        this._parent = element.parents(Selector.CARD).first();\n        this._settings = $.extend({}, Default, settings);\n        this._overlay = $(this._settings.overlayTemplate);\n\n        if (element.hasClass(ClassName.CARD)) {\n          this._parent = element;\n        }\n\n        if (this._settings.source === '') {\n          throw new Error('Source url was not defined. Please specify a url in your CardRefresh source option.');\n        }\n\n        this._init();\n\n        if (this._settings.loadOnInit) {\n          this.load();\n        }\n      }\n\n      var _proto = CardRefresh.prototype;\n\n      _proto.load = function load() {\n        this._addOverlay();\n\n        this._settings.onLoadStart.call($(this));\n\n        $.get(this._settings.source, this._settings.params, function (response) {\n          if (this._settings.loadInContent) {\n            if (this._settings.sourceSelector != '') {\n              response = $(response).find(this._settings.sourceSelector).html();\n            }\n\n            this._parent.find(this._settings.content).html(response);\n          }\n\n          this._settings.onLoadDone.call($(this), response);\n\n          this._removeOverlay();\n        }.bind(this), this._settings.responseType !== '' && this._settings.responseType);\n        var loadedEvent = $.Event(Event.LOADED);\n        $(this._element).trigger(loadedEvent);\n      };\n\n      _proto._addOverlay = function _addOverlay() {\n        this._parent.append(this._overlay);\n\n        var overlayAddedEvent = $.Event(Event.OVERLAY_ADDED);\n        $(this._element).trigger(overlayAddedEvent);\n      };\n\n      _proto._removeOverlay = function _removeOverlay() {\n        this._parent.find(this._overlay).remove();\n\n        var overlayRemovedEvent = $.Event(Event.OVERLAY_REMOVED);\n        $(this._element).trigger(overlayRemovedEvent);\n      }; // Private\n\n\n      _proto._init = function _init(card) {\n        var _this = this;\n\n        $(this).find(this._settings.trigger).on('click', function () {\n          _this.load();\n        });\n      } // Static\n      ;\n\n      CardRefresh._jQueryInterface = function _jQueryInterface(config) {\n        var data = $(this).data(DATA_KEY);\n\n        var _options = $.extend({}, Default, $(this).data());\n\n        if (!data) {\n          data = new CardRefresh($(this), _options);\n          $(this).data(DATA_KEY, typeof config === 'string' ? data : config);\n        }\n\n        if (typeof config === 'string' && config.match(/load/)) {\n          data[config]();\n        } else if (_typeof(config) === 'object') {\n          data._init($(this));\n        }\n      };\n\n      return CardRefresh;\n    }();\n    /**\r\n     * Data API\r\n     * ====================================================\r\n     */\n\n\n    $(document).on('click', Selector.DATA_REFRESH, function (event) {\n      if (event) {\n        event.preventDefault();\n      }\n\n      CardRefresh._jQueryInterface.call($(this), 'load');\n    });\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n    $.fn[NAME] = CardRefresh._jQueryInterface;\n    $.fn[NAME].Constructor = CardRefresh;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return CardRefresh._jQueryInterface;\n    };\n\n    return CardRefresh;\n  }(jQuery);\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE Dropdown.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n\n  var Dropdown = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'Dropdown';\n    var DATA_KEY = 'lte.dropdown';\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Selector = {\n      DROPDOWN_MENU: 'ul.dropdown-menu',\n      DROPDOWN_TOGGLE: '[data-toggle=\"dropdown\"]'\n    };\n    var Default = {};\n    /**\r\n     * Class Definition\r\n     * ====================================================\r\n     */\n\n    var Dropdown = /*#__PURE__*/function () {\n      function Dropdown(element, config) {\n        this._config = config;\n        this._element = element;\n      } // Public\n\n\n      var _proto = Dropdown.prototype;\n\n      _proto.toggleSubmenu = function toggleSubmenu() {\n        this._element.siblings().show().toggleClass(\"show\");\n\n        if (!this._element.next().hasClass('show')) {\n          this._element.parents('.dropdown-menu').first().find('.show').removeClass(\"show\").hide();\n        }\n\n        this._element.parents('li.nav-item.dropdown.show').on('hidden.bs.dropdown', function (e) {\n          $('.dropdown-submenu .show').removeClass(\"show\").hide();\n        });\n      } // Static\n      ;\n\n      Dropdown._jQueryInterface = function _jQueryInterface(config) {\n        return this.each(function () {\n          var data = $(this).data(DATA_KEY);\n\n          var _config = $.extend({}, Default, $(this).data());\n\n          if (!data) {\n            data = new Dropdown($(this), _config);\n            $(this).data(DATA_KEY, data);\n          }\n\n          if (config === 'toggleSubmenu') {\n            data[config]();\n          }\n        });\n      };\n\n      return Dropdown;\n    }();\n    /**\r\n     * Data API\r\n     * ====================================================\r\n     */\n\n\n    $(Selector.DROPDOWN_MENU + ' ' + Selector.DROPDOWN_TOGGLE).on(\"click\", function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      Dropdown._jQueryInterface.call($(this), 'toggleSubmenu');\n    }); // $(Selector.SIDEBAR + ' a').on('focusin', () => {\n    //   $(Selector.MAIN_SIDEBAR).addClass(ClassName.SIDEBAR_FOCUSED);\n    // })\n    // $(Selector.SIDEBAR + ' a').on('focusout', () => {\n    //   $(Selector.MAIN_SIDEBAR).removeClass(ClassName.SIDEBAR_FOCUSED);\n    // })\n\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n    $.fn[NAME] = Dropdown._jQueryInterface;\n    $.fn[NAME].Constructor = Dropdown;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return Dropdown._jQueryInterface;\n    };\n\n    return Dropdown;\n  }(jQuery);\n  /**\r\n   * --------------------------------------------\r\n   * AdminLTE Toasts.js\r\n   * License MIT\r\n   * --------------------------------------------\r\n   */\n\n\n  var Toasts = function ($) {\n    /**\r\n     * Constants\r\n     * ====================================================\r\n     */\n    var NAME = 'Toasts';\n    var DATA_KEY = 'lte.toasts';\n    var EVENT_KEY = \".\" + DATA_KEY;\n    var JQUERY_NO_CONFLICT = $.fn[NAME];\n    var Event = {\n      INIT: \"init\" + EVENT_KEY,\n      CREATED: \"created\" + EVENT_KEY,\n      REMOVED: \"removed\" + EVENT_KEY\n    };\n    var Selector = {\n      BODY: 'toast-body',\n      CONTAINER_TOP_RIGHT: '#toastsContainerTopRight',\n      CONTAINER_TOP_LEFT: '#toastsContainerTopLeft',\n      CONTAINER_BOTTOM_RIGHT: '#toastsContainerBottomRight',\n      CONTAINER_BOTTOM_LEFT: '#toastsContainerBottomLeft'\n    };\n    var ClassName = {\n      TOP_RIGHT: 'toasts-top-right',\n      TOP_LEFT: 'toasts-top-left',\n      BOTTOM_RIGHT: 'toasts-bottom-right',\n      BOTTOM_LEFT: 'toasts-bottom-left',\n      FADE: 'fade'\n    };\n    var Position = {\n      TOP_RIGHT: 'topRight',\n      TOP_LEFT: 'topLeft',\n      BOTTOM_RIGHT: 'bottomRight',\n      BOTTOM_LEFT: 'bottomLeft'\n    };\n    var Default = {\n      position: Position.TOP_RIGHT,\n      fixed: true,\n      autohide: false,\n      autoremove: true,\n      delay: 1000,\n      fade: true,\n      icon: null,\n      image: null,\n      imageAlt: null,\n      imageHeight: '25px',\n      title: null,\n      subtitle: null,\n      close: true,\n      body: null,\n      \"class\": null\n    };\n    /**\r\n     * Class Definition\r\n     * ====================================================\r\n     */\n\n    var Toasts = /*#__PURE__*/function () {\n      function Toasts(element, config) {\n        this._config = config;\n\n        this._prepareContainer();\n\n        var initEvent = $.Event(Event.INIT);\n        $('body').trigger(initEvent);\n      } // Public\n\n\n      var _proto = Toasts.prototype;\n\n      _proto.create = function create() {\n        var toast = $('<div class=\"toast\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\"/>');\n        toast.data('autohide', this._config.autohide);\n        toast.data('animation', this._config.fade);\n\n        if (this._config[\"class\"]) {\n          toast.addClass(this._config[\"class\"]);\n        }\n\n        if (this._config.delay && this._config.delay != 500) {\n          toast.data('delay', this._config.delay);\n        }\n\n        var toast_header = $('<div class=\"toast-header\">');\n\n        if (this._config.image != null) {\n          var toast_image = $('<img />').addClass('rounded mr-2').attr('src', this._config.image).attr('alt', this._config.imageAlt);\n\n          if (this._config.imageHeight != null) {\n            toast_image.height(this._config.imageHeight).width('auto');\n          }\n\n          toast_header.append(toast_image);\n        }\n\n        if (this._config.icon != null) {\n          toast_header.append($('<i />').addClass('mr-2').addClass(this._config.icon));\n        }\n\n        if (this._config.title != null) {\n          toast_header.append($('<strong />').addClass('mr-auto').html(this._config.title));\n        }\n\n        if (this._config.subtitle != null) {\n          toast_header.append($('<small />').html(this._config.subtitle));\n        }\n\n        if (this._config.close == true) {\n          var toast_close = $('<button data-dismiss=\"toast\" />').attr('type', 'button').addClass('ml-2 mb-1 close').attr('aria-label', 'Close').append('<span aria-hidden=\"true\">&times;</span>');\n\n          if (this._config.title == null) {\n            toast_close.toggleClass('ml-2 ml-auto');\n          }\n\n          toast_header.append(toast_close);\n        }\n\n        toast.append(toast_header);\n\n        if (this._config.body != null) {\n          toast.append($('<div class=\"toast-body\" />').html(this._config.body));\n        }\n\n        $(this._getContainerId()).prepend(toast);\n        var createdEvent = $.Event(Event.CREATED);\n        $('body').trigger(createdEvent);\n        toast.toast('show');\n\n        if (this._config.autoremove) {\n          toast.on('hidden.bs.toast', function () {\n            $(this).delay(200).remove();\n            var removedEvent = $.Event(Event.REMOVED);\n            $('body').trigger(removedEvent);\n          });\n        }\n      } // Static\n      ;\n\n      _proto._getContainerId = function _getContainerId() {\n        if (this._config.position == Position.TOP_RIGHT) {\n          return Selector.CONTAINER_TOP_RIGHT;\n        } else if (this._config.position == Position.TOP_LEFT) {\n          return Selector.CONTAINER_TOP_LEFT;\n        } else if (this._config.position == Position.BOTTOM_RIGHT) {\n          return Selector.CONTAINER_BOTTOM_RIGHT;\n        } else if (this._config.position == Position.BOTTOM_LEFT) {\n          return Selector.CONTAINER_BOTTOM_LEFT;\n        }\n      };\n\n      _proto._prepareContainer = function _prepareContainer() {\n        if ($(this._getContainerId()).length === 0) {\n          var container = $('<div />').attr('id', this._getContainerId().replace('#', ''));\n\n          if (this._config.position == Position.TOP_RIGHT) {\n            container.addClass(ClassName.TOP_RIGHT);\n          } else if (this._config.position == Position.TOP_LEFT) {\n            container.addClass(ClassName.TOP_LEFT);\n          } else if (this._config.position == Position.BOTTOM_RIGHT) {\n            container.addClass(ClassName.BOTTOM_RIGHT);\n          } else if (this._config.position == Position.BOTTOM_LEFT) {\n            container.addClass(ClassName.BOTTOM_LEFT);\n          }\n\n          $('body').append(container);\n        }\n\n        if (this._config.fixed) {\n          $(this._getContainerId()).addClass('fixed');\n        } else {\n          $(this._getContainerId()).removeClass('fixed');\n        }\n      } // Static\n      ;\n\n      Toasts._jQueryInterface = function _jQueryInterface(option, config) {\n        return this.each(function () {\n          var _options = $.extend({}, Default, config);\n\n          var toast = new Toasts($(this), _options);\n\n          if (option === 'create') {\n            toast[option]();\n          }\n        });\n      };\n\n      return Toasts;\n    }();\n    /**\r\n     * jQuery API\r\n     * ====================================================\r\n     */\n\n\n    $.fn[NAME] = Toasts._jQueryInterface;\n    $.fn[NAME].Constructor = Toasts;\n\n    $.fn[NAME].noConflict = function () {\n      $.fn[NAME] = JQUERY_NO_CONFLICT;\n      return Toasts._jQueryInterface;\n    };\n\n    return Toasts;\n  }(jQuery);\n\n  exports.CardRefresh = CardRefresh;\n  exports.CardWidget = CardWidget;\n  exports.ControlSidebar = ControlSidebar;\n  exports.DirectChat = DirectChat;\n  exports.Dropdown = Dropdown;\n  exports.Layout = Layout;\n  exports.PushMenu = PushMenu;\n  exports.Toasts = Toasts;\n  exports.TodoList = TodoList;\n  exports.Treeview = Treeview;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/trainer/adminlte.js\n");

/***/ }),

/***/ "./resources/js/trainer/custom.js":
/*!****************************************!*\
  !*** ./resources/js/trainer/custom.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("__webpack_require__(/*! ./_include/_common.js */ \"./resources/js/trainer/_include/_common.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvdHJhaW5lci9jdXN0b20uanMuanMiLCJtYXBwaW5ncyI6IkFBQUFBLG1CQUFPLENBQUUseUVBQUYsQ0FBUCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy90cmFpbmVyL2N1c3RvbS5qcz8zYWIxIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUgKCcuL19pbmNsdWRlL19jb21tb24uanMnKTsiXSwibmFtZXMiOlsicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/trainer/custom.js\n");

/***/ }),

/***/ "./resources/js/trainer/footer.js":
/*!****************************************!*\
  !*** ./resources/js/trainer/footer.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("//Adminlte\n__webpack_require__(/*! ./adminlte.js */ \"./resources/js/trainer/adminlte.js\"); //myCustomjs\n\n\n__webpack_require__(/*! ./custom.js */ \"./resources/js/trainer/custom.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvdHJhaW5lci9mb290ZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQUEsbUJBQU8sQ0FBRSx5REFBRixDQUFQLEMsQ0FFQTs7O0FBQ0FBLG1CQUFPLENBQUUscURBQUYsQ0FBUCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy90cmFpbmVyL2Zvb3Rlci5qcz8wZGU4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vQWRtaW5sdGVcclxucmVxdWlyZSAoJy4vYWRtaW5sdGUuanMnKTtcclxuXHJcbi8vbXlDdXN0b21qc1xyXG5yZXF1aXJlICgnLi9jdXN0b20uanMnKTtcclxuXHJcblxyXG4iXSwibmFtZXMiOlsicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/trainer/footer.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/trainer/footer.js");
/******/ 	
/******/ })()
;