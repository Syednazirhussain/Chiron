/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/trainer/filepond/filepond-plugin-image-preview.min.js":
/*!****************************************************************************!*\
  !*** ./resources/js/trainer/filepond/filepond-plugin-image-preview.min.js ***!
  \****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*!\n * FilePondPluginImagePreview 4.6.10\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n!function (e, t) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function () {\n  \"use strict\";\n\n  function e(e) {\n    this.wrapped = e;\n  }\n\n  function t(t) {\n    var i, r;\n\n    function a(i, r) {\n      try {\n        var o = t[i](r),\n            c = o.value,\n            s = c instanceof e;\n        Promise.resolve(s ? c.wrapped : c).then(function (e) {\n          s ? a(\"next\", e) : n(o.done ? \"return\" : \"normal\", e);\n        }, function (e) {\n          a(\"throw\", e);\n        });\n      } catch (e) {\n        n(\"throw\", e);\n      }\n    }\n\n    function n(e, t) {\n      switch (e) {\n        case \"return\":\n          i.resolve({\n            value: t,\n            done: !0\n          });\n          break;\n\n        case \"throw\":\n          i.reject(t);\n          break;\n\n        default:\n          i.resolve({\n            value: t,\n            done: !1\n          });\n      }\n\n      (i = i.next) ? a(i.key, i.arg) : r = null;\n    }\n\n    this._invoke = function (e, t) {\n      return new Promise(function (n, o) {\n        var c = {\n          key: e,\n          arg: t,\n          resolve: n,\n          reject: o,\n          next: null\n        };\n        r ? r = r.next = c : (i = r = c, a(e, t));\n      });\n    }, \"function\" != typeof t[\"return\"] && (this[\"return\"] = void 0);\n  }\n\n  \"function\" == typeof Symbol && Symbol.asyncIterator && (t.prototype[Symbol.asyncIterator] = function () {\n    return this;\n  }), t.prototype.next = function (e) {\n    return this._invoke(\"next\", e);\n  }, t.prototype[\"throw\"] = function (e) {\n    return this._invoke(\"throw\", e);\n  }, t.prototype[\"return\"] = function (e) {\n    return this._invoke(\"return\", e);\n  };\n\n  function i(e, t) {\n    return r(e) || function (e, t) {\n      var i = [],\n          r = !0,\n          a = !1,\n          n = void 0;\n\n      try {\n        for (var o, c = e[Symbol.iterator](); !(r = (o = c.next()).done) && (i.push(o.value), !t || i.length !== t); r = !0) {\n          ;\n        }\n      } catch (e) {\n        a = !0, n = e;\n      } finally {\n        try {\n          r || null == c[\"return\"] || c[\"return\"]();\n        } finally {\n          if (a) throw n;\n        }\n      }\n\n      return i;\n    }(e, t) || a();\n  }\n\n  function r(e) {\n    if (Array.isArray(e)) return e;\n  }\n\n  function a() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n\n  var n = function n(e, t) {\n    return s(e.x * t, e.y * t);\n  },\n      o = function o(e, t) {\n    return s(e.x + t.x, e.y + t.y);\n  },\n      c = function c(e, t, i) {\n    var r = Math.cos(t),\n        a = Math.sin(t),\n        n = s(e.x - i.x, e.y - i.y);\n    return s(i.x + r * n.x - a * n.y, i.y + a * n.x + r * n.y);\n  },\n      s = function s() {\n    return {\n      x: arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,\n      y: arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0\n    };\n  },\n      h = function h(e, t) {\n    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1,\n        r = arguments.length > 3 ? arguments[3] : void 0;\n    return \"string\" == typeof e ? parseFloat(e) * i : \"number\" == typeof e ? e * (r ? t[r] : Math.min(t.width, t.height)) : void 0;\n  },\n      u = function u(e) {\n    return null != e;\n  },\n      l = function l(e, t) {\n    return Object.keys(t).forEach(function (i) {\n      return e.setAttribute(i, t[i]);\n    });\n  },\n      d = function d(e, t) {\n    var i = document.createElementNS(\"http://www.w3.org/2000/svg\", e);\n    return t && l(i, t), i;\n  },\n      f = {\n    contain: \"xMidYMid meet\",\n    cover: \"xMidYMid slice\"\n  },\n      p = {\n    left: \"start\",\n    center: \"middle\",\n    right: \"end\"\n  },\n      g = function g(e) {\n    return function (t) {\n      return d(e, {\n        id: t.id\n      });\n    };\n  },\n      m = {\n    image: function image(e) {\n      var t = d(\"image\", {\n        id: e.id,\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        opacity: \"0\"\n      });\n      return t.onload = function () {\n        t.setAttribute(\"opacity\", e.opacity || 1);\n      }, t.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"xlink:href\", e.src), t;\n    },\n    rect: g(\"rect\"),\n    ellipse: g(\"ellipse\"),\n    text: g(\"text\"),\n    path: g(\"path\"),\n    line: function line(e) {\n      var t = d(\"g\", {\n        id: e.id,\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n      }),\n          i = d(\"line\");\n      t.appendChild(i);\n      var r = d(\"path\");\n      t.appendChild(r);\n      var a = d(\"path\");\n      return t.appendChild(a), t;\n    }\n  },\n      y = {\n    rect: function rect(e) {\n      return l(e, Object.assign({}, e.rect, e.styles));\n    },\n    ellipse: function ellipse(e) {\n      var t = e.rect.x + .5 * e.rect.width,\n          i = e.rect.y + .5 * e.rect.height,\n          r = .5 * e.rect.width,\n          a = .5 * e.rect.height;\n      return l(e, Object.assign({\n        cx: t,\n        cy: i,\n        rx: r,\n        ry: a\n      }, e.styles));\n    },\n    image: function image(e, t) {\n      l(e, Object.assign({}, e.rect, e.styles, {\n        preserveAspectRatio: f[t.fit] || \"none\"\n      }));\n    },\n    text: function text(e, t, i, r) {\n      var a = h(t.fontSize, i, r),\n          n = t.fontFamily || \"sans-serif\",\n          o = t.fontWeight || \"normal\",\n          c = p[t.textAlign] || \"start\";\n      l(e, Object.assign({}, e.rect, e.styles, {\n        \"stroke-width\": 0,\n        \"font-weight\": o,\n        \"font-size\": a,\n        \"font-family\": n,\n        \"text-anchor\": c\n      })), e.text !== t.text && (e.text = t.text, e.textContent = t.text.length ? t.text : \" \");\n    },\n    path: function path(e, t, i, r) {\n      var a;\n      l(e, Object.assign({}, e.styles, {\n        fill: \"none\",\n        d: (a = t.points.map(function (e) {\n          return {\n            x: h(e.x, i, r, \"width\"),\n            y: h(e.y, i, r, \"height\")\n          };\n        }), a.map(function (e, t) {\n          return \"\".concat(0 === t ? \"M\" : \"L\", \" \").concat(e.x, \" \").concat(e.y);\n        }).join(\" \"))\n      }));\n    },\n    line: function line(e, t, i, r) {\n      l(e, Object.assign({}, e.rect, e.styles, {\n        fill: \"none\"\n      }));\n      var a = e.childNodes[0],\n          u = e.childNodes[1],\n          d = e.childNodes[2],\n          f = e.rect,\n          p = {\n        x: e.rect.x + e.rect.width,\n        y: e.rect.y + e.rect.height\n      };\n\n      if (l(a, {\n        x1: f.x,\n        y1: f.y,\n        x2: p.x,\n        y2: p.y\n      }), t.lineDecoration) {\n        u.style.display = \"none\", d.style.display = \"none\";\n\n        var g = function (e) {\n          var t = Math.sqrt(e.x * e.x + e.y * e.y);\n          return 0 === t ? {\n            x: 0,\n            y: 0\n          } : s(e.x / t, e.y / t);\n        }({\n          x: p.x - f.x,\n          y: p.y - f.y\n        }),\n            m = h(.05, i, r);\n\n        if (-1 !== t.lineDecoration.indexOf(\"arrow-begin\")) {\n          var y = n(g, m),\n              E = o(f, y),\n              v = c(f, 2, E),\n              w = c(f, -2, E);\n          l(u, {\n            style: \"display:block;\",\n            d: \"M\".concat(v.x, \",\").concat(v.y, \" L\").concat(f.x, \",\").concat(f.y, \" L\").concat(w.x, \",\").concat(w.y)\n          });\n        }\n\n        if (-1 !== t.lineDecoration.indexOf(\"arrow-end\")) {\n          var _ = n(g, -m),\n              I = o(p, _),\n              M = c(p, 2, I),\n              x = c(p, -2, I);\n\n          l(d, {\n            style: \"display:block;\",\n            d: \"M\".concat(M.x, \",\").concat(M.y, \" L\").concat(p.x, \",\").concat(p.y, \" L\").concat(x.x, \",\").concat(x.y)\n          });\n        }\n      }\n    }\n  },\n      E = function E(e, t, i, r, a) {\n    \"path\" !== t && (e.rect = function (e, t) {\n      var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1,\n          r = h(e.x, t, i, \"width\") || h(e.left, t, i, \"width\"),\n          a = h(e.y, t, i, \"height\") || h(e.top, t, i, \"height\"),\n          n = h(e.width, t, i, \"width\"),\n          o = h(e.height, t, i, \"height\"),\n          c = h(e.right, t, i, \"width\"),\n          s = h(e.bottom, t, i, \"height\");\n      return u(a) || (a = u(o) && u(s) ? t.height - o - s : s), u(r) || (r = u(n) && u(c) ? t.width - n - c : c), u(n) || (n = u(r) && u(c) ? t.width - r - c : 0), u(o) || (o = u(a) && u(s) ? t.height - a - s : 0), {\n        x: r || 0,\n        y: a || 0,\n        width: n || 0,\n        height: o || 0\n      };\n    }(i, r, a)), e.styles = function (e, t, i) {\n      var r = e.borderStyle || e.lineStyle || \"solid\",\n          a = e.backgroundColor || e.fontColor || \"transparent\",\n          n = e.borderColor || e.lineColor || \"transparent\",\n          o = h(e.borderWidth || e.lineWidth, t, i);\n      return {\n        \"stroke-linecap\": e.lineCap || \"round\",\n        \"stroke-linejoin\": e.lineJoin || \"round\",\n        \"stroke-width\": o || 0,\n        \"stroke-dasharray\": \"string\" == typeof r ? \"\" : r.map(function (e) {\n          return h(e, t, i);\n        }).join(\",\"),\n        stroke: n,\n        fill: a,\n        opacity: e.opacity || 1\n      };\n    }(i, r, a), y[t](e, i, r, a);\n  },\n      v = [\"x\", \"y\", \"left\", \"top\", \"right\", \"bottom\", \"width\", \"height\"],\n      w = function w(e) {\n    var t = i(e, 2),\n        r = t[0],\n        a = t[1],\n        n = a.points ? {} : v.reduce(function (e, t) {\n      var i;\n      return e[t] = \"string\" == typeof (i = a[t]) && /%/.test(i) ? parseFloat(i) / 100 : i, e;\n    }, {});\n    return [r, Object.assign({\n      zIndex: 0\n    }, a, n)];\n  },\n      _ = function _(e, t) {\n    return e[1].zIndex > t[1].zIndex ? 1 : e[1].zIndex < t[1].zIndex ? -1 : 0;\n  },\n      I = function I(e) {\n    return e.utils.createView({\n      name: \"image-preview-markup\",\n      tag: \"svg\",\n      ignoreRect: !0,\n      mixins: {\n        apis: [\"width\", \"height\", \"crop\", \"markup\", \"resize\", \"dirty\"]\n      },\n      write: function write(e) {\n        var t = e.root,\n            r = e.props;\n\n        if (r.dirty) {\n          var a = r.crop,\n              n = r.resize,\n              o = r.markup,\n              c = r.width,\n              s = r.height,\n              h = a.width,\n              u = a.height;\n\n          if (n) {\n            var l = n.size,\n                d = l && l.width,\n                f = l && l.height,\n                p = n.mode,\n                g = n.upscale;\n            d && !f && (f = d), f && !d && (d = f);\n            var y = h < d && u < f;\n\n            if (!y || y && g) {\n              var v,\n                  I = d / h,\n                  M = f / u;\n              if (\"force\" === p) h = d, u = f;else \"cover\" === p ? v = Math.max(I, M) : \"contain\" === p && (v = Math.min(I, M)), h *= v, u *= v;\n            }\n          }\n\n          var x = {\n            width: c,\n            height: s\n          };\n          t.element.setAttribute(\"width\", x.width), t.element.setAttribute(\"height\", x.height);\n          var T = Math.min(c / h, s / u);\n          t.element.innerHTML = \"\";\n          var A = t.query(\"GET_IMAGE_PREVIEW_MARKUP_FILTER\");\n          o.filter(A).map(w).sort(_).forEach(function (e) {\n            var r = i(e, 2),\n                a = r[0],\n                n = r[1],\n                o = function (e, t) {\n              return m[e](t);\n            }(a, n);\n\n            E(o, a, n, x, T), t.element.appendChild(o);\n          });\n        }\n      }\n    });\n  },\n      M = function M(e, t) {\n    return {\n      x: e,\n      y: t\n    };\n  },\n      x = function x(e, t) {\n    return M(e.x - t.x, e.y - t.y);\n  },\n      T = function T(e, t) {\n    return Math.sqrt(function (e, t) {\n      return function (e, t) {\n        return e.x * t.x + e.y * t.y;\n      }(x(e, t), x(e, t));\n    }(e, t));\n  },\n      A = function A(e, t) {\n    var i = e,\n        r = t,\n        a = 1.5707963267948966 - t,\n        n = Math.sin(1.5707963267948966),\n        o = Math.sin(r),\n        c = Math.sin(a),\n        s = Math.cos(a),\n        h = i / n;\n    return M(s * (h * o), s * (h * c));\n  },\n      R = function R(e, t, i, r) {\n    var a = r.x > .5 ? 1 - r.x : r.x,\n        n = r.y > .5 ? 1 - r.y : r.y,\n        o = 2 * a * e.width,\n        c = 2 * n * e.height,\n        s = function (e, t) {\n      var i = e.width,\n          r = e.height,\n          a = A(i, t),\n          n = A(r, t),\n          o = M(e.x + Math.abs(a.x), e.y - Math.abs(a.y)),\n          c = M(e.x + e.width + Math.abs(n.y), e.y + Math.abs(n.x)),\n          s = M(e.x - Math.abs(n.y), e.y + e.height - Math.abs(n.x));\n      return {\n        width: T(o, c),\n        height: T(o, s)\n      };\n    }(t, i);\n\n    return Math.max(s.width / o, s.height / c);\n  },\n      P = function P(e, t) {\n    var i = e.width,\n        r = i * t;\n    return r > e.height && (i = (r = e.height) / t), {\n      x: .5 * (e.width - i),\n      y: .5 * (e.height - r),\n      width: i,\n      height: r\n    };\n  },\n      C = function C(e) {\n    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n        i = t.zoom,\n        r = t.rotation,\n        a = t.center,\n        n = t.aspectRatio;\n    n || (n = e.height / e.width);\n\n    var o = function (e, t) {\n      var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1,\n          r = e.height / e.width,\n          a = t,\n          n = 1,\n          o = r;\n      o > a && (n = (o = a) / r);\n      var c = Math.max(1 / n, a / o),\n          s = e.width / (i * c * n);\n      return {\n        width: s,\n        height: s * t\n      };\n    }(e, n, i),\n        c = {\n      x: .5 * o.width,\n      y: .5 * o.height\n    },\n        s = {\n      x: 0,\n      y: 0,\n      width: o.width,\n      height: o.height,\n      center: c\n    },\n        h = void 0 === t.scaleToFit || t.scaleToFit,\n        u = i * R(e, P(s, n), r, h ? a : {\n      x: .5,\n      y: .5\n    });\n\n    return {\n      widthFloat: o.width / u,\n      heightFloat: o.height / u,\n      width: Math.round(o.width / u),\n      height: Math.round(o.height / u)\n    };\n  },\n      k = {\n    type: \"spring\",\n    stiffness: .5,\n    damping: .45,\n    mass: 10\n  },\n      D = function D(e) {\n    return e.utils.createView({\n      name: \"image-clip\",\n      tag: \"div\",\n      ignoreRect: !0,\n      mixins: {\n        apis: [\"crop\", \"markup\", \"resize\", \"width\", \"height\", \"dirty\", \"background\"],\n        styles: [\"width\", \"height\", \"opacity\"],\n        animations: {\n          opacity: {\n            type: \"tween\",\n            duration: 250\n          }\n        }\n      },\n      didWriteView: function didWriteView(e) {\n        var t = e.root,\n            i = e.props;\n        i.background && (t.element.style.backgroundColor = i.background);\n      },\n      create: function create(t) {\n        var i = t.root,\n            r = t.props;\n        i.ref.image = i.appendChildView(i.createChildView(function (e) {\n          return e.utils.createView({\n            name: \"image-canvas-wrapper\",\n            tag: \"div\",\n            ignoreRect: !0,\n            mixins: {\n              apis: [\"crop\", \"width\", \"height\"],\n              styles: [\"originX\", \"originY\", \"translateX\", \"translateY\", \"scaleX\", \"scaleY\", \"rotateZ\"],\n              animations: {\n                originX: k,\n                originY: k,\n                scaleX: k,\n                scaleY: k,\n                translateX: k,\n                translateY: k,\n                rotateZ: k\n              }\n            },\n            create: function create(t) {\n              var i = t.root,\n                  r = t.props;\n              r.width = r.image.width, r.height = r.image.height, i.ref.bitmap = i.appendChildView(i.createChildView(function (e) {\n                return e.utils.createView({\n                  name: \"image-bitmap\",\n                  ignoreRect: !0,\n                  mixins: {\n                    styles: [\"scaleX\", \"scaleY\"]\n                  },\n                  create: function create(e) {\n                    var t = e.root,\n                        i = e.props;\n                    t.appendChild(i.image);\n                  }\n                });\n              }(e), {\n                image: r.image\n              }));\n            },\n            write: function write(e) {\n              var t = e.root,\n                  i = e.props.crop.flip,\n                  r = t.ref.bitmap;\n              r.scaleX = i.horizontal ? -1 : 1, r.scaleY = i.vertical ? -1 : 1;\n            }\n          });\n        }(e), Object.assign({}, r))), i.ref.createMarkup = function () {\n          i.ref.markup || (i.ref.markup = i.appendChildView(i.createChildView(I(e), Object.assign({}, r))));\n        }, i.ref.destroyMarkup = function () {\n          i.ref.markup && (i.removeChildView(i.ref.markup), i.ref.markup = null);\n        };\n        var a = i.query(\"GET_IMAGE_PREVIEW_TRANSPARENCY_INDICATOR\");\n        null !== a && (i.element.dataset.transparencyIndicator = \"grid\" === a ? a : \"color\");\n      },\n      write: function write(e) {\n        var t = e.root,\n            i = e.props,\n            r = e.shouldOptimize,\n            a = i.crop,\n            n = i.markup,\n            o = i.resize,\n            c = i.dirty,\n            s = i.width,\n            h = i.height;\n        t.ref.image.crop = a;\n        var u = {\n          x: 0,\n          y: 0,\n          width: s,\n          height: h,\n          center: {\n            x: .5 * s,\n            y: .5 * h\n          }\n        },\n            l = {\n          width: t.ref.image.width,\n          height: t.ref.image.height\n        },\n            d = {\n          x: a.center.x * l.width,\n          y: a.center.y * l.height\n        },\n            f = {\n          x: u.center.x - l.width * a.center.x,\n          y: u.center.y - l.height * a.center.y\n        },\n            p = 2 * Math.PI + a.rotation % (2 * Math.PI),\n            g = a.aspectRatio || l.height / l.width,\n            m = void 0 === a.scaleToFit || a.scaleToFit,\n            y = R(l, P(u, g), p, m ? a.center : {\n          x: .5,\n          y: .5\n        }),\n            E = a.zoom * y;\n        n && n.length ? (t.ref.createMarkup(), t.ref.markup.width = s, t.ref.markup.height = h, t.ref.markup.resize = o, t.ref.markup.dirty = c, t.ref.markup.markup = n, t.ref.markup.crop = C(l, a)) : t.ref.markup && t.ref.destroyMarkup();\n        var v = t.ref.image;\n        if (r) return v.originX = null, v.originY = null, v.translateX = null, v.translateY = null, v.rotateZ = null, v.scaleX = null, void (v.scaleY = null);\n        v.originX = d.x, v.originY = d.y, v.translateX = f.x, v.translateY = f.y, v.rotateZ = p, v.scaleX = E, v.scaleY = E;\n      }\n    });\n  },\n      G = 0,\n      V = function V() {\n    self.onmessage = function (e) {\n      createImageBitmap(e.data.message.file).then(function (t) {\n        self.postMessage({\n          id: e.data.id,\n          message: t\n        }, [t]);\n      });\n    };\n  },\n      O = function O() {\n    self.onmessage = function (e) {\n      for (var t = e.data.message.imageData, i = e.data.message.colorMatrix, r = t.data, a = r.length, n = i[0], o = i[1], c = i[2], s = i[3], h = i[4], u = i[5], l = i[6], d = i[7], f = i[8], p = i[9], g = i[10], m = i[11], y = i[12], E = i[13], v = i[14], w = i[15], _ = i[16], I = i[17], M = i[18], x = i[19], T = 0, A = 0, R = 0, P = 0, C = 0; T < a; T += 4) {\n        A = r[T] / 255, R = r[T + 1] / 255, P = r[T + 2] / 255, C = r[T + 3] / 255, r[T] = Math.max(0, Math.min(255 * (A * n + R * o + P * c + C * s + h), 255)), r[T + 1] = Math.max(0, Math.min(255 * (A * u + R * l + P * d + C * f + p), 255)), r[T + 2] = Math.max(0, Math.min(255 * (A * g + R * m + P * y + C * E + v), 255)), r[T + 3] = Math.max(0, Math.min(255 * (A * w + R * _ + P * I + C * M + x), 255));\n      }\n\n      self.postMessage({\n        id: e.data.id,\n        message: t\n      }, [t.data.buffer]);\n    };\n  },\n      b = {\n    1: function _() {\n      return [1, 0, 0, 1, 0, 0];\n    },\n    2: function _(e) {\n      return [-1, 0, 0, 1, e, 0];\n    },\n    3: function _(e, t) {\n      return [-1, 0, 0, -1, e, t];\n    },\n    4: function _(e, t) {\n      return [1, 0, 0, -1, 0, t];\n    },\n    5: function _() {\n      return [0, 1, 1, 0, 0, 0];\n    },\n    6: function _(e, t) {\n      return [0, 1, -1, 0, t, 0];\n    },\n    7: function _(e, t) {\n      return [0, -1, -1, 0, t, e];\n    },\n    8: function _(e) {\n      return [0, -1, 1, 0, 0, e];\n    }\n  },\n      S = function S(e, t, i, r) {\n    t = Math.round(t), i = Math.round(i);\n    var a = document.createElement(\"canvas\");\n    a.width = t, a.height = i;\n    var n = a.getContext(\"2d\");\n\n    if (r >= 5 && r <= 8) {\n      var o = [i, t];\n      t = o[0], i = o[1];\n    }\n\n    return function (e, t, i, r) {\n      -1 !== r && e.transform.apply(e, b[r](t, i));\n    }(n, t, i, r), n.drawImage(e, 0, 0, t, i), a;\n  },\n      L = function L(e) {\n    return /^image/.test(e.type) && !/svg/.test(e.type);\n  },\n      N = function N(e) {\n    var t = Math.min(10 / e.width, 10 / e.height),\n        i = document.createElement(\"canvas\"),\n        r = i.getContext(\"2d\"),\n        a = i.width = Math.ceil(e.width * t),\n        n = i.height = Math.ceil(e.height * t);\n    r.drawImage(e, 0, 0, a, n);\n    var o = null;\n\n    try {\n      o = r.getImageData(0, 0, a, n).data;\n    } catch (e) {\n      return null;\n    }\n\n    for (var c = o.length, s = 0, h = 0, u = 0, l = 0; l < c; l += 4) {\n      s += o[l] * o[l], h += o[l + 1] * o[l + 1], u += o[l + 2] * o[l + 2];\n    }\n\n    return {\n      r: s = W(s, c),\n      g: h = W(h, c),\n      b: u = W(u, c)\n    };\n  },\n      W = function W(e, t) {\n    return Math.floor(Math.sqrt(e / (t / 4)));\n  },\n      z = function z(e) {\n    var t = e.utils.createView({\n      name: \"image-preview-overlay\",\n      tag: \"div\",\n      ignoreRect: !0,\n      create: function create(e) {\n        var t = e.root,\n            i = e.props,\n            r = '<svg width=\"500\" height=\"200\" viewBox=\"0 0 500 200\" preserveAspectRatio=\"none\">\\n    <defs>\\n        <radialGradient id=\"gradient-__UID__\" cx=\".5\" cy=\"1.25\" r=\"1.15\">\\n            <stop offset=\\'50%\\' stop-color=\\'#000000\\'/>\\n            <stop offset=\\'56%\\' stop-color=\\'#0a0a0a\\'/>\\n            <stop offset=\\'63%\\' stop-color=\\'#262626\\'/>\\n            <stop offset=\\'69%\\' stop-color=\\'#4f4f4f\\'/>\\n            <stop offset=\\'75%\\' stop-color=\\'#808080\\'/>\\n            <stop offset=\\'81%\\' stop-color=\\'#b1b1b1\\'/>\\n            <stop offset=\\'88%\\' stop-color=\\'#dadada\\'/>\\n            <stop offset=\\'94%\\' stop-color=\\'#f6f6f6\\'/>\\n            <stop offset=\\'100%\\' stop-color=\\'#ffffff\\'/>\\n        </radialGradient>\\n        <mask id=\"mask-__UID__\">\\n            <rect x=\"0\" y=\"0\" width=\"500\" height=\"200\" fill=\"url(#gradient-__UID__)\"></rect>\\n        </mask>\\n    </defs>\\n    <rect x=\"0\" width=\"500\" height=\"200\" fill=\"currentColor\" mask=\"url(#mask-__UID__)\"></rect>\\n</svg>';\n\n        if (document.querySelector(\"base\")) {\n          var a = window.location.href.replace(window.location.hash, \"\");\n          r = r.replace(/url\\(\\#/g, \"url(\" + a + \"#\");\n        }\n\n        G++, t.element.classList.add(\"filepond--image-preview-overlay-\".concat(i.status)), t.element.innerHTML = r.replace(/__UID__/g, G);\n      },\n      mixins: {\n        styles: [\"opacity\"],\n        animations: {\n          opacity: {\n            type: \"spring\",\n            mass: 25\n          }\n        }\n      }\n    }),\n        i = function (e) {\n      return e.utils.createView({\n        name: \"image-preview\",\n        tag: \"div\",\n        ignoreRect: !0,\n        mixins: {\n          apis: [\"image\", \"crop\", \"markup\", \"resize\", \"dirty\", \"background\"],\n          styles: [\"translateY\", \"scaleX\", \"scaleY\", \"opacity\"],\n          animations: {\n            scaleX: k,\n            scaleY: k,\n            translateY: k,\n            opacity: {\n              type: \"tween\",\n              duration: 400\n            }\n          }\n        },\n        create: function create(t) {\n          var i = t.root,\n              r = t.props;\n          i.ref.clip = i.appendChildView(i.createChildView(D(e), {\n            id: r.id,\n            image: r.image,\n            crop: r.crop,\n            markup: r.markup,\n            resize: r.resize,\n            dirty: r.dirty,\n            background: r.background\n          }));\n        },\n        write: function write(e) {\n          var t = e.root,\n              i = e.props,\n              r = e.shouldOptimize,\n              a = t.ref.clip,\n              n = i.image,\n              o = i.crop,\n              c = i.markup,\n              s = i.resize,\n              h = i.dirty;\n\n          if (a.crop = o, a.markup = c, a.resize = s, a.dirty = h, a.opacity = r ? 0 : 1, !r && !t.rect.element.hidden) {\n            var u = n.height / n.width,\n                l = o.aspectRatio || u,\n                d = t.rect.inner.width,\n                f = t.rect.inner.height,\n                p = t.query(\"GET_IMAGE_PREVIEW_HEIGHT\"),\n                g = t.query(\"GET_IMAGE_PREVIEW_MIN_HEIGHT\"),\n                m = t.query(\"GET_IMAGE_PREVIEW_MAX_HEIGHT\"),\n                y = t.query(\"GET_PANEL_ASPECT_RATIO\"),\n                E = t.query(\"GET_ALLOW_MULTIPLE\");\n            y && !E && (p = d * y, l = y);\n            var v = null !== p ? p : Math.max(g, Math.min(d * l, m)),\n                w = v / l;\n            w > d && (v = (w = d) * l), v > f && (v = f, w = f / l), a.width = w, a.height = v;\n          }\n        }\n      });\n    }(e),\n        r = e.utils.createWorker,\n        a = function a(e, t, i) {\n      return new Promise(function (a) {\n        e.ref.imageData || (e.ref.imageData = i.getContext(\"2d\").getImageData(0, 0, i.width, i.height));\n\n        var n = function (e) {\n          var t;\n\n          try {\n            t = new ImageData(e.width, e.height);\n          } catch (i) {\n            t = document.createElement(\"canvas\").getContext(\"2d\").createImageData(e.width, e.height);\n          }\n\n          return t.data.set(new Uint8ClampedArray(e.data)), t;\n        }(e.ref.imageData);\n\n        if (!t || 20 !== t.length) return i.getContext(\"2d\").putImageData(n, 0, 0), a();\n        var o = r(O);\n        o.post({\n          imageData: n,\n          colorMatrix: t\n        }, function (e) {\n          i.getContext(\"2d\").putImageData(e, 0, 0), o.terminate(), a();\n        }, [n.data.buffer]);\n      });\n    },\n        n = function n(e) {\n      var t = e.root,\n          r = e.props,\n          a = e.image,\n          n = r.id,\n          o = t.query(\"GET_ITEM\", {\n        id: n\n      });\n\n      if (o) {\n        var c,\n            s,\n            h = o.getMetadata(\"crop\") || {\n          center: {\n            x: .5,\n            y: .5\n          },\n          flip: {\n            horizontal: !1,\n            vertical: !1\n          },\n          zoom: 1,\n          rotation: 0,\n          aspectRatio: null\n        },\n            u = t.query(\"GET_IMAGE_TRANSFORM_CANVAS_BACKGROUND_COLOR\"),\n            l = !1;\n        t.query(\"GET_IMAGE_PREVIEW_MARKUP_SHOW\") && (c = o.getMetadata(\"markup\") || [], s = o.getMetadata(\"resize\"), l = !0);\n        var d = t.appendChildView(t.createChildView(i, {\n          id: n,\n          image: a,\n          crop: h,\n          resize: s,\n          markup: c,\n          dirty: l,\n          background: u,\n          opacity: 0,\n          scaleX: 1.15,\n          scaleY: 1.15,\n          translateY: 15\n        }), t.childViews.length);\n        t.ref.images.push(d), d.opacity = 1, d.scaleX = 1, d.scaleY = 1, d.translateY = 0, setTimeout(function () {\n          t.dispatch(\"DID_IMAGE_PREVIEW_SHOW\", {\n            id: n\n          });\n        }, 250);\n      }\n    },\n        o = function o(e) {\n      var t = e.root;\n      t.ref.overlayShadow.opacity = 1, t.ref.overlayError.opacity = 0, t.ref.overlaySuccess.opacity = 0;\n    },\n        c = function c(e) {\n      var t = e.root;\n      t.ref.overlayShadow.opacity = .25, t.ref.overlayError.opacity = 1;\n    };\n\n    return e.utils.createView({\n      name: \"image-preview-wrapper\",\n      create: function create(e) {\n        var i = e.root;\n        i.ref.images = [], i.ref.imageData = null, i.ref.imageViewBin = [], i.ref.overlayShadow = i.appendChildView(i.createChildView(t, {\n          opacity: 0,\n          status: \"idle\"\n        })), i.ref.overlaySuccess = i.appendChildView(i.createChildView(t, {\n          opacity: 0,\n          status: \"success\"\n        })), i.ref.overlayError = i.appendChildView(i.createChildView(t, {\n          opacity: 0,\n          status: \"failure\"\n        }));\n      },\n      styles: [\"height\"],\n      apis: [\"height\"],\n      destroy: function destroy(e) {\n        e.root.ref.images.forEach(function (e) {\n          e.image.width = 1, e.image.height = 1;\n        });\n      },\n      didWriteView: function didWriteView(e) {\n        e.root.ref.images.forEach(function (e) {\n          e.dirty = !1;\n        });\n      },\n      write: e.utils.createRoute({\n        DID_IMAGE_PREVIEW_DRAW: function DID_IMAGE_PREVIEW_DRAW(e) {\n          var t = e.root,\n              i = t.ref.images[t.ref.images.length - 1];\n          i.translateY = 0, i.scaleX = 1, i.scaleY = 1, i.opacity = 1;\n        },\n        DID_IMAGE_PREVIEW_CONTAINER_CREATE: function DID_IMAGE_PREVIEW_CONTAINER_CREATE(e) {\n          var t = e.root,\n              i = e.props.id,\n              r = t.query(\"GET_ITEM\", i);\n\n          if (r) {\n            var a,\n                n,\n                o,\n                c = URL.createObjectURL(r.file);\n            a = c, n = function n(e, r) {\n              t.dispatch(\"DID_IMAGE_PREVIEW_CALCULATE_SIZE\", {\n                id: i,\n                width: e,\n                height: r\n              });\n            }, (o = new Image()).onload = function () {\n              var e = o.naturalWidth,\n                  t = o.naturalHeight;\n              o = null, n(e, t);\n            }, o.src = a;\n          }\n        },\n        DID_FINISH_CALCULATE_PREVIEWSIZE: function DID_FINISH_CALCULATE_PREVIEWSIZE(e) {\n          var t = e.root,\n              i = e.props,\n              o = i.id,\n              c = t.query(\"GET_ITEM\", o);\n\n          if (c) {\n            var s,\n                h,\n                u = URL.createObjectURL(c.file),\n                l = function l() {\n              var e;\n              (e = u, new Promise(function (t, i) {\n                var r = new Image();\n                r.crossOrigin = \"Anonymous\", r.onload = function () {\n                  t(r);\n                }, r.onerror = function (e) {\n                  i(e);\n                }, r.src = e;\n              })).then(d);\n            },\n                d = function d(e) {\n              URL.revokeObjectURL(u);\n              var r = (c.getMetadata(\"exif\") || {}).orientation || -1,\n                  o = e.width,\n                  s = e.height;\n\n              if (o && s) {\n                if (r >= 5 && r <= 8) {\n                  var h = [s, o];\n                  o = h[0], s = h[1];\n                }\n\n                var l = Math.max(1, .75 * window.devicePixelRatio),\n                    d = t.query(\"GET_IMAGE_PREVIEW_ZOOM_FACTOR\") * l,\n                    f = s / o,\n                    p = t.rect.element.width,\n                    g = t.rect.element.height,\n                    m = p,\n                    y = m * f;\n                f > 1 ? y = (m = Math.min(o, p * d)) * f : m = (y = Math.min(s, g * d)) / f;\n\n                var E = S(e, m, y, r),\n                    v = function v() {\n                  var r = t.query(\"GET_IMAGE_PREVIEW_CALCULATE_AVERAGE_IMAGE_COLOR\") ? N(data) : null;\n                  c.setMetadata(\"color\", r, !0), \"close\" in e && e.close(), t.ref.overlayShadow.opacity = 1, n({\n                    root: t,\n                    props: i,\n                    image: E\n                  });\n                },\n                    w = c.getMetadata(\"filter\");\n\n                w ? a(t, w, E).then(v) : v();\n              }\n            };\n\n            if (s = c.file, !(((h = window.navigator.userAgent.match(/Firefox\\/([0-9]+)\\./)) ? parseInt(h[1]) : null) <= 58) && \"createImageBitmap\" in window && L(s)) {\n              var f = r(V);\n              f.post({\n                file: c.file\n              }, function (e) {\n                f.terminate(), e ? d(e) : l();\n              });\n            } else l();\n          }\n        },\n        DID_UPDATE_ITEM_METADATA: function DID_UPDATE_ITEM_METADATA(e) {\n          var t = e.root,\n              i = e.props,\n              r = e.action;\n\n          if (/crop|filter|markup|resize/.test(r.change.key) && t.ref.images.length) {\n            var o = t.query(\"GET_ITEM\", {\n              id: i.id\n            });\n            if (o) if (/filter/.test(r.change.key)) {\n              var c = t.ref.images[t.ref.images.length - 1];\n              a(t, r.change.value, c.image);\n            } else {\n              if (/crop|markup|resize/.test(r.change.key)) {\n                var s = o.getMetadata(\"crop\"),\n                    h = t.ref.images[t.ref.images.length - 1];\n\n                if (s && s.aspectRatio && h.crop && h.crop.aspectRatio && Math.abs(s.aspectRatio - h.crop.aspectRatio) > 1e-5) {\n                  var u = function (e) {\n                    var t = e.root,\n                        i = t.ref.images.shift();\n                    return i.opacity = 0, i.translateY = -15, t.ref.imageViewBin.push(i), i;\n                  }({\n                    root: t\n                  });\n\n                  n({\n                    root: t,\n                    props: i,\n                    image: (l = u.image, (d = d || document.createElement(\"canvas\")).width = l.width, d.height = l.height, d.getContext(\"2d\").drawImage(l, 0, 0), d)\n                  });\n                } else !function (e) {\n                  var t = e.root,\n                      i = e.props,\n                      r = t.query(\"GET_ITEM\", {\n                    id: i.id\n                  });\n\n                  if (r) {\n                    var a = t.ref.images[t.ref.images.length - 1];\n                    a.crop = r.getMetadata(\"crop\"), a.background = t.query(\"GET_IMAGE_TRANSFORM_CANVAS_BACKGROUND_COLOR\"), t.query(\"GET_IMAGE_PREVIEW_MARKUP_SHOW\") && (a.dirty = !0, a.resize = r.getMetadata(\"resize\"), a.markup = r.getMetadata(\"markup\"));\n                  }\n                }({\n                  root: t,\n                  props: i\n                });\n              }\n\n              var l, d;\n            }\n          }\n        },\n        DID_THROW_ITEM_LOAD_ERROR: c,\n        DID_THROW_ITEM_PROCESSING_ERROR: c,\n        DID_THROW_ITEM_INVALID: c,\n        DID_COMPLETE_ITEM_PROCESSING: function DID_COMPLETE_ITEM_PROCESSING(e) {\n          var t = e.root;\n          t.ref.overlayShadow.opacity = .25, t.ref.overlaySuccess.opacity = 1;\n        },\n        DID_START_ITEM_PROCESSING: o,\n        DID_REVERT_ITEM_PROCESSING: o\n      }, function (e) {\n        var t = e.root,\n            i = t.ref.imageViewBin.filter(function (e) {\n          return 0 === e.opacity;\n        });\n        t.ref.imageViewBin = t.ref.imageViewBin.filter(function (e) {\n          return e.opacity > 0;\n        }), i.forEach(function (e) {\n          return function (e, t) {\n            e.removeChildView(t), t.image.width = 1, t.image.height = 1, t._destroy();\n          }(t, e);\n        }), i.length = 0;\n      })\n    });\n  },\n      H = function H(e) {\n    var t = e.addFilter,\n        i = e.utils,\n        r = i.Type,\n        a = i.createRoute,\n        n = i.isFile,\n        o = z(e);\n    return t(\"CREATE_VIEW\", function (e) {\n      var t = e.is,\n          i = e.view,\n          r = e.query;\n\n      if (t(\"file\") && r(\"GET_ALLOW_IMAGE_PREVIEW\")) {\n        var c = function c(e) {\n          e.root.ref.shouldRescale = !0;\n        };\n\n        i.registerWriter(a({\n          DID_RESIZE_ROOT: c,\n          DID_STOP_RESIZE: c,\n          DID_LOAD_ITEM: function DID_LOAD_ITEM(e) {\n            var t = e.root,\n                a = e.props.id,\n                c = r(\"GET_ITEM\", a);\n\n            if (c && n(c.file) && !c.archived) {\n              var s = c.file;\n\n              if (function (e) {\n                return /^image/.test(e.type);\n              }(s) && r(\"GET_IMAGE_PREVIEW_FILTER_ITEM\")(c)) {\n                var h = (\"createImageBitmap\" in (window || {})),\n                    u = r(\"GET_IMAGE_PREVIEW_MAX_FILE_SIZE\");\n\n                if (!(!h && u && s.size > u)) {\n                  t.ref.imagePreview = i.appendChildView(i.createChildView(o, {\n                    id: a\n                  }));\n                  var l = t.query(\"GET_IMAGE_PREVIEW_HEIGHT\");\n                  l && t.dispatch(\"DID_UPDATE_PANEL_HEIGHT\", {\n                    id: c.id,\n                    height: l\n                  });\n                  var d = !h && s.size > r(\"GET_IMAGE_PREVIEW_MAX_INSTANT_PREVIEW_FILE_SIZE\");\n                  t.dispatch(\"DID_IMAGE_PREVIEW_CONTAINER_CREATE\", {\n                    id: a\n                  }, d);\n                }\n              }\n            }\n          },\n          DID_IMAGE_PREVIEW_CALCULATE_SIZE: function DID_IMAGE_PREVIEW_CALCULATE_SIZE(e) {\n            var t = e.root,\n                i = e.action;\n            t.ref.imageWidth = i.width, t.ref.imageHeight = i.height, t.ref.shouldRescale = !0, t.ref.shouldDrawPreview = !0, t.dispatch(\"KICK\");\n          },\n          DID_UPDATE_ITEM_METADATA: function DID_UPDATE_ITEM_METADATA(e) {\n            var t = e.root;\n            \"crop\" === e.action.change.key && (t.ref.shouldRescale = !0);\n          }\n        }, function (e) {\n          var t = e.root,\n              i = e.props;\n          t.ref.imagePreview && (t.rect.element.hidden || (t.ref.shouldRescale && (!function (e, t) {\n            if (e.ref.imagePreview) {\n              var i = t.id,\n                  r = e.query(\"GET_ITEM\", {\n                id: i\n              });\n\n              if (r) {\n                var a = e.query(\"GET_PANEL_ASPECT_RATIO\"),\n                    n = e.query(\"GET_ITEM_PANEL_ASPECT_RATIO\"),\n                    o = e.query(\"GET_IMAGE_PREVIEW_HEIGHT\");\n\n                if (!(a || n || o)) {\n                  var c = e.ref,\n                      s = c.imageWidth,\n                      h = c.imageHeight;\n\n                  if (s && h) {\n                    var u = e.query(\"GET_IMAGE_PREVIEW_MIN_HEIGHT\"),\n                        l = e.query(\"GET_IMAGE_PREVIEW_MAX_HEIGHT\"),\n                        d = (r.getMetadata(\"exif\") || {}).orientation || -1;\n\n                    if (d >= 5 && d <= 8) {\n                      var f = [h, s];\n                      s = f[0], h = f[1];\n                    }\n\n                    if (!L(r.file) || e.query(\"GET_IMAGE_PREVIEW_UPSCALE\")) {\n                      var p = 2048 / s;\n                      s *= p, h *= p;\n                    }\n\n                    var g = h / s,\n                        m = (r.getMetadata(\"crop\") || {}).aspectRatio || g,\n                        y = Math.max(u, Math.min(h, l)),\n                        E = e.rect.element.width,\n                        v = Math.min(E * m, y);\n                    e.dispatch(\"DID_UPDATE_PANEL_HEIGHT\", {\n                      id: r.id,\n                      height: v\n                    });\n                  }\n                }\n              }\n            }\n          }(t, i), t.ref.shouldRescale = !1), t.ref.shouldDrawPreview && (requestAnimationFrame(function () {\n            requestAnimationFrame(function () {\n              t.dispatch(\"DID_FINISH_CALCULATE_PREVIEWSIZE\", {\n                id: i.id\n              });\n            });\n          }), t.ref.shouldDrawPreview = !1)));\n        }));\n      }\n    }), {\n      options: {\n        allowImagePreview: [!0, r.BOOLEAN],\n        imagePreviewFilterItem: [function () {\n          return !0;\n        }, r.FUNCTION],\n        imagePreviewHeight: [null, r.INT],\n        imagePreviewMinHeight: [44, r.INT],\n        imagePreviewMaxHeight: [256, r.INT],\n        imagePreviewMaxFileSize: [null, r.INT],\n        imagePreviewZoomFactor: [2, r.INT],\n        imagePreviewUpscale: [!1, r.BOOLEAN],\n        imagePreviewMaxInstantPreviewFileSize: [1e6, r.INT],\n        imagePreviewTransparencyIndicator: [null, r.STRING],\n        imagePreviewCalculateAverageImageColor: [!1, r.BOOLEAN],\n        imagePreviewMarkupShow: [!0, r.BOOLEAN],\n        imagePreviewMarkupFilter: [function () {\n          return !0;\n        }, r.FUNCTION]\n      }\n    };\n  };\n\n  return \"undefined\" != typeof window && void 0 !== window.document && document.dispatchEvent(new CustomEvent(\"FilePond:pluginloaded\", {\n    detail: H\n  })), H;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/trainer/filepond/filepond-plugin-image-preview.min.js\n");

/***/ }),

/***/ "./resources/js/trainer/filepond/filepond.jquery.js":
/*!**********************************************************!*\
  !*** ./resources/js/trainer/filepond/filepond.jquery.js ***!
  \**********************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n(function ($, FilePond) {\n  'use strict'; // No jQuery No Go\n\n  if (!$ || !FilePond) {\n    return;\n  } // Test if FilePond is supported\n\n\n  if (!FilePond.supported()) {\n    // add stub\n    $.fn.filepond = function () {};\n\n    return;\n  } // Helpers\n\n\n  function argsToArray(args) {\n    return Array.prototype.slice.call(args);\n  }\n\n  function isFactory(args) {\n    return !args.length || _typeof(args[0]) === 'object';\n  }\n\n  function isGetter(obj, key) {\n    var descriptor = Object.getOwnPropertyDescriptor(obj, key);\n    return descriptor ? typeof descriptor.get !== 'undefined' : false;\n  }\n\n  function isSetter(obj, key) {\n    var descriptor = Object.getOwnPropertyDescriptor(obj, key);\n    return descriptor ? typeof descriptor.set !== 'undefined' : false;\n  }\n\n  function isMethod(obj, key) {\n    return typeof obj[key] === 'function';\n  } // Setup plugin\n\n\n  $.fn.filepond = function () {\n    // get arguments as array\n    var args = argsToArray(arguments); // method results array\n\n    var results = []; // Execute for every item in the list\n\n    var items = this.each(function () {\n      // test if is create call\n      if (isFactory(args)) {\n        FilePond.create(this, args[0]);\n        return;\n      } // get a reference to the pond instance based on the element\n\n\n      var pond = FilePond.find(this); // if no pond found, exit here\n\n      if (!pond) {\n        return;\n      } // get property name or method name\n\n\n      var key = args[0]; // get params to pass\n\n      var params = args.concat().slice(1); // run method\n\n      if (isMethod(pond, key)) {\n        results.push(pond[key].apply(pond, params));\n        return;\n      } // set setter\n\n\n      if (isSetter(pond, key) && params.length) {\n        pond[key] = params[0];\n        return;\n      } // get getter\n\n\n      if (isGetter(pond, key)) {\n        results.push(pond[key]);\n        return;\n      }\n\n      console.warn('$().filepond(\"' + key + '\") is an unknown property or method.');\n    }); // returns a jQuery object if no results returned\n\n    return results.length ? this.length === 1 ? results[0] : results : items;\n  }; // Static API\n\n\n  Object.keys(FilePond).forEach(function (key) {\n    $.fn.filepond[key] = FilePond[key];\n  }); // Redirect setDefaults to setOptions\n\n  $.fn.filepond.setDefaults = FilePond.setOptions;\n})(jQuery, FilePond);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvdHJhaW5lci9maWxlcG9uZC9maWxlcG9uZC5qcXVlcnkuanM/ZjZmMyJdLCJuYW1lcyI6WyIkIiwiRmlsZVBvbmQiLCJzdXBwb3J0ZWQiLCJmbiIsImZpbGVwb25kIiwiYXJnc1RvQXJyYXkiLCJhcmdzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJpc0ZhY3RvcnkiLCJsZW5ndGgiLCJpc0dldHRlciIsIm9iaiIsImtleSIsImRlc2NyaXB0b3IiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXQiLCJpc1NldHRlciIsInNldCIsImlzTWV0aG9kIiwiYXJndW1lbnRzIiwicmVzdWx0cyIsIml0ZW1zIiwiZWFjaCIsImNyZWF0ZSIsInBvbmQiLCJmaW5kIiwicGFyYW1zIiwiY29uY2F0IiwicHVzaCIsImFwcGx5IiwiY29uc29sZSIsIndhcm4iLCJrZXlzIiwiZm9yRWFjaCIsInNldERlZmF1bHRzIiwic2V0T3B0aW9ucyIsImpRdWVyeSJdLCJtYXBwaW5ncyI6Ijs7QUFBQyxXQUFTQSxDQUFULEVBQVlDLFFBQVosRUFBcUI7QUFDbEIsZUFEa0IsQ0FHbEI7O0FBQ0EsTUFBSSxDQUFDRCxDQUFELElBQU0sQ0FBQ0MsUUFBWCxFQUFxQjtBQUNqQjtBQUNILEdBTmlCLENBUWxCOzs7QUFDQSxNQUFJLENBQUNBLFFBQVEsQ0FBQ0MsU0FBVCxFQUFMLEVBQTJCO0FBQ3ZCO0FBQ0FGLElBQUFBLENBQUMsQ0FBQ0csRUFBRixDQUFLQyxRQUFMLEdBQWdCLFlBQVcsQ0FBRSxDQUE3Qjs7QUFDQTtBQUNILEdBYmlCLENBZWxCOzs7QUFDQSxXQUFTQyxXQUFULENBQXFCQyxJQUFyQixFQUEyQjtBQUN2QixXQUFPQyxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQkosSUFBM0IsQ0FBUDtBQUNIOztBQUVELFdBQVNLLFNBQVQsQ0FBbUJMLElB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QW9CWSxPQUFPLENBQUMsQ0FBRCxDQUEzQixHQUFpQ0EsT0FBbEQsR0FBNERDLEtBQW5FO0FBQ0gsR0F0REQsQ0F2Q2tCLENBK0ZsQjs7O0FBQ0FSLEVBQUFBLE1BQU0sQ0FBQ21CLElBQVAsQ0FBWW5DLFFBQVosRUFBc0JvQyxPQUF0QixDQUE4QixVQUFTdEIsR0FBVCxFQUFjO0FBQ3hDZixJQUFBQSxDQUFDLENBQUNHLEVBQUYsQ0FBS0MsUUFBTCxDQUFjVyxHQUFkLElBQXFCZCxRQUFRLENBQUNjLEdBQUQsQ0FBN0I7QUFDSCxHQUZELEVBaEdrQixDQW9HbEI7O0FBQ0FmLEVBQUFBLENBQUMsQ0FBQ0csRUFBRixDQUFLQyxRQUFMLENBQWNrQyxXQUFkLEdBQTRCckMsUUFBUSxDQUFDc0MsVUFBckM7QUFFSCxDQXZHQSxFQXVHQ0MsTUF2R0QsRUF1R1N2QyxRQXZHVCxDQUFEIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCQsIEZpbGVQb25kKXtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvLyBObyBqUXVlcnkgTm8gR29cbiAgICBpZiAoISQgfHwgIUZpbGVQb25kKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgLy8gVGVzdCBpZiBGaWxlUG9uZCBpcyBzdXBwb3J0ZWRcbiAgICBpZiAoIUZpbGVQb25kLnN1cHBvcnRlZCgpKSB7XG4gICAgICAgIC8vIGFkZCBzdHViXG4gICAgICAgICQuZm4uZmlsZXBvbmQgPSBmdW5jdGlvbigpIHt9O1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSGVscGVyc1xuICAgIGZ1bmN0aW9uIGFyZ3NUb0FycmF5KGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRmFjdG9yeShhcmdzKSB7XG4gICAgICAgIHJldHVybiAhYXJncy5sZW5ndGggfHwgdHlwZW9mIGFyZ3NbMF0gPT09ICdvYmplY3QnO1xuICAgIH1cblxuXHRmdW5jdGlvbiBpc0dldHRlcihvYmosIGtleSkge1xuXHRcdHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG5cdFx0cmV0dXJuIGRlc2NyaXB0b3IgPyB0eXBlb2YgZGVzY3JpcHRvci5nZXQgIT09ICd1bmRlZmluZWQnIDogZmFsc2U7XG5cdH1cblxuXHRmdW5jdGlvbiBpc1NldHRlcihvYmosIGtleSkge1xuXHRcdHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG5cdFx0cmV0dXJuIGRlc2NyaXB0b3IgPyB0eXBlb2YgZGVzY3JpcHRvci5zZXQgIT09ICd1bmRlZmluZWQnIDogZmFsc2U7XG5cdH1cblxuXHRmdW5jdGlvbiBpc01ldGhvZChvYmosIGtleSkge1xuXHRcdHJldHVybiB0eXBlb2Ygb2JqW2tleV0gPT09ICdmdW5jdGlvbic7XG5cdH1cblxuICAgIC8vIFNldHVwIHBsdWdpblxuICAgICQuZm4uZmlsZXBvbmQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAvLyBnZXQgYXJndW1lbnRzIGFzIGFycmF5XG4gICAgICAgIHZhciBhcmdzID0gYXJnc1RvQXJyYXkoYXJndW1lbnRzKTtcblxuICAgICAgICAvLyBtZXRob2QgcmVzdWx0cyBhcnJheVxuICAgICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuXG4gICAgICAgIC8vIEV4ZWN1dGUgZm9yIGV2ZXJ5IGl0ZW0gaW4gdGhlIGxpc3RcbiAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAvLyB0ZXN0IGlmIGlzIGNyZWF0ZSBjYWxsXG4gICAgICAgICAgICBpZiAoaXNGYWN0b3J5KGFyZ3MpKSB7XG4gICAgICAgICAgICAgICAgRmlsZVBvbmQuY3JlYXRlKHRoaXMsIGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBnZXQgYSByZWZlcmVuY2UgdG8gdGhlIHBvbmQgaW5zdGFuY2UgYmFzZWQgb24gdGhlIGVsZW1lbnRcbiAgICAgICAgICAgIHZhciBwb25kID0gRmlsZVBvbmQuZmluZCh0aGlzKTtcblxuICAgICAgICAgICAgLy8gaWYgbm8gcG9uZCBmb3VuZCwgZXhpdCBoZXJlXG4gICAgICAgICAgICBpZiAoIXBvbmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGdldCBwcm9wZXJ0eSBuYW1lIG9yIG1ldGhvZCBuYW1lXG4gICAgICAgICAgICB2YXIga2V5ID0gYXJnc1swXTtcblxuICAgICAgICAgICAgLy8gZ2V0IHBhcmFtcyB0byBwYXNzXG4gICAgICAgICAgICB2YXIgcGFyYW1zID0gYXJncy5jb25jYXQoKS5zbGljZSgxKTtcblxuICAgICAgICAgICAgLy8gcnVuIG1ldGhvZFxuICAgICAgICAgICAgaWYgKGlzTWV0aG9kKHBvbmQsIGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gocG9uZFtrZXldLmFwcGx5KHBvbmQsIHBhcmFtcykpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gc2V0IHNldHRlclxuICAgICAgICAgICAgaWYgKGlzU2V0dGVyKHBvbmQsIGtleSkgJiYgcGFyYW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHBvbmRba2V5XSA9IHBhcmFtc1swXTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGdldCBnZXR0ZXJcbiAgICAgICAgICAgIGlmIChpc0dldHRlcihwb25kLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHBvbmRba2V5XSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJyQoKS5maWxlcG9uZChcIicgKyBrZXkgKyAnXCIpIGlzIGFuIHVua25vd24gcHJvcGVydHkgb3IgbWV0aG9kLicpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyByZXR1cm5zIGEgalF1ZXJ5IG9iamVjdCBpZiBubyByZXN1bHRzIHJldHVybmVkXG4gICAgICAgIHJldHVybiByZXN1bHRzLmxlbmd0aCA/IHRoaXMubGVuZ3RoID09PSAxID8gcmVzdWx0c1swXSA6IHJlc3VsdHMgOiBpdGVtcztcbiAgICB9O1xuXG4gICAgLy8gU3RhdGljIEFQSVxuICAgIE9iamVjdC5rZXlzKEZpbGVQb25kKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAkLmZuLmZpbGVwb25kW2tleV0gPSBGaWxlUG9uZFtrZXldO1xuICAgIH0pO1xuXG4gICAgLy8gUmVkaXJlY3Qgc2V0RGVmYXVsdHMgdG8gc2V0T3B0aW9uc1xuICAgICQuZm4uZmlsZXBvbmQuc2V0RGVmYXVsdHMgPSBGaWxlUG9uZC5zZXRPcHRpb25zO1xuXG59KGpRdWVyeSwgRmlsZVBvbmQpKTsiXSwiZmlsZSI6Ii4vcmVzb3VyY2VzL2pzL3RyYWluZXIvZmlsZXBvbmQvZmlsZXBvbmQuanF1ZXJ5LmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/trainer/filepond/filepond.jquery.js\n");

/***/ }),

/***/ "./resources/js/trainer/filepond/filepond.min.js":
/*!*******************************************************!*\
  !*** ./resources/js/trainer/filepond/filepond.min.js ***!
  \*******************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*!\n * FilePond 4.30.3\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n!function (e, t) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? t(exports) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function (e) {\n  \"use strict\";\n\n  var t = function t(e, _t2) {\n    for (var n in e) {\n      e.hasOwnProperty(n) && _t2(n, e[n]);\n    }\n  },\n      n = function n(e) {\n    var n = {};\n    return t(e, function (t) {\n      !function (e, t, n) {\n        \"function\" != typeof n ? Object.defineProperty(e, t, Object.assign({}, n)) : e[t] = n;\n      }(n, t, e[t]);\n    }), n;\n  },\n      r = function r(e, t) {\n    var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;\n    if (null === n) return e.getAttribute(t) || e.hasAttribute(t);\n    e.setAttribute(t, n);\n  },\n      o = [\"svg\", \"path\"],\n      i = function i(e) {\n    return o.includes(e);\n  },\n      a = function a(e, n) {\n    var o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n    \"object\" == _typeof(n) && (o = n, n = null);\n    var a = i(e) ? document.createElementNS(\"http://www.w3.org/2000/svg\", e) : document.createElement(e);\n    return n && (i(e) ? r(a, \"class\", n) : a.className = n), t(o, function (e, t) {\n      r(a, e, t);\n    }), a;\n  },\n      s = function s(e, t) {\n    return function (e, n) {\n      return void 0 !== n ? t.splice(n, 0, e) : t.push(e), e;\n    };\n  },\n      u = function u(e, t) {\n    return function (n) {\n      return t.splice(t.indexOf(n), 1), n.element.parentNode && e.removeChild(n.element), n;\n    };\n  },\n      l = \"undefined\" != typeof window && void 0 !== window.document,\n      c = function c() {\n    return l;\n  },\n      f = \"children\" in (c() ? a(\"svg\") : {}) ? function (e) {\n    return e.children.length;\n  } : function (e) {\n    return e.childNodes.length;\n  },\n      d = function d(e, t, n, r) {\n    var o = n[0] || e.left,\n        i = n[1] || e.top,\n        a = o + e.width,\n        s = i + e.height * (r[1] || 1),\n        u = {\n      element: Object.assign({}, e),\n      inner: {\n        left: e.left,\n        top: e.top,\n        right: e.right,\n        bottom: e.bottom\n      },\n      outer: {\n        left: o,\n        top: i,\n        right: a,\n        bottom: s\n      }\n    };\n    return t.filter(function (e) {\n      return !e.isRectIgnored();\n    }).map(function (e) {\n      return e.rect;\n    }).forEach(function (e) {\n      p(u.inner, Object.assign({}, e.inner)), p(u.outer, Object.assign({}, e.outer));\n    }), E(u.inner), u.outer.bottom += u.element.marginBottom, u.outer.right += u.element.marginRight, E(u.outer), u;\n  },\n      p = function p(e, t) {\n    t.top += e.top, t.right += e.left, t.bottom += e.top, t.left += e.left, t.bottom > e.bottom && (e.bottom = t.bottom), t.right > e.right && (e.right = t.right);\n  },\n      E = function E(e) {\n    e.width = e.right - e.left, e.height = e.bottom - e.top;\n  },\n      _ = function _(e) {\n    return \"number\" == typeof e;\n  },\n      T = function T(e) {\n    return e < .5 ? 2 * e * e : (4 - 2 * e) * e - 1;\n  },\n      I = {\n    spring: function spring() {\n      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n          t = e.stiffness,\n          r = void 0 === t ? .5 : t,\n          o = e.damping,\n          i = void 0 === o ? .75 : o,\n          a = e.mass,\n          s = void 0 === a ? 10 : a,\n          u = null,\n          l = null,\n          c = 0,\n          f = !1,\n          d = n({\n        interpolate: function interpolate(e, t) {\n          if (!f) {\n            if (!_(u) || !_(l)) return f = !0, void (c = 0);\n            (function (e, t, n) {\n              var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : .001;\n              return Math.abs(e - t) < r && Math.abs(n) < r;\n            })(l += c += -(l - u) * r / s, u, c *= i) || t ? (l = u, c = 0, f = !0, d.onupdate(l), d.oncomplete(l)) : d.onupdate(l);\n          }\n        },\n        target: {\n          set: function set(e) {\n            if (_(e) && !_(l) && (l = e), null === u && (u = e, l = e), l === (u = e) || void 0 === u) return f = !0, c = 0, d.onupdate(l), void d.oncomplete(l);\n            f = !1;\n          },\n          get: function get() {\n            return u;\n          }\n        },\n        resting: {\n          get: function get() {\n            return f;\n          }\n        },\n        onupdate: function onupdate(e) {},\n        oncomplete: function oncomplete(e) {}\n      });\n      return d;\n    },\n    tween: function tween() {\n      var e,\n          t,\n          r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n          o = r.duration,\n          i = void 0 === o ? 500 : o,\n          a = r.easing,\n          s = void 0 === a ? T : a,\n          u = r.delay,\n          l = void 0 === u ? 0 : u,\n          c = null,\n          f = !0,\n          d = !1,\n          p = null,\n          E = n({\n        interpolate: function interpolate(n, r) {\n          f || null === p || (null === c && (c = n), n - c < l || ((e = n - c - l) >= i || r ? (e = 1, t = d ? 0 : 1, E.onupdate(t * p), E.oncomplete(t * p), f = !0) : (t = e / i, E.onupdate((e >= 0 ? s(d ? 1 - t : t) : 0) * p))));\n        },\n        target: {\n          get: function get() {\n            return d ? 0 : p;\n          },\n          set: function set(e) {\n            if (null === p) return p = e, E.onupdate(e), void E.oncomplete(e);\n            e < p ? (p = 1, d = !0) : (d = !1, p = e), f = !1, c = null;\n          }\n        },\n        resting: {\n          get: function get() {\n            return f;\n          }\n        },\n        onupdate: function onupdate(e) {},\n        oncomplete: function oncomplete(e) {}\n      });\n      return E;\n    }\n  },\n      v = function v(e, t, n) {\n    var r = e[t] && \"object\" == _typeof(e[t][n]) ? e[t][n] : e[t] || e,\n        o = \"string\" == typeof r ? r : r.type,\n        i = \"object\" == _typeof(r) ? Object.assign({}, r) : {};\n    return I[o] ? I[o](i) : null;\n  },\n      m = function m(e, t, n) {\n    var r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];\n    (t = Array.isArray(t) ? t : [t]).forEach(function (t) {\n      e.forEach(function (e) {\n        var o = e,\n            i = function i() {\n          return n[e];\n        },\n            a = function a(t) {\n          return n[e] = t;\n        };\n\n        \"object\" == _typeof(e) && (o = e.key, i = e.getter || i, a = e.setter || a), t[o] && !r || (t[o] = {\n          get: i,\n          set: a\n        });\n      });\n    });\n  },\n      h = function h(e) {\n    return null != e;\n  },\n      g = {\n    opacity: 1,\n    scaleX: 1,\n    scaleY: 1,\n    translateX: 0,\n    translateY: 0,\n    rotateX: 0,\n    rotateY: 0,\n    rotateZ: 0,\n    originX: 0,\n    originY: 0\n  },\n      R = function R(e, t) {\n    if (Object.keys(e).length !== Object.keys(t).length) return !0;\n\n    for (var n in t) {\n      if (t[n] !== e[n]) return !0;\n    }\n\n    return !1;\n  },\n      O = function O(e, t) {\n    var n = t.opacity,\n        r = t.perspective,\n        o = t.translateX,\n        i = t.translateY,\n        a = t.scaleX,\n        s = t.scaleY,\n        u = t.rotateX,\n        l = t.rotateY,\n        c = t.rotateZ,\n        f = t.originX,\n        d = t.originY,\n        p = t.width,\n        E = t.height,\n        _ = \"\",\n        T = \"\";\n    (h(f) || h(d)) && (T += \"transform-origin: \" + (f || 0) + \"px \" + (d || 0) + \"px;\"), h(r) && (_ += \"perspective(\" + r + \"px) \"), (h(o) || h(i)) && (_ += \"translate3d(\" + (o || 0) + \"px, \" + (i || 0) + \"px, 0) \"), (h(a) || h(s)) && (_ += \"scale3d(\" + (h(a) ? a : 1) + \", \" + (h(s) ? s : 1) + \", 1) \"), h(c) && (_ += \"rotateZ(\" + c + \"rad) \"), h(u) && (_ += \"rotateX(\" + u + \"rad) \"), h(l) && (_ += \"rotateY(\" + l + \"rad) \"), _.length && (T += \"transform:\" + _ + \";\"), h(n) && (T += \"opacity:\" + n + \";\", 0 === n && (T += \"visibility:hidden;\"), n < 1 && (T += \"pointer-events:none;\")), h(E) && (T += \"height:\" + E + \"px;\"), h(p) && (T += \"width:\" + p + \"px;\");\n    var I = e.elementCurrentStyle || \"\";\n    T.length === I.length && T === I || (e.style.cssText = T, e.elementCurrentStyle = T);\n  },\n      y = {\n    styles: function styles(e) {\n      var t = e.mixinConfig,\n          n = e.viewProps,\n          r = e.viewInternalAPI,\n          o = e.viewExternalAPI,\n          i = e.view,\n          a = Object.assign({}, n),\n          s = {};\n      m(t, [r, o], n);\n\n      var u = function u() {\n        return i.rect ? d(i.rect, i.childViews, [n.translateX || 0, n.translateY || 0], [n.scaleX || 0, n.scaleY || 0]) : null;\n      };\n\n      return r.rect = {\n        get: u\n      }, o.rect = {\n        get: u\n      }, t.forEach(function (e) {\n        n[e] = void 0 === a[e] ? g[e] : a[e];\n      }), {\n        write: function write() {\n          if (R(s, n)) return O(i.element, n), Object.assign(s, Object.assign({}, n)), !0;\n        },\n        destroy: function destroy() {}\n      };\n    },\n    listeners: function listeners(e) {\n      e.mixinConfig, e.viewProps, e.viewInternalAPI;\n\n      var t,\n          n = e.viewExternalAPI,\n          r = (e.viewState, e.view),\n          o = [],\n          i = (t = r.element, function (e, n) {\n        t.addEventListener(e, n);\n      }),\n          a = function (e) {\n        return function (t, n) {\n          e.removeEventListener(t, n);\n        };\n      }(r.element);\n\n      return n.on = function (e, t) {\n        o.push({\n          type: e,\n          fn: t\n        }), i(e, t);\n      }, n.off = function (e, t) {\n        o.splice(o.findIndex(function (n) {\n          return n.type === e && n.fn === t;\n        }), 1), a(e, t);\n      }, {\n        write: function write() {\n          return !0;\n        },\n        destroy: function destroy() {\n          o.forEach(function (e) {\n            a(e.type, e.fn);\n          });\n        }\n      };\n    },\n    animations: function animations(e) {\n      var n = e.mixinConfig,\n          r = e.viewProps,\n          o = e.viewInternalAPI,\n          i = e.viewExternalAPI,\n          a = Object.assign({}, r),\n          s = [];\n      return t(n, function (e, t) {\n        var n = v(t);\n        n && (n.onupdate = function (t) {\n          r[e] = t;\n        }, n.target = a[e], m([{\n          key: e,\n          setter: function setter(e) {\n            n.target !== e && (n.target = e);\n          },\n          getter: function getter() {\n            return r[e];\n          }\n        }], [o, i], r, !0), s.push(n));\n      }), {\n        write: function write(e) {\n          var t = document.hidden,\n              n = !0;\n          return s.forEach(function (r) {\n            r.resting || (n = !1), r.interpolate(e, t);\n          }), n;\n        },\n        destroy: function destroy() {}\n      };\n    },\n    apis: function apis(e) {\n      var t = e.mixinConfig,\n          n = e.viewProps,\n          r = e.viewExternalAPI;\n      m(t, r, n);\n    }\n  },\n      D = function D() {\n    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n        t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n        n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n    return t.layoutCalculated || (e.paddingTop = parseInt(n.paddingTop, 10) || 0, e.marginTop = parseInt(n.marginTop, 10) || 0, e.marginRight = parseInt(n.marginRight, 10) || 0, e.marginBottom = parseInt(n.marginBottom, 10) || 0, e.marginLeft = parseInt(n.marginLeft, 10) || 0, t.layoutCalculated = !0), e.left = t.offsetLeft || 0, e.top = t.offsetTop || 0, e.width = t.offsetWidth || 0, e.height = t.offsetHeight || 0, e.right = e.left + e.width, e.bottom = e.top + e.height, e.scrollTop = t.scrollTop, e.hidden = null === t.offsetParent, e;\n  },\n      S = function S() {\n    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n        t = e.tag,\n        r = void 0 === t ? \"div\" : t,\n        o = e.name,\n        i = void 0 === o ? null : o,\n        l = e.attributes,\n        c = void 0 === l ? {} : l,\n        p = e.read,\n        E = void 0 === p ? function () {} : p,\n        _ = e.write,\n        T = void 0 === _ ? function () {} : _,\n        I = e.create,\n        v = void 0 === I ? function () {} : I,\n        m = e.destroy,\n        h = void 0 === m ? function () {} : m,\n        g = e.filterFrameActionsForChild,\n        R = void 0 === g ? function (e, t) {\n      return t;\n    } : g,\n        O = e.didCreateView,\n        S = void 0 === O ? function () {} : O,\n        A = e.didWriteView,\n        L = void 0 === A ? function () {} : A,\n        b = e.ignoreRect,\n        P = void 0 !== b && b,\n        M = e.ignoreRectUpdate,\n        w = void 0 !== M && M,\n        C = e.mixins,\n        N = void 0 === C ? [] : C;\n    return function (e) {\n      var t,\n          o = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n          l = a(r, \"filepond--\" + i, c),\n          p = window.getComputedStyle(l, null),\n          _ = D(),\n          I = null,\n          m = !1,\n          g = [],\n          O = [],\n          A = {},\n          b = {},\n          M = [T],\n          C = [E],\n          G = [h],\n          U = function U() {\n        return l;\n      },\n          B = function B() {\n        return g.concat();\n      },\n          F = function F() {\n        return I || (I = d(_, g, [0, 0], [1, 1]));\n      },\n          q = {\n        element: {\n          get: U\n        },\n        style: {\n          get: function get() {\n            return p;\n          }\n        },\n        childViews: {\n          get: B\n        }\n      },\n          V = Object.assign({}, q, {\n        rect: {\n          get: F\n        },\n        ref: {\n          get: function get() {\n            return A;\n          }\n        },\n        is: function is(e) {\n          return i === e;\n        },\n        appendChild: (t = l, function (e, n) {\n          void 0 !== n && t.children[n] ? t.insertBefore(e, t.children[n]) : t.appendChild(e);\n        }),\n        createChildView: function (e) {\n          return function (t, n) {\n            return t(e, n);\n          };\n        }(e),\n        linkView: function linkView(e) {\n          return g.push(e), e;\n        },\n        unlinkView: function unlinkView(e) {\n          g.splice(g.indexOf(e), 1);\n        },\n        appendChildView: s(0, g),\n        removeChildView: u(l, g),\n        registerWriter: function registerWriter(e) {\n          return M.push(e);\n        },\n        registerReader: function registerReader(e) {\n          return C.push(e);\n        },\n        registerDestroyer: function registerDestroyer(e) {\n          return G.push(e);\n        },\n        invalidateLayout: function invalidateLayout() {\n          return l.layoutCalculated = !1;\n        },\n        dispatch: e.dispatch,\n        query: e.query\n      }),\n          x = {\n        element: {\n          get: U\n        },\n        childViews: {\n          get: B\n        },\n        rect: {\n          get: F\n        },\n        resting: {\n          get: function get() {\n            return m;\n          }\n        },\n        isRectIgnored: function isRectIgnored() {\n          return P;\n        },\n        _read: function _read() {\n          I = null, g.forEach(function (e) {\n            return e._read();\n          }), !(w && _.width && _.height) && D(_, l, p);\n          var e = {\n            root: k,\n            props: o,\n            rect: _\n          };\n          C.forEach(function (t) {\n            return t(e);\n          });\n        },\n        _write: function _write(e, t, n) {\n          var r = 0 === t.length;\n          return M.forEach(function (i) {\n            !1 === i({\n              props: o,\n              root: k,\n              actions: t,\n              timestamp: e,\n              shouldOptimize: n\n            }) && (r = !1);\n          }), O.forEach(function (t) {\n            !1 === t.write(e) && (r = !1);\n          }), g.filter(function (e) {\n            return !!e.element.parentNode;\n          }).forEach(function (o) {\n            o._write(e, R(o, t), n) || (r = !1);\n          }), g.forEach(function (o, i) {\n            o.element.parentNode || (k.appendChild(o.element, i), o._read(), o._write(e, R(o, t), n), r = !1);\n          }), m = r, L({\n            props: o,\n            root: k,\n            actions: t,\n            timestamp: e\n          }), r;\n        },\n        _destroy: function _destroy() {\n          O.forEach(function (e) {\n            return e.destroy();\n          }), G.forEach(function (e) {\n            e({\n              root: k,\n              props: o\n            });\n          }), g.forEach(function (e) {\n            return e._destroy();\n          });\n        }\n      },\n          Y = Object.assign({}, q, {\n        rect: {\n          get: function get() {\n            return _;\n          }\n        }\n      });\n\n      Object.keys(N).sort(function (e, t) {\n        return \"styles\" === e ? 1 : \"styles\" === t ? -1 : 0;\n      }).forEach(function (e) {\n        var t = y[e]({\n          mixinConfig: N[e],\n          viewProps: o,\n          viewState: b,\n          viewInternalAPI: V,\n          viewExternalAPI: x,\n          view: n(Y)\n        });\n        t && O.push(t);\n      });\n      var k = n(V);\n      v({\n        root: k,\n        props: o\n      });\n      var j = f(l);\n      return g.forEach(function (e, t) {\n        k.appendChild(e.element, j + t);\n      }), S(k), n(x);\n    };\n  },\n      A = function A(e, t) {\n    return function (n) {\n      var r = n.root,\n          o = n.props,\n          i = n.actions,\n          a = void 0 === i ? [] : i,\n          s = n.timestamp,\n          u = n.shouldOptimize;\n      a.filter(function (t) {\n        return e[t.type];\n      }).forEach(function (t) {\n        return e[t.type]({\n          root: r,\n          props: o,\n          action: t.data,\n          timestamp: s,\n          shouldOptimize: u\n        });\n      }), t && t({\n        root: r,\n        props: o,\n        actions: a,\n        timestamp: s,\n        shouldOptimize: u\n      });\n    };\n  },\n      L = function L(e, t) {\n    return t.parentNode.insertBefore(e, t);\n  },\n      b = function b(e, t) {\n    return t.parentNode.insertBefore(e, t.nextSibling);\n  },\n      P = function P(e) {\n    return Array.isArray(e);\n  },\n      M = function M(e) {\n    return null == e;\n  },\n      w = function w(e) {\n    return e.trim();\n  },\n      C = function C(e) {\n    return \"\" + e;\n  },\n      N = function N(e) {\n    return \"boolean\" == typeof e;\n  },\n      G = function G(e) {\n    return N(e) ? e : \"true\" === e;\n  },\n      U = function U(e) {\n    return \"string\" == typeof e;\n  },\n      B = function B(e) {\n    return _(e) ? e : U(e) ? C(e).replace(/[a-z]+/gi, \"\") : 0;\n  },\n      F = function F(e) {\n    return parseInt(B(e), 10);\n  },\n      q = function q(e) {\n    return parseFloat(B(e));\n  },\n      V = function V(e) {\n    return _(e) && isFinite(e) && Math.floor(e) === e;\n  },\n      x = function x(e) {\n    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1e3;\n    if (V(e)) return e;\n    var n = C(e).trim();\n    return /MB$/i.test(n) ? (n = n.replace(/MB$i/, \"\").trim(), F(n) * t * t) : /KB/i.test(n) ? (n = n.replace(/KB$i/, \"\").trim(), F(n) * t) : F(n);\n  },\n      Y = function Y(e) {\n    return \"function\" == typeof e;\n  },\n      k = {\n    process: \"POST\",\n    patch: \"PATCH\",\n    revert: \"DELETE\",\n    fetch: \"GET\",\n    restore: \"GET\",\n    load: \"GET\"\n  },\n      j = function j(e, t, n, r, o) {\n    if (null === t) return null;\n    if (\"function\" == typeof t) return t;\n    var i = {\n      url: \"GET\" === n || \"PATCH\" === n ? \"?\" + e + \"=\" : \"\",\n      method: n,\n      headers: o,\n      withCredentials: !1,\n      timeout: r,\n      onload: null,\n      ondata: null,\n      onerror: null\n    };\n    if (U(t)) return i.url = t, i;\n\n    if (Object.assign(i, t), U(i.headers)) {\n      var a = i.headers.split(/:(.+)/);\n      i.headers = {\n        header: a[0],\n        value: a[1]\n      };\n    }\n\n    return i.withCredentials = G(i.withCredentials), i;\n  },\n      H = function H(e) {\n    return \"object\" == _typeof(e) && null !== e;\n  },\n      X = function X(e) {\n    return P(e) ? \"array\" : function (e) {\n      return null === e;\n    }(e) ? \"null\" : V(e) ? \"int\" : /^[0-9]+ ?(?:GB|MB|KB)$/gi.test(e) ? \"bytes\" : function (e) {\n      return H(e) && U(e.url) && H(e.process) && H(e.revert) && H(e.restore) && H(e.fetch);\n    }(e) ? \"api\" : _typeof(e);\n  },\n      W = {\n    array: function array(e) {\n      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \",\";\n      return M(e) ? [] : P(e) ? e : C(e).split(t).map(w).filter(function (e) {\n        return e.length;\n      });\n    },\n    \"boolean\": G,\n    \"int\": function int(e) {\n      return \"bytes\" === X(e) ? x(e) : F(e);\n    },\n    number: q,\n    \"float\": q,\n    bytes: x,\n    string: function string(e) {\n      return Y(e) ? e : C(e);\n    },\n    \"function\": function _function(e) {\n      return function (e) {\n        for (var t = self, n = e.split(\".\"), r = null; r = n.shift();) {\n          if (!(t = t[r])) return null;\n        }\n\n        return t;\n      }(e);\n    },\n    serverapi: function serverapi(e) {\n      return (r = {}).url = U(n = e) ? n : n.url || \"\", r.timeout = n.timeout ? parseInt(n.timeout, 10) : 0, r.headers = n.headers ? n.headers : {}, t(k, function (e) {\n        r[e] = j(e, n[e], k[e], r.timeout, r.headers);\n      }), r.process = n.process || U(n) || n.url ? r.process : null, r.remove = n.remove || null, delete r.headers, r;\n      var n, r;\n    },\n    object: function object(e) {\n      try {\n        return JSON.parse(e.replace(/{\\s*'/g, '{\"').replace(/'\\s*}/g, '\"}').replace(/'\\s*:/g, '\":').replace(/:\\s*'/g, ':\"').replace(/,\\s*'/g, ',\"').replace(/'\\s*,/g, '\",'));\n      } catch (e) {\n        return null;\n      }\n    }\n  },\n      z = function z(e, t, n) {\n    if (e === t) return e;\n    var r,\n        o = X(e);\n\n    if (o !== n) {\n      var i = (r = e, W[n](r));\n      if (o = X(i), null === i) throw 'Trying to assign value with incorrect type to \"' + option + '\", allowed type: \"' + n + '\"';\n      e = i;\n    }\n\n    return e;\n  },\n      Q = function Q(e) {\n    var r = {};\n    return t(e, function (t) {\n      var n,\n          o,\n          i,\n          a = e[t];\n      r[t] = (n = a[0], o = a[1], i = n, {\n        enumerable: !0,\n        get: function get() {\n          return i;\n        },\n        set: function set(e) {\n          i = z(e, n, o);\n        }\n      });\n    }), n(r);\n  },\n      Z = function Z(e) {\n    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"-\";\n    return e.split(/(?=[A-Z])/).map(function (e) {\n      return e.toLowerCase();\n    }).join(t);\n  },\n      K = function K(e) {\n    return function (n, r, o) {\n      var i = {};\n      return t(e, function (e) {\n        var t = Z(e, \"_\").toUpperCase();\n\n        i[\"SET_\" + t] = function (r) {\n          try {\n            o.options[e] = r.value;\n          } catch (e) {}\n\n          n(\"DID_SET_\" + t, {\n            value: o.options[e]\n          });\n        };\n      }), i;\n    };\n  },\n      $ = function $(e) {\n    return function (n) {\n      var r = {};\n      return t(e, function (e) {\n        r[\"GET_\" + Z(e, \"_\").toUpperCase()] = function (t) {\n          return n.options[e];\n        };\n      }), r;\n    };\n  },\n      J = 1,\n      ee = 2,\n      te = 3,\n      ne = 4,\n      re = 5,\n      oe = function oe() {\n    return Math.random().toString(36).substr(2, 9);\n  };\n\n  function ie(e) {\n    this.wrapped = e;\n  }\n\n  function ae(e) {\n    var t, n;\n\n    function r(t, n) {\n      try {\n        var i = e[t](n),\n            a = i.value,\n            s = a instanceof ie;\n        Promise.resolve(s ? a.wrapped : a).then(function (e) {\n          s ? r(\"next\", e) : o(i.done ? \"return\" : \"normal\", e);\n        }, function (e) {\n          r(\"throw\", e);\n        });\n      } catch (e) {\n        o(\"throw\", e);\n      }\n    }\n\n    function o(e, o) {\n      switch (e) {\n        case \"return\":\n          t.resolve({\n            value: o,\n            done: !0\n          });\n          break;\n\n        case \"throw\":\n          t.reject(o);\n          break;\n\n        default:\n          t.resolve({\n            value: o,\n            done: !1\n          });\n      }\n\n      (t = t.next) ? r(t.key, t.arg) : n = null;\n    }\n\n    this._invoke = function (e, o) {\n      return new Promise(function (i, a) {\n        var s = {\n          key: e,\n          arg: o,\n          resolve: i,\n          reject: a,\n          next: null\n        };\n        n ? n = n.next = s : (t = n = s, r(e, o));\n      });\n    }, \"function\" != typeof e[\"return\"] && (this[\"return\"] = void 0);\n  }\n\n  function se(e, t) {\n    if (null == e) return {};\n\n    var n,\n        r,\n        o = function (e, t) {\n      if (null == e) return {};\n      var n,\n          r,\n          o = {},\n          i = Object.keys(e);\n\n      for (r = 0; r < i.length; r++) {\n        n = i[r], t.indexOf(n) >= 0 || (o[n] = e[n]);\n      }\n\n      return o;\n    }(e, t);\n\n    if (Object.getOwnPropertySymbols) {\n      var i = Object.getOwnPropertySymbols(e);\n\n      for (r = 0; r < i.length; r++) {\n        n = i[r], t.indexOf(n) >= 0 || Object.prototype.propertyIsEnumerable.call(e, n) && (o[n] = e[n]);\n      }\n    }\n\n    return o;\n  }\n\n  \"function\" == typeof Symbol && Symbol.asyncIterator && (ae.prototype[Symbol.asyncIterator] = function () {\n    return this;\n  }), ae.prototype.next = function (e) {\n    return this._invoke(\"next\", e);\n  }, ae.prototype[\"throw\"] = function (e) {\n    return this._invoke(\"throw\", e);\n  }, ae.prototype[\"return\"] = function (e) {\n    return this._invoke(\"return\", e);\n  };\n\n  function ue(e) {\n    return function (e) {\n      if (Array.isArray(e)) {\n        for (var t = 0, n = new Array(e.length); t < e.length; t++) {\n          n[t] = e[t];\n        }\n\n        return n;\n      }\n    }(e) || le(e) || function () {\n      throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n    }();\n  }\n\n  function le(e) {\n    if (Symbol.iterator in Object(e) || \"[object Arguments]\" === Object.prototype.toString.call(e)) return Array.from(e);\n  }\n\n  var ce,\n      fe,\n      de = function de(e, t) {\n    return e.splice(t, 1);\n  },\n      pe = function pe() {\n    var e = [],\n        t = function t(_t3, n) {\n      de(e, e.findIndex(function (e) {\n        return e.event === _t3 && (e.cb === n || !n);\n      }));\n    },\n        n = function n(t, _n2, r) {\n      e.filter(function (e) {\n        return e.event === t;\n      }).map(function (e) {\n        return e.cb;\n      }).forEach(function (e) {\n        return function (e, t) {\n          t ? e() : document.hidden ? Promise.resolve(1).then(e) : setTimeout(e, 0);\n        }(function () {\n          return e.apply(void 0, ue(_n2));\n        }, r);\n      });\n    };\n\n    return {\n      fireSync: function fireSync(e) {\n        for (var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) {\n          r[o - 1] = arguments[o];\n        }\n\n        n(e, r, !0);\n      },\n      fire: function fire(e) {\n        for (var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) {\n          r[o - 1] = arguments[o];\n        }\n\n        n(e, r, !1);\n      },\n      on: function on(t, n) {\n        e.push({\n          event: t,\n          cb: n\n        });\n      },\n      onOnce: function onOnce(n, r) {\n        e.push({\n          event: n,\n          cb: function cb() {\n            t(n, r), r.apply(void 0, arguments);\n          }\n        });\n      },\n      off: t\n    };\n  },\n      Ee = function Ee(e, t, n) {\n    Object.getOwnPropertyNames(e).filter(function (e) {\n      return !n.includes(e);\n    }).forEach(function (n) {\n      return Object.defineProperty(t, n, Object.getOwnPropertyDescriptor(e, n));\n    });\n  },\n      _e = [\"fire\", \"process\", \"revert\", \"load\", \"on\", \"off\", \"onOnce\", \"retryLoad\", \"extend\", \"archive\", \"archived\", \"release\", \"released\", \"requestProcessing\", \"freeze\"],\n      Te = function Te(e) {\n    var t = {};\n    return Ee(e, t, _e), t;\n  },\n      Ie = {\n    INIT: 1,\n    IDLE: 2,\n    PROCESSING_QUEUED: 9,\n    PROCESSING: 3,\n    PROCESSING_COMPLETE: 5,\n    PROCESSING_ERROR: 6,\n    PROCESSING_REVERT_ERROR: 10,\n    LOADING: 7,\n    LOAD_ERROR: 8\n  },\n      ve = {\n    INPUT: 1,\n    LIMBO: 2,\n    LOCAL: 3\n  },\n      me = function me(e) {\n    return /[^0-9]+/.exec(e);\n  },\n      he = function he() {\n    return me(1.1.toLocaleString())[0];\n  },\n      ge = {\n    BOOLEAN: \"boolean\",\n    INT: \"int\",\n    NUMBER: \"number\",\n    STRING: \"string\",\n    ARRAY: \"array\",\n    OBJECT: \"object\",\n    FUNCTION: \"function\",\n    ACTION: \"action\",\n    SERVER_API: \"serverapi\",\n    REGEX: \"regex\"\n  },\n      Re = [],\n      Oe = function Oe(e, t, n) {\n    return new Promise(function (r, o) {\n      var i = Re.filter(function (t) {\n        return t.key === e;\n      }).map(function (e) {\n        return e.cb;\n      });\n\n      if (0 !== i.length) {\n        var a = i.shift();\n        i.reduce(function (e, t) {\n          return e.then(function (e) {\n            return t(e, n);\n          });\n        }, a(t, n)).then(function (e) {\n          return r(e);\n        })[\"catch\"](function (e) {\n          return o(e);\n        });\n      } else r(t);\n    });\n  },\n      ye = function ye(e, t, n) {\n    return Re.filter(function (t) {\n      return t.key === e;\n    }).map(function (e) {\n      return e.cb(t, n);\n    });\n  },\n      De = function De(e, t) {\n    return Re.push({\n      key: e,\n      cb: t\n    });\n  },\n      Se = function Se() {\n    return Object.assign({}, Ae);\n  },\n      Ae = {\n    id: [null, ge.STRING],\n    name: [\"filepond\", ge.STRING],\n    disabled: [!1, ge.BOOLEAN],\n    className: [null, ge.STRING],\n    required: [!1, ge.BOOLEAN],\n    captureMethod: [null, ge.STRING],\n    allowSyncAcceptAttribute: [!0, ge.BOOLEAN],\n    allowDrop: [!0, ge.BOOLEAN],\n    allowBrowse: [!0, ge.BOOLEAN],\n    allowPaste: [!0, ge.BOOLEAN],\n    allowMultiple: [!1, ge.BOOLEAN],\n    allowReplace: [!0, ge.BOOLEAN],\n    allowRevert: [!0, ge.BOOLEAN],\n    allowRemove: [!0, ge.BOOLEAN],\n    allowProcess: [!0, ge.BOOLEAN],\n    allowReorder: [!1, ge.BOOLEAN],\n    allowDirectoriesOnly: [!1, ge.BOOLEAN],\n    storeAsFile: [!1, ge.BOOLEAN],\n    forceRevert: [!1, ge.BOOLEAN],\n    maxFiles: [null, ge.INT],\n    checkValidity: [!1, ge.BOOLEAN],\n    itemInsertLocationFreedom: [!0, ge.BOOLEAN],\n    itemInsertLocation: [\"before\", ge.STRING],\n    itemInsertInterval: [75, ge.INT],\n    dropOnPage: [!1, ge.BOOLEAN],\n    dropOnElement: [!0, ge.BOOLEAN],\n    dropValidation: [!1, ge.BOOLEAN],\n    ignoredFiles: [[\".ds_store\", \"thumbs.db\", \"desktop.ini\"], ge.ARRAY],\n    instantUpload: [!0, ge.BOOLEAN],\n    maxParallelUploads: [2, ge.INT],\n    allowMinimumUploadDuration: [!0, ge.BOOLEAN],\n    chunkUploads: [!1, ge.BOOLEAN],\n    chunkForce: [!1, ge.BOOLEAN],\n    chunkSize: [5e6, ge.INT],\n    chunkRetryDelays: [[500, 1e3, 3e3], ge.ARRAY],\n    server: [null, ge.SERVER_API],\n    fileSizeBase: [1e3, ge.INT],\n    labelFileSizeBytes: [\"bytes\", ge.STRING],\n    labelFileSizeKilobytes: [\"KB\", ge.STRING],\n    labelFileSizeMegabytes: [\"MB\", ge.STRING],\n    labelFileSizeGigabytes: [\"GB\", ge.STRING],\n    labelDecimalSeparator: [he(), ge.STRING],\n    labelThousandsSeparator: [(ce = he(), fe = 1e3.toLocaleString(), fe !== 1e3.toString() ? me(fe)[0] : \".\" === ce ? \",\" : \".\"), ge.STRING],\n    labelIdle: ['Drag & Drop your files or <span class=\"filepond--label-action\">Browse</span>', ge.STRING],\n    labelInvalidField: [\"Field contains invalid files\", ge.STRING],\n    labelFileWaitingForSize: [\"Waiting for size\", ge.STRING],\n    labelFileSizeNotAvailable: [\"Size not available\", ge.STRING],\n    labelFileCountSingular: [\"file in list\", ge.STRING],\n    labelFileCountPlural: [\"files in list\", ge.STRING],\n    labelFileLoading: [\"Loading\", ge.STRING],\n    labelFileAdded: [\"Added\", ge.STRING],\n    labelFileLoadError: [\"Error during load\", ge.STRING],\n    labelFileRemoved: [\"Removed\", ge.STRING],\n    labelFileRemoveError: [\"Error during remove\", ge.STRING],\n    labelFileProcessing: [\"Uploading\", ge.STRING],\n    labelFileProcessingComplete: [\"Upload complete\", ge.STRING],\n    labelFileProcessingAborted: [\"Upload cancelled\", ge.STRING],\n    labelFileProcessingError: [\"Error during upload\", ge.STRING],\n    labelFileProcessingRevertError: [\"Error during revert\", ge.STRING],\n    labelTapToCancel: [\"tap to cancel\", ge.STRING],\n    labelTapToRetry: [\"tap to retry\", ge.STRING],\n    labelTapToUndo: [\"tap to undo\", ge.STRING],\n    labelButtonRemoveItem: [\"Remove\", ge.STRING],\n    labelButtonAbortItemLoad: [\"Abort\", ge.STRING],\n    labelButtonRetryItemLoad: [\"Retry\", ge.STRING],\n    labelButtonAbortItemProcessing: [\"Cancel\", ge.STRING],\n    labelButtonUndoItemProcessing: [\"Undo\", ge.STRING],\n    labelButtonRetryItemProcessing: [\"Retry\", ge.STRING],\n    labelButtonProcessItem: [\"Upload\", ge.STRING],\n    iconRemove: ['<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M11.586 13l-2.293 2.293a1 1 0 0 0 1.414 1.414L13 14.414l2.293 2.293a1 1 0 0 0 1.414-1.414L14.414 13l2.293-2.293a1 1 0 0 0-1.414-1.414L13 11.586l-2.293-2.293a1 1 0 0 0-1.414 1.414L11.586 13z\" fill=\"currentColor\" fill-rule=\"nonzero\"/></svg>', ge.STRING],\n    iconProcess: ['<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 10.414v3.585a1 1 0 0 1-2 0v-3.585l-1.293 1.293a1 1 0 0 1-1.414-1.415l3-3a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1-1.414 1.415L14 10.414zM9 18a1 1 0 0 1 0-2h8a1 1 0 0 1 0 2H9z\" fill=\"currentColor\" fill-rule=\"evenodd\"/></svg>', ge.STRING],\n    iconRetry: ['<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10.81 9.185l-.038.02A4.997 4.997 0 0 0 8 13.683a5 5 0 0 0 5 5 5 5 0 0 0 5-5 1 1 0 0 1 2 0A7 7 0 1 1 9.722 7.496l-.842-.21a.999.999 0 1 1 .484-1.94l3.23.806c.535.133.86.675.73 1.21l-.804 3.233a.997.997 0 0 1-1.21.73.997.997 0 0 1-.73-1.21l.23-.928v-.002z\" fill=\"currentColor\" fill-rule=\"nonzero\"/></svg>', ge.STRING],\n    iconUndo: ['<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9.185 10.81l.02-.038A4.997 4.997 0 0 1 13.683 8a5 5 0 0 1 5 5 5 5 0 0 1-5 5 1 1 0 0 0 0 2A7 7 0 1 0 7.496 9.722l-.21-.842a.999.999 0 1 0-1.94.484l.806 3.23c.133.535.675.86 1.21.73l3.233-.803a.997.997 0 0 0 .73-1.21.997.997 0 0 0-1.21-.73l-.928.23-.002-.001z\" fill=\"currentColor\" fill-rule=\"nonzero\"/></svg>', ge.STRING],\n    iconDone: ['<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M18.293 9.293a1 1 0 0 1 1.414 1.414l-7.002 7a1 1 0 0 1-1.414 0l-3.998-4a1 1 0 1 1 1.414-1.414L12 15.586l6.294-6.293z\" fill=\"currentColor\" fill-rule=\"nonzero\"/></svg>', ge.STRING],\n    oninit: [null, ge.FUNCTION],\n    onwarning: [null, ge.FUNCTION],\n    onerror: [null, ge.FUNCTION],\n    onactivatefile: [null, ge.FUNCTION],\n    oninitfile: [null, ge.FUNCTION],\n    onaddfilestart: [null, ge.FUNCTION],\n    onaddfileprogress: [null, ge.FUNCTION],\n    onaddfile: [null, ge.FUNCTION],\n    onprocessfilestart: [null, ge.FUNCTION],\n    onprocessfileprogress: [null, ge.FUNCTION],\n    onprocessfileabort: [null, ge.FUNCTION],\n    onprocessfilerevert: [null, ge.FUNCTION],\n    onprocessfile: [null, ge.FUNCTION],\n    onprocessfiles: [null, ge.FUNCTION],\n    onremovefile: [null, ge.FUNCTION],\n    onpreparefile: [null, ge.FUNCTION],\n    onupdatefiles: [null, ge.FUNCTION],\n    onreorderfiles: [null, ge.FUNCTION],\n    beforeDropFile: [null, ge.FUNCTION],\n    beforeAddFile: [null, ge.FUNCTION],\n    beforeRemoveFile: [null, ge.FUNCTION],\n    beforePrepareFile: [null, ge.FUNCTION],\n    stylePanelLayout: [null, ge.STRING],\n    stylePanelAspectRatio: [null, ge.STRING],\n    styleItemPanelAspectRatio: [null, ge.STRING],\n    styleButtonRemoveItemPosition: [\"left\", ge.STRING],\n    styleButtonProcessItemPosition: [\"right\", ge.STRING],\n    styleLoadIndicatorPosition: [\"right\", ge.STRING],\n    styleProgressIndicatorPosition: [\"right\", ge.STRING],\n    styleButtonRemoveItemAlign: [!1, ge.BOOLEAN],\n    files: [[], ge.ARRAY],\n    credits: [[\"https://pqina.nl/\", \"Powered by PQINA\"], ge.ARRAY]\n  },\n      Le = function Le(e, t) {\n    return M(t) ? e[0] || null : V(t) ? e[t] || null : (\"object\" == _typeof(t) && (t = t.id), e.find(function (e) {\n      return e.id === t;\n    }) || null);\n  },\n      be = function be(e) {\n    if (M(e)) return e;\n\n    if (/:/.test(e)) {\n      var t = e.split(\":\");\n      return t[1] / t[0];\n    }\n\n    return parseFloat(e);\n  },\n      Pe = function Pe(e) {\n    return e.filter(function (e) {\n      return !e.archived;\n    });\n  },\n      Me = {\n    EMPTY: 0,\n    IDLE: 1,\n    ERROR: 2,\n    BUSY: 3,\n    READY: 4\n  },\n      we = null,\n      Ce = [Ie.LOAD_ERROR, Ie.PROCESSING_ERROR, Ie.PROCESSING_REVERT_ERROR],\n      Ne = [Ie.LOADING, Ie.PROCESSING, Ie.PROCESSING_QUEUED, Ie.INIT],\n      Ge = [Ie.PROCESSING_COMPLETE],\n      Ue = function Ue(e) {\n    return Ce.includes(e.status);\n  },\n      Be = function Be(e) {\n    return Ne.includes(e.status);\n  },\n      Fe = function Fe(e) {\n    return Ge.includes(e.status);\n  },\n      qe = function qe(e) {\n    return H(e.options.server) && (H(e.options.server.process) || Y(e.options.server.process));\n  },\n      Ve = function Ve(e) {\n    return {\n      GET_STATUS: function GET_STATUS() {\n        var t = Pe(e.items),\n            n = Me.EMPTY,\n            r = Me.ERROR,\n            o = Me.BUSY,\n            i = Me.IDLE,\n            a = Me.READY;\n        return 0 === t.length ? n : t.some(Ue) ? r : t.some(Be) ? o : t.some(Fe) ? a : i;\n      },\n      GET_ITEM: function GET_ITEM(t) {\n        return Le(e.items, t);\n      },\n      GET_ACTIVE_ITEM: function GET_ACTIVE_ITEM(t) {\n        return Le(Pe(e.items), t);\n      },\n      GET_ACTIVE_ITEMS: function GET_ACTIVE_ITEMS() {\n        return Pe(e.items);\n      },\n      GET_ITEMS: function GET_ITEMS() {\n        return e.items;\n      },\n      GET_ITEM_NAME: function GET_ITEM_NAME(t) {\n        var n = Le(e.items, t);\n        return n ? n.filename : null;\n      },\n      GET_ITEM_SIZE: function GET_ITEM_SIZE(t) {\n        var n = Le(e.items, t);\n        return n ? n.fileSize : null;\n      },\n      GET_STYLES: function GET_STYLES() {\n        return Object.keys(e.options).filter(function (e) {\n          return /^style/.test(e);\n        }).map(function (t) {\n          return {\n            name: t,\n            value: e.options[t]\n          };\n        });\n      },\n      GET_PANEL_ASPECT_RATIO: function GET_PANEL_ASPECT_RATIO() {\n        return /circle/.test(e.options.stylePanelLayout) ? 1 : be(e.options.stylePanelAspectRatio);\n      },\n      GET_ITEM_PANEL_ASPECT_RATIO: function GET_ITEM_PANEL_ASPECT_RATIO() {\n        return e.options.styleItemPanelAspectRatio;\n      },\n      GET_ITEMS_BY_STATUS: function GET_ITEMS_BY_STATUS(t) {\n        return Pe(e.items).filter(function (e) {\n          return e.status === t;\n        });\n      },\n      GET_TOTAL_ITEMS: function GET_TOTAL_ITEMS() {\n        return Pe(e.items).length;\n      },\n      SHOULD_UPDATE_FILE_INPUT: function SHOULD_UPDATE_FILE_INPUT() {\n        return e.options.storeAsFile && function () {\n          if (null === we) try {\n            var e = new DataTransfer();\n            e.items.add(new File([\"hello world\"], \"This_Works.txt\"));\n            var t = document.createElement(\"input\");\n            t.setAttribute(\"type\", \"file\"), t.files = e.files, we = 1 === t.files.length;\n          } catch (e) {\n            we = !1;\n          }\n          return we;\n        }() && !qe(e);\n      },\n      IS_ASYNC: function IS_ASYNC() {\n        return qe(e);\n      },\n      GET_FILE_SIZE_LABELS: function GET_FILE_SIZE_LABELS(e) {\n        return {\n          labelBytes: e(\"GET_LABEL_FILE_SIZE_BYTES\") || void 0,\n          labelKilobytes: e(\"GET_LABEL_FILE_SIZE_KILOBYTES\") || void 0,\n          labelMegabytes: e(\"GET_LABEL_FILE_SIZE_MEGABYTES\") || void 0,\n          labelGigabytes: e(\"GET_LABEL_FILE_SIZE_GIGABYTES\") || void 0\n        };\n      }\n    };\n  },\n      xe = function xe(e, t, n) {\n    return Math.max(Math.min(n, e), t);\n  },\n      Ye = function Ye(e) {\n    return /^\\s*data:([a-z]+\\/[a-z0-9-+.]+(;[a-z-]+=[a-z0-9-]+)?)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s]*)\\s*$/i.test(e);\n  },\n      ke = function ke(e) {\n    return e.split(\"/\").pop().split(\"?\").shift();\n  },\n      je = function je(e) {\n    return e.split(\".\").pop();\n  },\n      He = function He(e) {\n    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"\";\n    return (t + e).slice(-t.length);\n  },\n      Xe = function Xe() {\n    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Date();\n    return e.getFullYear() + \"-\" + He(e.getMonth() + 1, \"00\") + \"-\" + He(e.getDate(), \"00\") + \"_\" + He(e.getHours(), \"00\") + \"-\" + He(e.getMinutes(), \"00\") + \"-\" + He(e.getSeconds(), \"00\");\n  },\n      We = function We(e, t) {\n    var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,\n        r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,\n        o = \"string\" == typeof n ? e.slice(0, e.size, n) : e.slice(0, e.size, e.type);\n    return o.lastModifiedDate = new Date(), e._relativePath && (o._relativePath = e._relativePath), U(t) || (t = Xe()), t && null === r && je(t) ? o.name = t : (r = r || function (e) {\n      if (\"string\" != typeof e) return \"\";\n      var t = e.split(\"/\").pop();\n      return /svg/.test(t) ? \"svg\" : /zip|compressed/.test(t) ? \"zip\" : /plain/.test(t) ? \"txt\" : /msword/.test(t) ? \"doc\" : /[a-z]+/.test(t) ? \"jpeg\" === t ? \"jpg\" : t : \"\";\n    }(o.type), o.name = t + (r ? \".\" + r : \"\")), o;\n  },\n      ze = function ze(e, t) {\n    var n = window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n    if (n) {\n      var r = new n();\n      return r.append(e), r.getBlob(t);\n    }\n\n    return new Blob([e], {\n      type: t\n    });\n  },\n      Qe = function Qe(e) {\n    return (/^data:(.+);/.exec(e) || [])[1] || null;\n  },\n      Ze = function Ze(e) {\n    var t = Qe(e);\n    return function (e, t) {\n      for (var n = new ArrayBuffer(e.length), r = new Uint8Array(n), o = 0; o < e.length; o++) {\n        r[o] = e.charCodeAt(o);\n      }\n\n      return ze(n, t);\n    }(function (e) {\n      return atob(function (e) {\n        return e.split(\",\")[1].replace(/\\s/g, \"\");\n      }(e));\n    }(e), t);\n  },\n      Ke = function Ke(e) {\n    if (!/^content-disposition:/i.test(e)) return null;\n    var t = e.split(/filename=|filename\\*=.+''/).splice(1).map(function (e) {\n      return e.trim().replace(/^[\"']|[;\"']{0,2}$/g, \"\");\n    }).filter(function (e) {\n      return e.length;\n    });\n    return t.length ? decodeURI(t[t.length - 1]) : null;\n  },\n      $e = function $e(e) {\n    if (/content-length:/i.test(e)) {\n      var t = e.match(/[0-9]+/)[0];\n      return t ? parseInt(t, 10) : null;\n    }\n\n    return null;\n  },\n      Je = function Je(e) {\n    return /x-content-transfer-id:/i.test(e) && (e.split(\":\")[1] || \"\").trim() || null;\n  },\n      et = function et(e) {\n    var t = {\n      source: null,\n      name: null,\n      size: null\n    },\n        n = e.split(\"\\n\"),\n        r = !0,\n        o = !1,\n        i = void 0;\n\n    try {\n      for (var a, s = n[Symbol.iterator](); !(r = (a = s.next()).done); r = !0) {\n        var u = a.value,\n            l = Ke(u);\n        if (l) t.name = l;else {\n          var c = $e(u);\n          if (c) t.size = c;else {\n            var f = Je(u);\n            f && (t.source = f);\n          }\n        }\n      }\n    } catch (e) {\n      o = !0, i = e;\n    } finally {\n      try {\n        r || null == s[\"return\"] || s[\"return\"]();\n      } finally {\n        if (o) throw i;\n      }\n    }\n\n    return t;\n  },\n      tt = function tt(e) {\n    var t = {\n      source: null,\n      complete: !1,\n      progress: 0,\n      size: null,\n      timestamp: null,\n      duration: 0,\n      request: null\n    },\n        n = function n(_n3) {\n      e ? (t.timestamp = Date.now(), t.request = e(_n3, function (e) {\n        t.duration = Date.now() - t.timestamp, t.complete = !0, e instanceof Blob && (e = We(e, e.name || ke(_n3))), r.fire(\"load\", e instanceof Blob ? e : e ? e.body : null);\n      }, function (e) {\n        r.fire(\"error\", \"string\" == typeof e ? {\n          type: \"error\",\n          code: 0,\n          body: e\n        } : e);\n      }, function (e, n, o) {\n        o && (t.size = o), t.duration = Date.now() - t.timestamp, e ? (t.progress = n / o, r.fire(\"progress\", t.progress)) : t.progress = null;\n      }, function () {\n        r.fire(\"abort\");\n      }, function (e) {\n        var n = et(\"string\" == typeof e ? e : e.headers);\n        r.fire(\"meta\", {\n          size: t.size || n.size,\n          filename: n.name,\n          source: n.source\n        });\n      })) : r.fire(\"error\", {\n        type: \"error\",\n        body: \"Can't load URL\",\n        code: 400\n      });\n    },\n        r = Object.assign({}, pe(), {\n      setSource: function setSource(e) {\n        return t.source = e;\n      },\n      getProgress: function getProgress() {\n        return t.progress;\n      },\n      abort: function abort() {\n        t.request && t.request.abort && t.request.abort();\n      },\n      load: function load() {\n        var e,\n            o,\n            i = t.source;\n        r.fire(\"init\", i), i instanceof File ? r.fire(\"load\", i) : i instanceof Blob ? r.fire(\"load\", We(i, i.name)) : Ye(i) ? r.fire(\"load\", We(Ze(i), e, null, o)) : n(i);\n      }\n    });\n\n    return r;\n  },\n      nt = function nt(e) {\n    return /GET|HEAD/.test(e);\n  },\n      rt = function rt(e, t, n) {\n    var r = {\n      onheaders: function onheaders() {},\n      onprogress: function onprogress() {},\n      onload: function onload() {},\n      ontimeout: function ontimeout() {},\n      onerror: function onerror() {},\n      onabort: function onabort() {},\n      abort: function abort() {\n        o = !0, a.abort();\n      }\n    },\n        o = !1,\n        i = !1;\n    n = Object.assign({\n      method: \"POST\",\n      headers: {},\n      withCredentials: !1\n    }, n), t = encodeURI(t), nt(n.method) && e && (t = \"\" + t + encodeURIComponent(\"string\" == typeof e ? e : JSON.stringify(e)));\n    var a = new XMLHttpRequest();\n    return (nt(n.method) ? a : a.upload).onprogress = function (e) {\n      o || r.onprogress(e.lengthComputable, e.loaded, e.total);\n    }, a.onreadystatechange = function () {\n      a.readyState < 2 || 4 === a.readyState && 0 === a.status || i || (i = !0, r.onheaders(a));\n    }, a.onload = function () {\n      a.status >= 200 && a.status < 300 ? r.onload(a) : r.onerror(a);\n    }, a.onerror = function () {\n      return r.onerror(a);\n    }, a.onabort = function () {\n      o = !0, r.onabort();\n    }, a.ontimeout = function () {\n      return r.ontimeout(a);\n    }, a.open(n.method, t, !0), V(n.timeout) && (a.timeout = n.timeout), Object.keys(n.headers).forEach(function (e) {\n      var t = unescape(encodeURIComponent(n.headers[e]));\n      a.setRequestHeader(e, t);\n    }), n.responseType && (a.responseType = n.responseType), n.withCredentials && (a.withCredentials = !0), a.send(e), r;\n  },\n      ot = function ot(e, t, n, r) {\n    return {\n      type: e,\n      code: t,\n      body: n,\n      headers: r\n    };\n  },\n      it = function it(e) {\n    return function (t) {\n      e(ot(\"error\", 0, \"Timeout\", t.getAllResponseHeaders()));\n    };\n  },\n      at = function at(e) {\n    return /\\?/.test(e);\n  },\n      st = function st() {\n    for (var e = \"\", t = arguments.length, n = new Array(t), r = 0; r < t; r++) {\n      n[r] = arguments[r];\n    }\n\n    return n.forEach(function (t) {\n      e += at(e) && at(t) ? t.replace(/\\?/, \"&\") : t;\n    }), e;\n  },\n      ut = function ut() {\n    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"\",\n        t = arguments.length > 1 ? arguments[1] : void 0;\n    if (\"function\" == typeof t) return t;\n    if (!t || !U(t.url)) return null;\n\n    var n = t.onload || function (e) {\n      return e;\n    },\n        r = t.onerror || function (e) {\n      return null;\n    };\n\n    return function (o, i, a, s, u, l) {\n      var c = rt(o, st(e, t.url), Object.assign({}, t, {\n        responseType: \"blob\"\n      }));\n      return c.onload = function (e) {\n        var r = e.getAllResponseHeaders(),\n            a = et(r).name || ke(o);\n        i(ot(\"load\", e.status, \"HEAD\" === t.method ? null : We(n(e.response), a), r));\n      }, c.onerror = function (e) {\n        a(ot(\"error\", e.status, r(e.response) || e.statusText, e.getAllResponseHeaders()));\n      }, c.onheaders = function (e) {\n        l(ot(\"headers\", e.status, null, e.getAllResponseHeaders()));\n      }, c.ontimeout = it(a), c.onprogress = s, c.onabort = u, c;\n    };\n  },\n      lt = 0,\n      ct = 1,\n      ft = 2,\n      dt = 3,\n      pt = 4,\n      Et = function Et(e, t, n, r, o, i, a, s, u, l, c) {\n    for (var f = [], d = c.chunkTransferId, p = c.chunkServer, E = c.chunkSize, _ = c.chunkRetryDelays, T = {\n      serverId: d,\n      aborted: !1\n    }, I = t.ondata || function (e) {\n      return e;\n    }, v = t.onload || function (e, t) {\n      return \"HEAD\" === t ? e.getResponseHeader(\"Upload-Offset\") : e.response;\n    }, m = t.onerror || function (e) {\n      return null;\n    }, h = Math.floor(r.size / E), g = 0; g <= h; g++) {\n      var R = g * E,\n          O = r.slice(R, R + E, \"application/offset+octet-stream\");\n      f[g] = {\n        index: g,\n        size: O.size,\n        offset: R,\n        data: O,\n        file: r,\n        progress: 0,\n        retries: ue(_),\n        status: lt,\n        error: null,\n        request: null,\n        timeout: null\n      };\n    }\n\n    var y,\n        D,\n        S,\n        A,\n        L = function L(e) {\n      return e.status === lt || e.status === dt;\n    },\n        b = function b(t) {\n      if (!T.aborted) if (t = t || f.find(L)) {\n        t.status = ft, t.progress = null;\n\n        var n = p.ondata || function (e) {\n          return e;\n        },\n            o = p.onerror || function (e) {\n          return null;\n        },\n            s = st(e, p.url, T.serverId),\n            l = \"function\" == typeof p.headers ? p.headers(t) : Object.assign({}, p.headers, {\n          \"Content-Type\": \"application/offset+octet-stream\",\n          \"Upload-Offset\": t.offset,\n          \"Upload-Length\": r.size,\n          \"Upload-Name\": r.name\n        }),\n            c = t.request = rt(n(t.data), s, Object.assign({}, p, {\n          headers: l\n        }));\n\n        c.onload = function () {\n          t.status = ct, t.request = null, w();\n        }, c.onprogress = function (e, n, r) {\n          t.progress = e ? n : null, M();\n        }, c.onerror = function (e) {\n          t.status = dt, t.request = null, t.error = o(e.response) || e.statusText, P(t) || a(ot(\"error\", e.status, o(e.response) || e.statusText, e.getAllResponseHeaders()));\n        }, c.ontimeout = function (e) {\n          t.status = dt, t.request = null, P(t) || it(a)(e);\n        }, c.onabort = function () {\n          t.status = lt, t.request = null, u();\n        };\n      } else f.every(function (e) {\n        return e.status === ct;\n      }) && i(T.serverId);\n    },\n        P = function P(e) {\n      return 0 !== e.retries.length && (e.status = pt, clearTimeout(e.timeout), e.timeout = setTimeout(function () {\n        b(e);\n      }, e.retries.shift()), !0);\n    },\n        M = function M() {\n      var e = f.reduce(function (e, t) {\n        return null === e || null === t.progress ? null : e + t.progress;\n      }, 0);\n      if (null === e) return s(!1, 0, 0);\n      var t = f.reduce(function (e, t) {\n        return e + t.size;\n      }, 0);\n      s(!0, e, t);\n    },\n        w = function w() {\n      f.filter(function (e) {\n        return e.status === ft;\n      }).length >= 1 || b();\n    };\n\n    return T.serverId ? (y = function y(e) {\n      T.aborted || (f.filter(function (t) {\n        return t.offset < e;\n      }).forEach(function (e) {\n        e.status = ct, e.progress = e.size;\n      }), w());\n    }, D = st(e, p.url, T.serverId), S = {\n      headers: \"function\" == typeof t.headers ? t.headers(T.serverId) : Object.assign({}, t.headers),\n      method: \"HEAD\"\n    }, (A = rt(null, D, S)).onload = function (e) {\n      return y(v(e, S.method));\n    }, A.onerror = function (e) {\n      return a(ot(\"error\", e.status, m(e.response) || e.statusText, e.getAllResponseHeaders()));\n    }, A.ontimeout = it(a)) : function (i) {\n      var s = new FormData();\n      H(o) && s.append(n, JSON.stringify(o));\n      var u = \"function\" == typeof t.headers ? t.headers(r, o) : Object.assign({}, t.headers, {\n        \"Upload-Length\": r.size\n      }),\n          l = Object.assign({}, t, {\n        headers: u\n      }),\n          c = rt(I(s), st(e, t.url), l);\n      c.onload = function (e) {\n        return i(v(e, l.method));\n      }, c.onerror = function (e) {\n        return a(ot(\"error\", e.status, m(e.response) || e.statusText, e.getAllResponseHeaders()));\n      }, c.ontimeout = it(a);\n    }(function (e) {\n      T.aborted || (l(e), T.serverId = e, w());\n    }), {\n      abort: function abort() {\n        T.aborted = !0, f.forEach(function (e) {\n          clearTimeout(e.timeout), e.request && e.request.abort();\n        });\n      }\n    };\n  },\n      _t = function _t() {\n    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"\",\n        t = arguments.length > 1 ? arguments[1] : void 0,\n        n = arguments.length > 2 ? arguments[2] : void 0,\n        r = arguments.length > 3 ? arguments[3] : void 0;\n    return \"function\" == typeof t ? function () {\n      for (var e = arguments.length, o = new Array(e), i = 0; i < e; i++) {\n        o[i] = arguments[i];\n      }\n\n      return t.apply(void 0, [n].concat(o, [r]));\n    } : t && U(t.url) ? function (e, t, n, r) {\n      return function (o, i, a, s, u, l, c) {\n        if (o) {\n          var f = r.chunkUploads,\n              d = f && o.size > r.chunkSize,\n              p = f && (d || r.chunkForce);\n          if (o instanceof Blob && p) return Et(e, t, n, o, i, a, s, u, l, c, r);\n\n          var E = t.ondata || function (e) {\n            return e;\n          },\n              _ = t.onload || function (e) {\n            return e;\n          },\n              T = t.onerror || function (e) {\n            return null;\n          },\n              I = \"function\" == typeof t.headers ? t.headers(o, i) || {} : Object.assign({}, t.headers),\n              v = Object.assign({}, t, {\n            headers: I\n          }),\n              m = new FormData();\n\n          H(i) && m.append(n, JSON.stringify(i)), (o instanceof Blob ? [{\n            name: null,\n            file: o\n          }] : o).forEach(function (e) {\n            m.append(n, e.file, null === e.name ? e.file.name : \"\" + e.name + e.file.name);\n          });\n          var h = rt(E(m), st(e, t.url), v);\n          return h.onload = function (e) {\n            a(ot(\"load\", e.status, _(e.response), e.getAllResponseHeaders()));\n          }, h.onerror = function (e) {\n            s(ot(\"error\", e.status, T(e.response) || e.statusText, e.getAllResponseHeaders()));\n          }, h.ontimeout = it(s), h.onprogress = u, h.onabort = l, h;\n        }\n      };\n    }(e, t, n, r) : null;\n  },\n      Tt = function Tt() {\n    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"\",\n        t = arguments.length > 1 ? arguments[1] : void 0;\n    if (\"function\" == typeof t) return t;\n    if (!t || !U(t.url)) return function (e, t) {\n      return t();\n    };\n\n    var n = t.onload || function (e) {\n      return e;\n    },\n        r = t.onerror || function (e) {\n      return null;\n    };\n\n    return function (o, i, a) {\n      var s = rt(o, e + t.url, t);\n      return s.onload = function (e) {\n        i(ot(\"load\", e.status, n(e.response), e.getAllResponseHeaders()));\n      }, s.onerror = function (e) {\n        a(ot(\"error\", e.status, r(e.response) || e.statusText, e.getAllResponseHeaders()));\n      }, s.ontimeout = it(a), s;\n    };\n  },\n      It = function It() {\n    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,\n        t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;\n    return e + Math.random() * (t - e);\n  },\n      vt = function vt(e, t) {\n    var n = {\n      complete: !1,\n      perceivedProgress: 0,\n      perceivedPerformanceUpdater: null,\n      progress: null,\n      timestamp: null,\n      perceivedDuration: 0,\n      duration: 0,\n      request: null,\n      response: null\n    },\n        r = t.allowMinimumUploadDuration,\n        o = function o() {\n      n.request && (n.perceivedPerformanceUpdater.clear(), n.request.abort && n.request.abort(), n.complete = !0);\n    },\n        i = r ? function () {\n      return n.progress ? Math.min(n.progress, n.perceivedProgress) : null;\n    } : function () {\n      return n.progress || null;\n    },\n        a = r ? function () {\n      return Math.min(n.duration, n.perceivedDuration);\n    } : function () {\n      return n.duration;\n    },\n        s = Object.assign({}, pe(), {\n      process: function process(t, o) {\n        var i = function i() {\n          0 !== n.duration && null !== n.progress && s.fire(\"progress\", s.getProgress());\n        },\n            a = function a() {\n          n.complete = !0, s.fire(\"load-perceived\", n.response.body);\n        };\n\n        s.fire(\"start\"), n.timestamp = Date.now(), n.perceivedPerformanceUpdater = function (e) {\n          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1e3,\n              n = (arguments.length > 2 && void 0 !== arguments[2] && arguments[2], arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 25),\n              r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 250,\n              o = null,\n              i = Date.now();\n          return t > 0 && function a() {\n            var s = Date.now() - i,\n                u = It(n, r);\n            s + u > t && (u = s + u - t);\n            var l = s / t;\n            l >= 1 || document.hidden ? e(1) : (e(l), o = setTimeout(a, u));\n          }(), {\n            clear: function clear() {\n              clearTimeout(o);\n            }\n          };\n        }(function (e) {\n          n.perceivedProgress = e, n.perceivedDuration = Date.now() - n.timestamp, i(), n.response && 1 === n.perceivedProgress && !n.complete && a();\n        }, r ? It(750, 1500) : 0), n.request = e(t, o, function (e) {\n          n.response = H(e) ? e : {\n            type: \"load\",\n            code: 200,\n            body: \"\" + e,\n            headers: {}\n          }, n.duration = Date.now() - n.timestamp, n.progress = 1, s.fire(\"load\", n.response.body), (!r || r && 1 === n.perceivedProgress) && a();\n        }, function (e) {\n          n.perceivedPerformanceUpdater.clear(), s.fire(\"error\", H(e) ? e : {\n            type: \"error\",\n            code: 0,\n            body: \"\" + e\n          });\n        }, function (e, t, r) {\n          n.duration = Date.now() - n.timestamp, n.progress = e ? t / r : null, i();\n        }, function () {\n          n.perceivedPerformanceUpdater.clear(), s.fire(\"abort\", n.response ? n.response.body : null);\n        }, function (e) {\n          s.fire(\"transfer\", e);\n        });\n      },\n      abort: o,\n      getProgress: i,\n      getDuration: a,\n      reset: function reset() {\n        o(), n.complete = !1, n.perceivedProgress = 0, n.progress = 0, n.timestamp = null, n.perceivedDuration = 0, n.duration = 0, n.request = null, n.response = null;\n      }\n    });\n\n    return s;\n  },\n      mt = function mt(e) {\n    return e.substr(0, e.lastIndexOf(\".\")) || e;\n  },\n      ht = function ht(e) {\n    return !!(e instanceof File || e instanceof Blob && e.name);\n  },\n      gt = function gt() {\n    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,\n        t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,\n        r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,\n        o = oe(),\n        i = {\n      archived: !1,\n      frozen: !1,\n      released: !1,\n      source: null,\n      file: r,\n      serverFileReference: t,\n      transferId: null,\n      processingAborted: !1,\n      status: t ? Ie.PROCESSING_COMPLETE : Ie.INIT,\n      activeLoader: null,\n      activeProcessor: null\n    },\n        a = null,\n        s = {},\n        u = function u(e) {\n      return i.status = e;\n    },\n        l = function l(e) {\n      if (!i.released && !i.frozen) {\n        for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {\n          n[r - 1] = arguments[r];\n        }\n\n        f.fire.apply(f, [e].concat(n));\n      }\n    },\n        c = function c(e, t, n) {\n      var r = e.split(\".\"),\n          o = r[0],\n          i = r.pop(),\n          a = s;\n      r.forEach(function (e) {\n        return a = a[e];\n      }), JSON.stringify(a[i]) !== JSON.stringify(t) && (a[i] = t, l(\"metadata-update\", {\n        key: o,\n        value: s[o],\n        silent: n\n      }));\n    },\n        f = Object.assign({\n      id: {\n        get: function get() {\n          return o;\n        }\n      },\n      origin: {\n        get: function get() {\n          return e;\n        },\n        set: function set(t) {\n          return e = t;\n        }\n      },\n      serverId: {\n        get: function get() {\n          return i.serverFileReference;\n        }\n      },\n      transferId: {\n        get: function get() {\n          return i.transferId;\n        }\n      },\n      status: {\n        get: function get() {\n          return i.status;\n        }\n      },\n      filename: {\n        get: function get() {\n          return i.file.name;\n        }\n      },\n      filenameWithoutExtension: {\n        get: function get() {\n          return mt(i.file.name);\n        }\n      },\n      fileExtension: {\n        get: function get() {\n          return je(i.file.name);\n        }\n      },\n      fileType: {\n        get: function get() {\n          return i.file.type;\n        }\n      },\n      fileSize: {\n        get: function get() {\n          return i.file.size;\n        }\n      },\n      file: {\n        get: function get() {\n          return i.file;\n        }\n      },\n      relativePath: {\n        get: function get() {\n          return i.file._relativePath;\n        }\n      },\n      source: {\n        get: function get() {\n          return i.source;\n        }\n      },\n      getMetadata: function getMetadata(e) {\n        return function e(t) {\n          if (!H(t)) return t;\n          var n = P(t) ? [] : {};\n\n          for (var r in t) {\n            if (t.hasOwnProperty(r)) {\n              var o = t[r];\n              n[r] = o && H(o) ? e(o) : o;\n            }\n          }\n\n          return n;\n        }(e ? s[e] : s);\n      },\n      setMetadata: function setMetadata(e, t, n) {\n        if (H(e)) {\n          var r = e;\n          return Object.keys(r).forEach(function (e) {\n            c(e, r[e], t);\n          }), e;\n        }\n\n        return c(e, t, n), t;\n      },\n      extend: function extend(e, t) {\n        return d[e] = t;\n      },\n      abortLoad: function abortLoad() {\n        i.activeLoader ? i.activeLoader.abort() : (u(Ie.INIT), l(\"load-abort\"));\n      },\n      retryLoad: function retryLoad() {\n        i.activeLoader && i.activeLoader.load();\n      },\n      requestProcessing: function requestProcessing() {\n        i.processingAborted = !1, u(Ie.PROCESSING_QUEUED);\n      },\n      abortProcessing: function abortProcessing() {\n        return new Promise(function (e) {\n          if (!i.activeProcessor) return i.processingAborted = !0, u(Ie.IDLE), l(\"process-abort\"), void e();\n          a = function a() {\n            e();\n          }, i.activeProcessor.abort();\n        });\n      },\n      load: function load(t, n, r) {\n        i.source = t, f.fireSync(\"init\"), i.file ? f.fireSync(\"load-skip\") : (i.file = function (e) {\n          var t = [e.name, e.size, e.type];\n          return e instanceof Blob || Ye(e) ? t[0] = e.name || Xe() : Ye(e) ? (t[1] = e.length, t[2] = Qe(e)) : U(e) && (t[0] = ke(e), t[1] = 0, t[2] = \"application/octet-stream\"), {\n            name: t[0],\n            size: t[1],\n            type: t[2]\n          };\n        }(t), n.on(\"init\", function () {\n          l(\"load-init\");\n        }), n.on(\"meta\", function (t) {\n          i.file.size = t.size, i.file.filename = t.filename, t.source && (e = ve.LIMBO, i.serverFileReference = t.source, i.status = Ie.PROCESSING_COMPLETE), l(\"load-meta\");\n        }), n.on(\"progress\", function (e) {\n          u(Ie.LOADING), l(\"load-progress\", e);\n        }), n.on(\"error\", function (e) {\n          u(Ie.LOAD_ERROR), l(\"load-request-error\", e);\n        }), n.on(\"abort\", function () {\n          u(Ie.INIT), l(\"load-abort\");\n        }), n.on(\"load\", function (t) {\n          i.activeLoader = null;\n\n          var n = function n(t) {\n            i.file = ht(t) ? t : i.file, e === ve.LIMBO && i.serverFileReference ? u(Ie.PROCESSING_COMPLETE) : u(Ie.IDLE), l(\"load\");\n          };\n\n          i.serverFileReference ? n(t) : r(t, n, function (e) {\n            i.file = t, l(\"load-meta\"), u(Ie.LOAD_ERROR), l(\"load-file-error\", e);\n          });\n        }), n.setSource(t), i.activeLoader = n, n.load());\n      },\n      process: function e(t, n) {\n        if (i.processingAborted) i.processingAborted = !1;else if (u(Ie.PROCESSING), a = null, i.file instanceof Blob) {\n          t.on(\"load\", function (e) {\n            i.transferId = null, i.serverFileReference = e;\n          }), t.on(\"transfer\", function (e) {\n            i.transferId = e;\n          }), t.on(\"load-perceived\", function (e) {\n            i.activeProcessor = null, i.transferId = null, i.serverFileReference = e, u(Ie.PROCESSING_COMPLETE), l(\"process-complete\", e);\n          }), t.on(\"start\", function () {\n            l(\"process-start\");\n          }), t.on(\"error\", function (e) {\n            i.activeProcessor = null, u(Ie.PROCESSING_ERROR), l(\"process-error\", e);\n          }), t.on(\"abort\", function (e) {\n            i.activeProcessor = null, i.serverFileReference = e, u(Ie.IDLE), l(\"process-abort\"), a && a();\n          }), t.on(\"progress\", function (e) {\n            l(\"process-progress\", e);\n          });\n          var r = console.error;\n          n(i.file, function (e) {\n            i.archived || t.process(e, Object.assign({}, s));\n          }, r), i.activeProcessor = t;\n        } else f.on(\"load\", function () {\n          e(t, n);\n        });\n      },\n      revert: function revert(e, t) {\n        return new Promise(function (n, r) {\n          var o = null !== i.serverFileReference ? i.serverFileReference : i.transferId;\n          null !== o ? (e(o, function () {\n            i.serverFileReference = null, i.transferId = null, n();\n          }, function (e) {\n            t ? (u(Ie.PROCESSING_REVERT_ERROR), l(\"process-revert-error\"), r(e)) : n();\n          }), u(Ie.IDLE), l(\"process-revert\")) : n();\n        });\n      }\n    }, pe(), {\n      freeze: function freeze() {\n        return i.frozen = !0;\n      },\n      release: function release() {\n        return i.released = !0;\n      },\n      released: {\n        get: function get() {\n          return i.released;\n        }\n      },\n      archive: function archive() {\n        return i.archived = !0;\n      },\n      archived: {\n        get: function get() {\n          return i.archived;\n        }\n      }\n    }),\n        d = n(f);\n\n    return d;\n  },\n      Rt = function Rt(e, t) {\n    var n = function (e, t) {\n      return M(t) ? 0 : U(t) ? e.findIndex(function (e) {\n        return e.id === t;\n      }) : -1;\n    }(e, t);\n\n    if (!(n < 0)) return e[n] || null;\n  },\n      Ot = function Ot(e, t, n, r, o, i) {\n    var a = rt(null, e, {\n      method: \"GET\",\n      responseType: \"blob\"\n    });\n    return a.onload = function (n) {\n      var r = n.getAllResponseHeaders(),\n          o = et(r).name || ke(e);\n      t(ot(\"load\", n.status, We(n.response, o), r));\n    }, a.onerror = function (e) {\n      n(ot(\"error\", e.status, e.statusText, e.getAllResponseHeaders()));\n    }, a.onheaders = function (e) {\n      i(ot(\"headers\", e.status, null, e.getAllResponseHeaders()));\n    }, a.ontimeout = it(n), a.onprogress = r, a.onabort = o, a;\n  },\n      yt = function yt(e) {\n    return 0 === e.indexOf(\"//\") && (e = location.protocol + e), e.toLowerCase().replace(\"blob:\", \"\").replace(/([a-z])?:\\/\\//, \"$1\").split(\"/\")[0];\n  },\n      Dt = function Dt(e) {\n    return function () {\n      return Y(e) ? e.apply(void 0, arguments) : e;\n    };\n  },\n      St = function St(e, t) {\n    clearTimeout(t.listUpdateTimeout), t.listUpdateTimeout = setTimeout(function () {\n      e(\"DID_UPDATE_ITEMS\", {\n        items: Pe(t.items)\n      });\n    }, 0);\n  },\n      At = function At(e) {\n    for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {\n      n[r - 1] = arguments[r];\n    }\n\n    return new Promise(function (t) {\n      if (!e) return t(!0);\n      var r = e.apply(void 0, n);\n      return null == r ? t(!0) : \"boolean\" == typeof r ? t(r) : void (\"function\" == typeof r.then && r.then(t));\n    });\n  },\n      Lt = function Lt(e, t) {\n    e.items.sort(function (e, n) {\n      return t(Te(e), Te(n));\n    });\n  },\n      bt = function bt(e, t) {\n    return function () {\n      var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n          r = n.query,\n          o = n.success,\n          i = void 0 === o ? function () {} : o,\n          a = n.failure,\n          s = void 0 === a ? function () {} : a,\n          u = se(n, [\"query\", \"success\", \"failure\"]),\n          l = Le(e.items, r);\n      l ? t(l, i, s, u || {}) : s({\n        error: ot(\"error\", 0, \"Item not found\"),\n        file: null\n      });\n    };\n  },\n      Pt = function Pt(e, t, n) {\n    return {\n      ABORT_ALL: function ABORT_ALL() {\n        Pe(n.items).forEach(function (e) {\n          e.freeze(), e.abortLoad(), e.abortProcessing();\n        });\n      },\n      DID_SET_FILES: function DID_SET_FILES(t) {\n        var r = t.value,\n            o = (void 0 === r ? [] : r).map(function (e) {\n          return {\n            source: e.source ? e.source : e,\n            options: e.options\n          };\n        }),\n            i = Pe(n.items);\n        i.forEach(function (t) {\n          o.find(function (e) {\n            return e.source === t.source || e.source === t.file;\n          }) || e(\"REMOVE_ITEM\", {\n            query: t,\n            remove: !1\n          });\n        }), i = Pe(n.items), o.forEach(function (t, n) {\n          i.find(function (e) {\n            return e.source === t.source || e.file === t.source;\n          }) || e(\"ADD_ITEM\", Object.assign({}, t, {\n            interactionMethod: re,\n            index: n\n          }));\n        });\n      },\n      DID_UPDATE_ITEM_METADATA: function DID_UPDATE_ITEM_METADATA(r) {\n        var o = r.id,\n            i = r.action,\n            a = r.change;\n        a.silent || (clearTimeout(n.itemUpdateTimeout), n.itemUpdateTimeout = setTimeout(function () {\n          var r = Rt(n.items, o);\n\n          if (t(\"IS_ASYNC\")) {\n            r.origin === ve.LOCAL && e(\"DID_LOAD_ITEM\", {\n              id: r.id,\n              error: null,\n              serverFileReference: r.source\n            });\n\n            var s,\n                u = function u() {\n              setTimeout(function () {\n                e(\"REQUEST_ITEM_PROCESSING\", {\n                  query: o\n                });\n              }, 32);\n            };\n\n            return r.status === Ie.PROCESSING_COMPLETE ? (s = n.options.instantUpload, void r.revert(Tt(n.options.server.url, n.options.server.revert), t(\"GET_FORCE_REVERT\")).then(s ? u : function () {})[\"catch\"](function () {})) : r.status === Ie.PROCESSING ? function (e) {\n              r.abortProcessing().then(e ? u : function () {});\n            }(n.options.instantUpload) : void (n.options.instantUpload && u());\n          }\n\n          Oe(\"SHOULD_PREPARE_OUTPUT\", !1, {\n            item: r,\n            query: t,\n            action: i,\n            change: a\n          }).then(function (n) {\n            var i = t(\"GET_BEFORE_PREPARE_FILE\");\n            i && (n = i(r, n)), n && e(\"REQUEST_PREPARE_OUTPUT\", {\n              query: o,\n              item: r,\n              success: function success(t) {\n                e(\"DID_PREPARE_OUTPUT\", {\n                  id: o,\n                  file: t\n                });\n              }\n            }, !0);\n          });\n        }, 0));\n      },\n      MOVE_ITEM: function MOVE_ITEM(e) {\n        var t = e.query,\n            r = e.index,\n            o = Le(n.items, t);\n\n        if (o) {\n          var i = n.items.indexOf(o);\n          i !== (r = xe(r, 0, n.items.length - 1)) && n.items.splice(r, 0, n.items.splice(i, 1)[0]);\n        }\n      },\n      SORT: function SORT(r) {\n        var o = r.compare;\n        Lt(n, o), e(\"DID_SORT_ITEMS\", {\n          items: t(\"GET_ACTIVE_ITEMS\")\n        });\n      },\n      ADD_ITEMS: function ADD_ITEMS(n) {\n        var r = n.items,\n            o = n.index,\n            i = n.interactionMethod,\n            a = n.success,\n            s = void 0 === a ? function () {} : a,\n            u = n.failure,\n            l = void 0 === u ? function () {} : u,\n            c = o;\n\n        if (-1 === o || void 0 === o) {\n          var f = t(\"GET_ITEM_INSERT_LOCATION\"),\n              d = t(\"GET_TOTAL_ITEMS\");\n          c = \"before\" === f ? 0 : d;\n        }\n\n        var p = t(\"GET_IGNORED_FILES\"),\n            E = r.filter(function (e) {\n          return ht(e) ? !p.includes(e.name.toLowerCase()) : !M(e);\n        }).map(function (t) {\n          return new Promise(function (n, r) {\n            e(\"ADD_ITEM\", {\n              interactionMethod: i,\n              source: t.source || t,\n              success: n,\n              failure: r,\n              index: c++,\n              options: t.options || {}\n            });\n          });\n        });\n        Promise.all(E).then(s)[\"catch\"](l);\n      },\n      ADD_ITEM: function ADD_ITEM(r) {\n        var o = r.source,\n            i = r.index,\n            a = void 0 === i ? -1 : i,\n            s = r.interactionMethod,\n            u = r.success,\n            l = void 0 === u ? function () {} : u,\n            c = r.failure,\n            f = void 0 === c ? function () {} : c,\n            d = r.options,\n            p = void 0 === d ? {} : d;\n        if (M(o)) f({\n          error: ot(\"error\", 0, \"No source\"),\n          file: null\n        });else if (!ht(o) || !n.options.ignoredFiles.includes(o.name.toLowerCase())) {\n          if (!function (e) {\n            var t = Pe(e.items).length;\n            if (!e.options.allowMultiple) return 0 === t;\n            var n = e.options.maxFiles;\n            return null === n || t < n;\n          }(n)) {\n            if (n.options.allowMultiple || !n.options.allowMultiple && !n.options.allowReplace) {\n              var E = ot(\"warning\", 0, \"Max files\");\n              return e(\"DID_THROW_MAX_FILES\", {\n                source: o,\n                error: E\n              }), void f({\n                error: E,\n                file: null\n              });\n            }\n\n            var _ = Pe(n.items)[0];\n\n            if (_.status === Ie.PROCESSING_COMPLETE || _.status === Ie.PROCESSING_REVERT_ERROR) {\n              var T = t(\"GET_FORCE_REVERT\");\n              if (_.revert(Tt(n.options.server.url, n.options.server.revert), T).then(function () {\n                T && e(\"ADD_ITEM\", {\n                  source: o,\n                  index: a,\n                  interactionMethod: s,\n                  success: l,\n                  failure: f,\n                  options: p\n                });\n              })[\"catch\"](function () {}), T) return;\n            }\n\n            e(\"REMOVE_ITEM\", {\n              query: _.id\n            });\n          }\n\n          var I = \"local\" === p.type ? ve.LOCAL : \"limbo\" === p.type ? ve.LIMBO : ve.INPUT,\n              v = gt(I, I === ve.INPUT ? null : o, p.file);\n          Object.keys(p.metadata || {}).forEach(function (e) {\n            v.setMetadata(e, p.metadata[e]);\n          }), ye(\"DID_CREATE_ITEM\", v, {\n            query: t,\n            dispatch: e\n          });\n          var m = t(\"GET_ITEM_INSERT_LOCATION\");\n          n.options.itemInsertLocationFreedom || (a = \"before\" === m ? -1 : n.items.length), function (e, t, n) {\n            M(t) || (void 0 === n ? e.push(t) : function (e, t, n) {\n              e.splice(t, 0, n);\n            }(e, n = xe(n, 0, e.length), t));\n          }(n.items, v, a), Y(m) && o && Lt(n, m);\n          var h = v.id;\n          v.on(\"init\", function () {\n            e(\"DID_INIT_ITEM\", {\n              id: h\n            });\n          }), v.on(\"load-init\", function () {\n            e(\"DID_START_ITEM_LOAD\", {\n              id: h\n            });\n          }), v.on(\"load-meta\", function () {\n            e(\"DID_UPDATE_ITEM_META\", {\n              id: h\n            });\n          }), v.on(\"load-progress\", function (t) {\n            e(\"DID_UPDATE_ITEM_LOAD_PROGRESS\", {\n              id: h,\n              progress: t\n            });\n          }), v.on(\"load-request-error\", function (t) {\n            var r = Dt(n.options.labelFileLoadError)(t);\n            if (t.code >= 400 && t.code < 500) return e(\"DID_THROW_ITEM_INVALID\", {\n              id: h,\n              error: t,\n              status: {\n                main: r,\n                sub: t.code + \" (\" + t.body + \")\"\n              }\n            }), void f({\n              error: t,\n              file: Te(v)\n            });\n            e(\"DID_THROW_ITEM_LOAD_ERROR\", {\n              id: h,\n              error: t,\n              status: {\n                main: r,\n                sub: n.options.labelTapToRetry\n              }\n            });\n          }), v.on(\"load-file-error\", function (t) {\n            e(\"DID_THROW_ITEM_INVALID\", {\n              id: h,\n              error: t.status,\n              status: t.status\n            }), f({\n              error: t.status,\n              file: Te(v)\n            });\n          }), v.on(\"load-abort\", function () {\n            e(\"REMOVE_ITEM\", {\n              query: h\n            });\n          }), v.on(\"load-skip\", function () {\n            e(\"COMPLETE_LOAD_ITEM\", {\n              query: h,\n              item: v,\n              data: {\n                source: o,\n                success: l\n              }\n            });\n          }), v.on(\"load\", function () {\n            var r = function r(_r2) {\n              _r2 ? (v.on(\"metadata-update\", function (t) {\n                e(\"DID_UPDATE_ITEM_METADATA\", {\n                  id: h,\n                  change: t\n                });\n              }), Oe(\"SHOULD_PREPARE_OUTPUT\", !1, {\n                item: v,\n                query: t\n              }).then(function (r) {\n                var i = t(\"GET_BEFORE_PREPARE_FILE\");\n                i && (r = i(v, r));\n\n                var a = function a() {\n                  e(\"COMPLETE_LOAD_ITEM\", {\n                    query: h,\n                    item: v,\n                    data: {\n                      source: o,\n                      success: l\n                    }\n                  }), St(e, n);\n                };\n\n                r ? e(\"REQUEST_PREPARE_OUTPUT\", {\n                  query: h,\n                  item: v,\n                  success: function success(t) {\n                    e(\"DID_PREPARE_OUTPUT\", {\n                      id: h,\n                      file: t\n                    }), a();\n                  }\n                }, !0) : a();\n              })) : e(\"REMOVE_ITEM\", {\n                query: h\n              });\n            };\n\n            Oe(\"DID_LOAD_ITEM\", v, {\n              query: t,\n              dispatch: e\n            }).then(function () {\n              At(t(\"GET_BEFORE_ADD_FILE\"), Te(v)).then(r);\n            })[\"catch\"](function (t) {\n              if (!t || !t.error || !t.status) return r(!1);\n              e(\"DID_THROW_ITEM_INVALID\", {\n                id: h,\n                error: t.error,\n                status: t.status\n              });\n            });\n          }), v.on(\"process-start\", function () {\n            e(\"DID_START_ITEM_PROCESSING\", {\n              id: h\n            });\n          }), v.on(\"process-progress\", function (t) {\n            e(\"DID_UPDATE_ITEM_PROCESS_PROGRESS\", {\n              id: h,\n              progress: t\n            });\n          }), v.on(\"process-error\", function (t) {\n            e(\"DID_THROW_ITEM_PROCESSING_ERROR\", {\n              id: h,\n              error: t,\n              status: {\n                main: Dt(n.options.labelFileProcessingError)(t),\n                sub: n.options.labelTapToRetry\n              }\n            });\n          }), v.on(\"process-revert-error\", function (t) {\n            e(\"DID_THROW_ITEM_PROCESSING_REVERT_ERROR\", {\n              id: h,\n              error: t,\n              status: {\n                main: Dt(n.options.labelFileProcessingRevertError)(t),\n                sub: n.options.labelTapToRetry\n              }\n            });\n          }), v.on(\"process-complete\", function (t) {\n            e(\"DID_COMPLETE_ITEM_PROCESSING\", {\n              id: h,\n              error: null,\n              serverFileReference: t\n            }), e(\"DID_DEFINE_VALUE\", {\n              id: h,\n              value: t\n            });\n          }), v.on(\"process-abort\", function () {\n            e(\"DID_ABORT_ITEM_PROCESSING\", {\n              id: h\n            });\n          }), v.on(\"process-revert\", function () {\n            e(\"DID_REVERT_ITEM_PROCESSING\", {\n              id: h\n            }), e(\"DID_DEFINE_VALUE\", {\n              id: h,\n              value: null\n            });\n          }), e(\"DID_ADD_ITEM\", {\n            id: h,\n            index: a,\n            interactionMethod: s\n          }), St(e, n);\n          var g = n.options.server || {},\n              R = g.url,\n              O = g.load,\n              y = g.restore,\n              D = g.fetch;\n          v.load(o, tt(I === ve.INPUT ? U(o) && function (e) {\n            return (e.indexOf(\":\") > -1 || e.indexOf(\"//\") > -1) && yt(location.href) !== yt(e);\n          }(o) && D ? ut(R, D) : Ot : ut(R, I === ve.LIMBO ? y : O)), function (e, n, r) {\n            Oe(\"LOAD_FILE\", e, {\n              query: t\n            }).then(n)[\"catch\"](r);\n          });\n        }\n      },\n      REQUEST_PREPARE_OUTPUT: function REQUEST_PREPARE_OUTPUT(e) {\n        var n = e.item,\n            r = e.success,\n            o = e.failure,\n            i = void 0 === o ? function () {} : o,\n            a = {\n          error: ot(\"error\", 0, \"Item not found\"),\n          file: null\n        };\n        if (n.archived) return i(a);\n        Oe(\"PREPARE_OUTPUT\", n.file, {\n          query: t,\n          item: n\n        }).then(function (e) {\n          Oe(\"COMPLETE_PREPARE_OUTPUT\", e, {\n            query: t,\n            item: n\n          }).then(function (e) {\n            if (n.archived) return i(a);\n            r(e);\n          });\n        });\n      },\n      COMPLETE_LOAD_ITEM: function COMPLETE_LOAD_ITEM(r) {\n        var o = r.item,\n            i = r.data,\n            a = i.success,\n            s = i.source,\n            u = t(\"GET_ITEM_INSERT_LOCATION\");\n        if (Y(u) && s && Lt(n, u), e(\"DID_LOAD_ITEM\", {\n          id: o.id,\n          error: null,\n          serverFileReference: o.origin === ve.INPUT ? null : s\n        }), a(Te(o)), o.origin !== ve.LOCAL) return o.origin === ve.LIMBO ? (e(\"DID_COMPLETE_ITEM_PROCESSING\", {\n          id: o.id,\n          error: null,\n          serverFileReference: s\n        }), void e(\"DID_DEFINE_VALUE\", {\n          id: o.id,\n          value: o.serverId || s\n        })) : void (t(\"IS_ASYNC\") && n.options.instantUpload && e(\"REQUEST_ITEM_PROCESSING\", {\n          query: o.id\n        }));\n        e(\"DID_LOAD_LOCAL_ITEM\", {\n          id: o.id\n        });\n      },\n      RETRY_ITEM_LOAD: bt(n, function (e) {\n        e.retryLoad();\n      }),\n      REQUEST_ITEM_PREPARE: bt(n, function (t, n, r) {\n        e(\"REQUEST_PREPARE_OUTPUT\", {\n          query: t.id,\n          item: t,\n          success: function success(r) {\n            e(\"DID_PREPARE_OUTPUT\", {\n              id: t.id,\n              file: r\n            }), n({\n              file: t,\n              output: r\n            });\n          },\n          failure: r\n        }, !0);\n      }),\n      REQUEST_ITEM_PROCESSING: bt(n, function (r, o, i) {\n        if (r.status === Ie.IDLE || r.status === Ie.PROCESSING_ERROR) r.status !== Ie.PROCESSING_QUEUED && (r.requestProcessing(), e(\"DID_REQUEST_ITEM_PROCESSING\", {\n          id: r.id\n        }), e(\"PROCESS_ITEM\", {\n          query: r,\n          success: o,\n          failure: i\n        }, !0));else {\n          var a = function a() {\n            return e(\"REQUEST_ITEM_PROCESSING\", {\n              query: r,\n              success: o,\n              failure: i\n            });\n          },\n              s = function s() {\n            return document.hidden ? a() : setTimeout(a, 32);\n          };\n\n          r.status === Ie.PROCESSING_COMPLETE || r.status === Ie.PROCESSING_REVERT_ERROR ? r.revert(Tt(n.options.server.url, n.options.server.revert), t(\"GET_FORCE_REVERT\")).then(s)[\"catch\"](function () {}) : r.status === Ie.PROCESSING && r.abortProcessing().then(s);\n        }\n      }),\n      PROCESS_ITEM: bt(n, function (r, o, i) {\n        var a = t(\"GET_MAX_PARALLEL_UPLOADS\");\n\n        if (t(\"GET_ITEMS_BY_STATUS\", Ie.PROCESSING).length !== a) {\n          if (r.status !== Ie.PROCESSING) {\n            var s = function t() {\n              var r = n.processingQueue.shift();\n\n              if (r) {\n                var o = r.id,\n                    i = r.success,\n                    a = r.failure,\n                    s = Le(n.items, o);\n                s && !s.archived ? e(\"PROCESS_ITEM\", {\n                  query: o,\n                  success: i,\n                  failure: a\n                }, !0) : t();\n              }\n            };\n\n            r.onOnce(\"process-complete\", function () {\n              o(Te(r)), s();\n              var i = n.options.server;\n\n              if (n.options.instantUpload && r.origin === ve.LOCAL && Y(i.remove)) {\n                var a = function a() {};\n\n                r.origin = ve.LIMBO, n.options.server.remove(r.source, a, a);\n              }\n\n              t(\"GET_ITEMS_BY_STATUS\", Ie.PROCESSING_COMPLETE).length === n.items.length && e(\"DID_COMPLETE_ITEM_PROCESSING_ALL\");\n            }), r.onOnce(\"process-error\", function (e) {\n              i({\n                error: e,\n                file: Te(r)\n              }), s();\n            });\n            var u = n.options;\n            r.process(vt(_t(u.server.url, u.server.process, u.name, {\n              chunkTransferId: r.transferId,\n              chunkServer: u.server.patch,\n              chunkUploads: u.chunkUploads,\n              chunkForce: u.chunkForce,\n              chunkSize: u.chunkSize,\n              chunkRetryDelays: u.chunkRetryDelays\n            }), {\n              allowMinimumUploadDuration: t(\"GET_ALLOW_MINIMUM_UPLOAD_DURATION\")\n            }), function (n, o, i) {\n              Oe(\"PREPARE_OUTPUT\", n, {\n                query: t,\n                item: r\n              }).then(function (t) {\n                e(\"DID_PREPARE_OUTPUT\", {\n                  id: r.id,\n                  file: t\n                }), o(t);\n              })[\"catch\"](i);\n            });\n          }\n        } else n.processingQueue.push({\n          id: r.id,\n          success: o,\n          failure: i\n        });\n      }),\n      RETRY_ITEM_PROCESSING: bt(n, function (t) {\n        e(\"REQUEST_ITEM_PROCESSING\", {\n          query: t\n        });\n      }),\n      REQUEST_REMOVE_ITEM: bt(n, function (n) {\n        At(t(\"GET_BEFORE_REMOVE_FILE\"), Te(n)).then(function (t) {\n          t && e(\"REMOVE_ITEM\", {\n            query: n\n          });\n        });\n      }),\n      RELEASE_ITEM: bt(n, function (e) {\n        e.release();\n      }),\n      REMOVE_ITEM: bt(n, function (r, o, i, a) {\n        var s = function s() {\n          var t = r.id;\n          Rt(n.items, t).archive(), e(\"DID_REMOVE_ITEM\", {\n            error: null,\n            id: t,\n            item: r\n          }), St(e, n), o(Te(r));\n        },\n            u = n.options.server;\n\n        r.origin === ve.LOCAL && u && Y(u.remove) && !1 !== a.remove ? (e(\"DID_START_ITEM_REMOVE\", {\n          id: r.id\n        }), u.remove(r.source, function () {\n          return s();\n        }, function (t) {\n          e(\"DID_THROW_ITEM_REMOVE_ERROR\", {\n            id: r.id,\n            error: ot(\"error\", 0, t, null),\n            status: {\n              main: Dt(n.options.labelFileRemoveError)(t),\n              sub: n.options.labelTapToRetry\n            }\n          });\n        })) : ((a.revert && r.origin !== ve.LOCAL && null !== r.serverId || n.options.chunkUploads && r.file.size > n.options.chunkSize || n.options.chunkUploads && n.options.chunkForce) && r.revert(Tt(n.options.server.url, n.options.server.revert), t(\"GET_FORCE_REVERT\")), s());\n      }),\n      ABORT_ITEM_LOAD: bt(n, function (e) {\n        e.abortLoad();\n      }),\n      ABORT_ITEM_PROCESSING: bt(n, function (t) {\n        t.serverId ? e(\"REVERT_ITEM_PROCESSING\", {\n          id: t.id\n        }) : t.abortProcessing().then(function () {\n          n.options.instantUpload && e(\"REMOVE_ITEM\", {\n            query: t.id\n          });\n        });\n      }),\n      REQUEST_REVERT_ITEM_PROCESSING: bt(n, function (r) {\n        if (n.options.instantUpload) {\n          var o = function o(t) {\n            t && e(\"REVERT_ITEM_PROCESSING\", {\n              query: r\n            });\n          },\n              i = t(\"GET_BEFORE_REMOVE_FILE\");\n\n          if (!i) return o(!0);\n          var a = i(Te(r));\n          return null == a ? o(!0) : \"boolean\" == typeof a ? o(a) : void (\"function\" == typeof a.then && a.then(o));\n        }\n\n        e(\"REVERT_ITEM_PROCESSING\", {\n          query: r\n        });\n      }),\n      REVERT_ITEM_PROCESSING: bt(n, function (r) {\n        r.revert(Tt(n.options.server.url, n.options.server.revert), t(\"GET_FORCE_REVERT\")).then(function () {\n          (n.options.instantUpload || function (e) {\n            return !ht(e.file);\n          }(r)) && e(\"REMOVE_ITEM\", {\n            query: r.id\n          });\n        })[\"catch\"](function () {});\n      }),\n      SET_OPTIONS: function SET_OPTIONS(t) {\n        var n = t.options,\n            r = Object.keys(n),\n            o = Mt.filter(function (e) {\n          return r.includes(e);\n        });\n        [].concat(ue(o), ue(Object.keys(n).filter(function (e) {\n          return !o.includes(e);\n        }))).forEach(function (t) {\n          e(\"SET_\" + Z(t, \"_\").toUpperCase(), {\n            value: n[t]\n          });\n        });\n      }\n    };\n  },\n      Mt = [\"server\"],\n      wt = function wt(e) {\n    return e;\n  },\n      Ct = function Ct(e) {\n    return document.createElement(e);\n  },\n      Nt = function Nt(e, t) {\n    var n = e.childNodes[0];\n    n ? t !== n.nodeValue && (n.nodeValue = t) : (n = document.createTextNode(t), e.appendChild(n));\n  },\n      Gt = function Gt(e, t, n, r) {\n    var o = (r % 360 - 90) * Math.PI / 180;\n    return {\n      x: e + n * Math.cos(o),\n      y: t + n * Math.sin(o)\n    };\n  },\n      Ut = function Ut(e, t, n, r, o) {\n    var i = 1;\n    return o > r && o - r <= .5 && (i = 0), r > o && r - o >= .5 && (i = 0), function (e, t, n, r, o, i) {\n      var a = Gt(e, t, n, o),\n          s = Gt(e, t, n, r);\n      return [\"M\", a.x, a.y, \"A\", n, n, 0, i, 0, s.x, s.y].join(\" \");\n    }(e, t, n, 360 * Math.min(.9999, r), 360 * Math.min(.9999, o), i);\n  },\n      Bt = S({\n    tag: \"div\",\n    name: \"progress-indicator\",\n    ignoreRectUpdate: !0,\n    ignoreRect: !0,\n    create: function create(e) {\n      var t = e.root,\n          n = e.props;\n      n.spin = !1, n.progress = 0, n.opacity = 0;\n      var r = a(\"svg\");\n      t.ref.path = a(\"path\", {\n        \"stroke-width\": 2,\n        \"stroke-linecap\": \"round\"\n      }), r.appendChild(t.ref.path), t.ref.svg = r, t.appendChild(r);\n    },\n    write: function write(e) {\n      var t = e.root,\n          n = e.props;\n\n      if (0 !== n.opacity) {\n        n.align && (t.element.dataset.align = n.align);\n        var o = parseInt(r(t.ref.path, \"stroke-width\"), 10),\n            i = .5 * t.rect.element.width,\n            a = 0,\n            s = 0;\n        n.spin ? (a = 0, s = .5) : (a = 0, s = n.progress);\n        var u = Ut(i, i, i - o, a, s);\n        r(t.ref.path, \"d\", u), r(t.ref.path, \"stroke-opacity\", n.spin || n.progress > 0 ? 1 : 0);\n      }\n    },\n    mixins: {\n      apis: [\"progress\", \"spin\", \"align\"],\n      styles: [\"opacity\"],\n      animations: {\n        opacity: {\n          type: \"tween\",\n          duration: 500\n        },\n        progress: {\n          type: \"spring\",\n          stiffness: .95,\n          damping: .65,\n          mass: 10\n        }\n      }\n    }\n  }),\n      Ft = S({\n    tag: \"button\",\n    attributes: {\n      type: \"button\"\n    },\n    ignoreRect: !0,\n    ignoreRectUpdate: !0,\n    name: \"file-action-button\",\n    mixins: {\n      apis: [\"label\"],\n      styles: [\"translateX\", \"translateY\", \"scaleX\", \"scaleY\", \"opacity\"],\n      animations: {\n        scaleX: \"spring\",\n        scaleY: \"spring\",\n        translateX: \"spring\",\n        translateY: \"spring\",\n        opacity: {\n          type: \"tween\",\n          duration: 250\n        }\n      },\n      listeners: !0\n    },\n    create: function create(e) {\n      var t = e.root,\n          n = e.props;\n      t.element.innerHTML = (n.icon || \"\") + \"<span>\" + n.label + \"</span>\", n.isDisabled = !1;\n    },\n    write: function write(e) {\n      var t = e.root,\n          n = e.props,\n          o = n.isDisabled,\n          i = t.query(\"GET_DISABLED\") || 0 === n.opacity;\n      i && !o ? (n.isDisabled = !0, r(t.element, \"disabled\", \"disabled\")) : !i && o && (n.isDisabled = !1, t.element.removeAttribute(\"disabled\"));\n    }\n  }),\n      qt = function qt(e) {\n    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \".\",\n        n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1e3,\n        r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {},\n        o = r.labelBytes,\n        i = void 0 === o ? \"bytes\" : o,\n        a = r.labelKilobytes,\n        s = void 0 === a ? \"KB\" : a,\n        u = r.labelMegabytes,\n        l = void 0 === u ? \"MB\" : u,\n        c = r.labelGigabytes,\n        f = void 0 === c ? \"GB\" : c,\n        d = n,\n        p = n * n,\n        E = n * n * n;\n    return (e = Math.round(Math.abs(e))) < d ? e + \" \" + i : e < p ? Math.floor(e / d) + \" \" + s : e < E ? Vt(e / p, 1, t) + \" \" + l : Vt(e / E, 2, t) + \" \" + f;\n  },\n      Vt = function Vt(e, t, n) {\n    return e.toFixed(t).split(\".\").filter(function (e) {\n      return \"0\" !== e;\n    }).join(n);\n  },\n      xt = function xt(e) {\n    var t = e.root,\n        n = e.props;\n    Nt(t.ref.fileSize, qt(t.query(\"GET_ITEM_SIZE\", n.id), \".\", t.query(\"GET_FILE_SIZE_BASE\"), t.query(\"GET_FILE_SIZE_LABELS\", t.query))), Nt(t.ref.fileName, wt(t.query(\"GET_ITEM_NAME\", n.id)));\n  },\n      Yt = function Yt(e) {\n    var t = e.root,\n        n = e.props;\n    V(t.query(\"GET_ITEM_SIZE\", n.id)) ? xt({\n      root: t,\n      props: n\n    }) : Nt(t.ref.fileSize, t.query(\"GET_LABEL_FILE_SIZE_NOT_AVAILABLE\"));\n  },\n      kt = S({\n    name: \"file-info\",\n    ignoreRect: !0,\n    ignoreRectUpdate: !0,\n    write: A({\n      DID_LOAD_ITEM: xt,\n      DID_UPDATE_ITEM_META: xt,\n      DID_THROW_ITEM_LOAD_ERROR: Yt,\n      DID_THROW_ITEM_INVALID: Yt\n    }),\n    didCreateView: function didCreateView(e) {\n      ye(\"CREATE_VIEW\", Object.assign({}, e, {\n        view: e\n      }));\n    },\n    create: function create(e) {\n      var t = e.root,\n          n = e.props,\n          o = Ct(\"span\");\n      o.className = \"filepond--file-info-main\", r(o, \"aria-hidden\", \"true\"), t.appendChild(o), t.ref.fileName = o;\n      var i = Ct(\"span\");\n      i.className = \"filepond--file-info-sub\", t.appendChild(i), t.ref.fileSize = i, Nt(i, t.query(\"GET_LABEL_FILE_WAITING_FOR_SIZE\")), Nt(o, wt(t.query(\"GET_ITEM_NAME\", n.id)));\n    },\n    mixins: {\n      styles: [\"translateX\", \"translateY\"],\n      animations: {\n        translateX: \"spring\",\n        translateY: \"spring\"\n      }\n    }\n  }),\n      jt = function jt(e) {\n    return Math.round(100 * e);\n  },\n      Ht = function Ht(e) {\n    var t = e.root,\n        n = e.action,\n        r = null === n.progress ? t.query(\"GET_LABEL_FILE_LOADING\") : t.query(\"GET_LABEL_FILE_LOADING\") + \" \" + jt(n.progress) + \"%\";\n    Nt(t.ref.main, r), Nt(t.ref.sub, t.query(\"GET_LABEL_TAP_TO_CANCEL\"));\n  },\n      Xt = function Xt(e) {\n    var t = e.root;\n    Nt(t.ref.main, \"\"), Nt(t.ref.sub, \"\");\n  },\n      Wt = function Wt(e) {\n    var t = e.root,\n        n = e.action;\n    Nt(t.ref.main, n.status.main), Nt(t.ref.sub, n.status.sub);\n  },\n      zt = S({\n    name: \"file-status\",\n    ignoreRect: !0,\n    ignoreRectUpdate: !0,\n    write: A({\n      DID_LOAD_ITEM: Xt,\n      DID_REVERT_ITEM_PROCESSING: Xt,\n      DID_REQUEST_ITEM_PROCESSING: function DID_REQUEST_ITEM_PROCESSING(e) {\n        var t = e.root;\n        Nt(t.ref.main, t.query(\"GET_LABEL_FILE_PROCESSING\")), Nt(t.ref.sub, t.query(\"GET_LABEL_TAP_TO_CANCEL\"));\n      },\n      DID_ABORT_ITEM_PROCESSING: function DID_ABORT_ITEM_PROCESSING(e) {\n        var t = e.root;\n        Nt(t.ref.main, t.query(\"GET_LABEL_FILE_PROCESSING_ABORTED\")), Nt(t.ref.sub, t.query(\"GET_LABEL_TAP_TO_RETRY\"));\n      },\n      DID_COMPLETE_ITEM_PROCESSING: function DID_COMPLETE_ITEM_PROCESSING(e) {\n        var t = e.root;\n        Nt(t.ref.main, t.query(\"GET_LABEL_FILE_PROCESSING_COMPLETE\")), Nt(t.ref.sub, t.query(\"GET_LABEL_TAP_TO_UNDO\"));\n      },\n      DID_UPDATE_ITEM_PROCESS_PROGRESS: function DID_UPDATE_ITEM_PROCESS_PROGRESS(e) {\n        var t = e.root,\n            n = e.action,\n            r = null === n.progress ? t.query(\"GET_LABEL_FILE_PROCESSING\") : t.query(\"GET_LABEL_FILE_PROCESSING\") + \" \" + jt(n.progress) + \"%\";\n        Nt(t.ref.main, r), Nt(t.ref.sub, t.query(\"GET_LABEL_TAP_TO_CANCEL\"));\n      },\n      DID_UPDATE_ITEM_LOAD_PROGRESS: Ht,\n      DID_THROW_ITEM_LOAD_ERROR: Wt,\n      DID_THROW_ITEM_INVALID: Wt,\n      DID_THROW_ITEM_PROCESSING_ERROR: Wt,\n      DID_THROW_ITEM_PROCESSING_REVERT_ERROR: Wt,\n      DID_THROW_ITEM_REMOVE_ERROR: Wt\n    }),\n    didCreateView: function didCreateView(e) {\n      ye(\"CREATE_VIEW\", Object.assign({}, e, {\n        view: e\n      }));\n    },\n    create: function create(e) {\n      var t = e.root,\n          n = Ct(\"span\");\n      n.className = \"filepond--file-status-main\", t.appendChild(n), t.ref.main = n;\n      var r = Ct(\"span\");\n      r.className = \"filepond--file-status-sub\", t.appendChild(r), t.ref.sub = r, Ht({\n        root: t,\n        action: {\n          progress: null\n        }\n      });\n    },\n    mixins: {\n      styles: [\"translateX\", \"translateY\", \"opacity\"],\n      animations: {\n        opacity: {\n          type: \"tween\",\n          duration: 250\n        },\n        translateX: \"spring\",\n        translateY: \"spring\"\n      }\n    }\n  }),\n      Qt = {\n    AbortItemLoad: {\n      label: \"GET_LABEL_BUTTON_ABORT_ITEM_LOAD\",\n      action: \"ABORT_ITEM_LOAD\",\n      className: \"filepond--action-abort-item-load\",\n      align: \"LOAD_INDICATOR_POSITION\"\n    },\n    RetryItemLoad: {\n      label: \"GET_LABEL_BUTTON_RETRY_ITEM_LOAD\",\n      action: \"RETRY_ITEM_LOAD\",\n      icon: \"GET_ICON_RETRY\",\n      className: \"filepond--action-retry-item-load\",\n      align: \"BUTTON_PROCESS_ITEM_POSITION\"\n    },\n    RemoveItem: {\n      label: \"GET_LABEL_BUTTON_REMOVE_ITEM\",\n      action: \"REQUEST_REMOVE_ITEM\",\n      icon: \"GET_ICON_REMOVE\",\n      className: \"filepond--action-remove-item\",\n      align: \"BUTTON_REMOVE_ITEM_POSITION\"\n    },\n    ProcessItem: {\n      label: \"GET_LABEL_BUTTON_PROCESS_ITEM\",\n      action: \"REQUEST_ITEM_PROCESSING\",\n      icon: \"GET_ICON_PROCESS\",\n      className: \"filepond--action-process-item\",\n      align: \"BUTTON_PROCESS_ITEM_POSITION\"\n    },\n    AbortItemProcessing: {\n      label: \"GET_LABEL_BUTTON_ABORT_ITEM_PROCESSING\",\n      action: \"ABORT_ITEM_PROCESSING\",\n      className: \"filepond--action-abort-item-processing\",\n      align: \"BUTTON_PROCESS_ITEM_POSITION\"\n    },\n    RetryItemProcessing: {\n      label: \"GET_LABEL_BUTTON_RETRY_ITEM_PROCESSING\",\n      action: \"RETRY_ITEM_PROCESSING\",\n      icon: \"GET_ICON_RETRY\",\n      className: \"filepond--action-retry-item-processing\",\n      align: \"BUTTON_PROCESS_ITEM_POSITION\"\n    },\n    RevertItemProcessing: {\n      label: \"GET_LABEL_BUTTON_UNDO_ITEM_PROCESSING\",\n      action: \"REQUEST_REVERT_ITEM_PROCESSING\",\n      icon: \"GET_ICON_UNDO\",\n      className: \"filepond--action-revert-item-processing\",\n      align: \"BUTTON_PROCESS_ITEM_POSITION\"\n    }\n  },\n      Zt = [];\n\n  t(Qt, function (e) {\n    Zt.push(e);\n  });\n\n  var Kt,\n      $t = function $t(e) {\n    if (\"right\" === nn(e)) return 0;\n    var t = e.ref.buttonRemoveItem.rect.element;\n    return t.hidden ? null : t.width + t.left;\n  },\n      Jt = function Jt(e) {\n    return e.ref.buttonAbortItemLoad.rect.element.width;\n  },\n      en = function en(e) {\n    return Math.floor(e.ref.buttonRemoveItem.rect.element.height / 4);\n  },\n      tn = function tn(e) {\n    return Math.floor(e.ref.buttonRemoveItem.rect.element.left / 2);\n  },\n      nn = function nn(e) {\n    return e.query(\"GET_STYLE_BUTTON_REMOVE_ITEM_POSITION\");\n  },\n      rn = {\n    buttonAbortItemLoad: {\n      opacity: 0\n    },\n    buttonRetryItemLoad: {\n      opacity: 0\n    },\n    buttonRemoveItem: {\n      opacity: 0\n    },\n    buttonProcessItem: {\n      opacity: 0\n    },\n    buttonAbortItemProcessing: {\n      opacity: 0\n    },\n    buttonRetryItemProcessing: {\n      opacity: 0\n    },\n    buttonRevertItemProcessing: {\n      opacity: 0\n    },\n    loadProgressIndicator: {\n      opacity: 0,\n      align: function align(e) {\n        return e.query(\"GET_STYLE_LOAD_INDICATOR_POSITION\");\n      }\n    },\n    processProgressIndicator: {\n      opacity: 0,\n      align: function align(e) {\n        return e.query(\"GET_STYLE_PROGRESS_INDICATOR_POSITION\");\n      }\n    },\n    processingCompleteIndicator: {\n      opacity: 0,\n      scaleX: .75,\n      scaleY: .75\n    },\n    info: {\n      translateX: 0,\n      translateY: 0,\n      opacity: 0\n    },\n    status: {\n      translateX: 0,\n      translateY: 0,\n      opacity: 0\n    }\n  },\n      on = {\n    buttonRemoveItem: {\n      opacity: 1\n    },\n    buttonProcessItem: {\n      opacity: 1\n    },\n    info: {\n      translateX: $t\n    },\n    status: {\n      translateX: $t\n    }\n  },\n      an = {\n    buttonAbortItemProcessing: {\n      opacity: 1\n    },\n    processProgressIndicator: {\n      opacity: 1\n    },\n    status: {\n      opacity: 1\n    }\n  },\n      sn = {\n    DID_THROW_ITEM_INVALID: {\n      buttonRemoveItem: {\n        opacity: 1\n      },\n      info: {\n        translateX: $t\n      },\n      status: {\n        translateX: $t,\n        opacity: 1\n      }\n    },\n    DID_START_ITEM_LOAD: {\n      buttonAbortItemLoad: {\n        opacity: 1\n      },\n      loadProgressIndicator: {\n        opacity: 1\n      },\n      status: {\n        opacity: 1\n      }\n    },\n    DID_THROW_ITEM_LOAD_ERROR: {\n      buttonRetryItemLoad: {\n        opacity: 1\n      },\n      buttonRemoveItem: {\n        opacity: 1\n      },\n      info: {\n        translateX: $t\n      },\n      status: {\n        opacity: 1\n      }\n    },\n    DID_START_ITEM_REMOVE: {\n      processProgressIndicator: {\n        opacity: 1,\n        align: nn\n      },\n      info: {\n        translateX: $t\n      },\n      status: {\n        opacity: 0\n      }\n    },\n    DID_THROW_ITEM_REMOVE_ERROR: {\n      processProgressIndicator: {\n        opacity: 0,\n        align: nn\n      },\n      buttonRemoveItem: {\n        opacity: 1\n      },\n      info: {\n        translateX: $t\n      },\n      status: {\n        opacity: 1,\n        translateX: $t\n      }\n    },\n    DID_LOAD_ITEM: on,\n    DID_LOAD_LOCAL_ITEM: {\n      buttonRemoveItem: {\n        opacity: 1\n      },\n      info: {\n        translateX: $t\n      },\n      status: {\n        translateX: $t\n      }\n    },\n    DID_START_ITEM_PROCESSING: an,\n    DID_REQUEST_ITEM_PROCESSING: an,\n    DID_UPDATE_ITEM_PROCESS_PROGRESS: an,\n    DID_COMPLETE_ITEM_PROCESSING: {\n      buttonRevertItemProcessing: {\n        opacity: 1\n      },\n      info: {\n        opacity: 1\n      },\n      status: {\n        opacity: 1\n      }\n    },\n    DID_THROW_ITEM_PROCESSING_ERROR: {\n      buttonRemoveItem: {\n        opacity: 1\n      },\n      buttonRetryItemProcessing: {\n        opacity: 1\n      },\n      status: {\n        opacity: 1\n      },\n      info: {\n        translateX: $t\n      }\n    },\n    DID_THROW_ITEM_PROCESSING_REVERT_ERROR: {\n      buttonRevertItemProcessing: {\n        opacity: 1\n      },\n      status: {\n        opacity: 1\n      },\n      info: {\n        opacity: 1\n      }\n    },\n    DID_ABORT_ITEM_PROCESSING: {\n      buttonRemoveItem: {\n        opacity: 1\n      },\n      buttonProcessItem: {\n        opacity: 1\n      },\n      info: {\n        translateX: $t\n      },\n      status: {\n        opacity: 1\n      }\n    },\n    DID_REVERT_ITEM_PROCESSING: on\n  },\n      un = S({\n    create: function create(e) {\n      var t = e.root;\n      t.element.innerHTML = t.query(\"GET_ICON_DONE\");\n    },\n    name: \"processing-complete-indicator\",\n    ignoreRect: !0,\n    mixins: {\n      styles: [\"scaleX\", \"scaleY\", \"opacity\"],\n      animations: {\n        scaleX: \"spring\",\n        scaleY: \"spring\",\n        opacity: {\n          type: \"tween\",\n          duration: 250\n        }\n      }\n    }\n  }),\n      ln = A({\n    DID_SET_LABEL_BUTTON_ABORT_ITEM_PROCESSING: function DID_SET_LABEL_BUTTON_ABORT_ITEM_PROCESSING(e) {\n      var t = e.root,\n          n = e.action;\n      t.ref.buttonAbortItemProcessing.label = n.value;\n    },\n    DID_SET_LABEL_BUTTON_ABORT_ITEM_LOAD: function DID_SET_LABEL_BUTTON_ABORT_ITEM_LOAD(e) {\n      var t = e.root,\n          n = e.action;\n      t.ref.buttonAbortItemLoad.label = n.value;\n    },\n    DID_SET_LABEL_BUTTON_ABORT_ITEM_REMOVAL: function DID_SET_LABEL_BUTTON_ABORT_ITEM_REMOVAL(e) {\n      var t = e.root,\n          n = e.action;\n      t.ref.buttonAbortItemRemoval.label = n.value;\n    },\n    DID_REQUEST_ITEM_PROCESSING: function DID_REQUEST_ITEM_PROCESSING(e) {\n      var t = e.root;\n      t.ref.processProgressIndicator.spin = !0, t.ref.processProgressIndicator.progress = 0;\n    },\n    DID_START_ITEM_LOAD: function DID_START_ITEM_LOAD(e) {\n      var t = e.root;\n      t.ref.loadProgressIndicator.spin = !0, t.ref.loadProgressIndicator.progress = 0;\n    },\n    DID_START_ITEM_REMOVE: function DID_START_ITEM_REMOVE(e) {\n      var t = e.root;\n      t.ref.processProgressIndicator.spin = !0, t.ref.processProgressIndicator.progress = 0;\n    },\n    DID_UPDATE_ITEM_LOAD_PROGRESS: function DID_UPDATE_ITEM_LOAD_PROGRESS(e) {\n      var t = e.root,\n          n = e.action;\n      t.ref.loadProgressIndicator.spin = !1, t.ref.loadProgressIndicator.progress = n.progress;\n    },\n    DID_UPDATE_ITEM_PROCESS_PROGRESS: function DID_UPDATE_ITEM_PROCESS_PROGRESS(e) {\n      var t = e.root,\n          n = e.action;\n      t.ref.processProgressIndicator.spin = !1, t.ref.processProgressIndicator.progress = n.progress;\n    }\n  }),\n      cn = S({\n    create: function create(e) {\n      var n,\n          r = e.root,\n          o = e.props,\n          i = Object.keys(Qt).reduce(function (e, t) {\n        return e[t] = Object.assign({}, Qt[t]), e;\n      }, {}),\n          a = o.id,\n          s = r.query(\"GET_ALLOW_REVERT\"),\n          u = r.query(\"GET_ALLOW_REMOVE\"),\n          l = r.query(\"GET_ALLOW_PROCESS\"),\n          c = r.query(\"GET_INSTANT_UPLOAD\"),\n          f = r.query(\"IS_ASYNC\"),\n          d = r.query(\"GET_STYLE_BUTTON_REMOVE_ITEM_ALIGN\");\n      f ? l && !s ? n = function n(e) {\n        return !/RevertItemProcessing/.test(e);\n      } : !l && s ? n = function n(e) {\n        return !/ProcessItem|RetryItemProcessing|AbortItemProcessing/.test(e);\n      } : l || s || (n = function n(e) {\n        return !/Process/.test(e);\n      }) : n = function n(e) {\n        return !/Process/.test(e);\n      };\n      var p = n ? Zt.filter(n) : Zt.concat();\n\n      if (c && s && (i.RevertItemProcessing.label = \"GET_LABEL_BUTTON_REMOVE_ITEM\", i.RevertItemProcessing.icon = \"GET_ICON_REMOVE\"), f && !s) {\n        var E = sn.DID_COMPLETE_ITEM_PROCESSING;\n        E.info.translateX = tn, E.info.translateY = en, E.status.translateY = en, E.processingCompleteIndicator = {\n          opacity: 1,\n          scaleX: 1,\n          scaleY: 1\n        };\n      }\n\n      if (f && !l && ([\"DID_START_ITEM_PROCESSING\", \"DID_REQUEST_ITEM_PROCESSING\", \"DID_UPDATE_ITEM_PROCESS_PROGRESS\", \"DID_THROW_ITEM_PROCESSING_ERROR\"].forEach(function (e) {\n        sn[e].status.translateY = en;\n      }), sn.DID_THROW_ITEM_PROCESSING_ERROR.status.translateX = Jt), d && s) {\n        i.RevertItemProcessing.align = \"BUTTON_REMOVE_ITEM_POSITION\";\n        var _ = sn.DID_COMPLETE_ITEM_PROCESSING;\n        _.info.translateX = $t, _.status.translateY = en, _.processingCompleteIndicator = {\n          opacity: 1,\n          scaleX: 1,\n          scaleY: 1\n        };\n      }\n\n      u || (i.RemoveItem.disabled = !0), t(i, function (e, t) {\n        var n = r.createChildView(Ft, {\n          label: r.query(t.label),\n          icon: r.query(t.icon),\n          opacity: 0\n        });\n        p.includes(e) && r.appendChildView(n), t.disabled && (n.element.setAttribute(\"disabled\", \"disabled\"), n.element.setAttribute(\"hidden\", \"hidden\")), n.element.dataset.align = r.query(\"GET_STYLE_\" + t.align), n.element.classList.add(t.className), n.on(\"click\", function (e) {\n          e.stopPropagation(), t.disabled || r.dispatch(t.action, {\n            query: a\n          });\n        }), r.ref[\"button\" + e] = n;\n      }), r.ref.processingCompleteIndicator = r.appendChildView(r.createChildView(un)), r.ref.processingCompleteIndicator.element.dataset.align = r.query(\"GET_STYLE_BUTTON_PROCESS_ITEM_POSITION\"), r.ref.info = r.appendChildView(r.createChildView(kt, {\n        id: a\n      })), r.ref.status = r.appendChildView(r.createChildView(zt, {\n        id: a\n      }));\n      var T = r.appendChildView(r.createChildView(Bt, {\n        opacity: 0,\n        align: r.query(\"GET_STYLE_LOAD_INDICATOR_POSITION\")\n      }));\n      T.element.classList.add(\"filepond--load-indicator\"), r.ref.loadProgressIndicator = T;\n      var I = r.appendChildView(r.createChildView(Bt, {\n        opacity: 0,\n        align: r.query(\"GET_STYLE_PROGRESS_INDICATOR_POSITION\")\n      }));\n      I.element.classList.add(\"filepond--process-indicator\"), r.ref.processProgressIndicator = I, r.ref.activeStyles = [];\n    },\n    write: function write(e) {\n      var n = e.root,\n          r = e.actions,\n          o = e.props;\n      ln({\n        root: n,\n        actions: r,\n        props: o\n      });\n      var i = r.concat().filter(function (e) {\n        return /^DID_/.test(e.type);\n      }).reverse().find(function (e) {\n        return sn[e.type];\n      });\n\n      if (i) {\n        n.ref.activeStyles = [];\n        var a = sn[i.type];\n        t(rn, function (e, r) {\n          var o = n.ref[e];\n          t(r, function (t, r) {\n            var i = a[e] && void 0 !== a[e][t] ? a[e][t] : r;\n            n.ref.activeStyles.push({\n              control: o,\n              key: t,\n              value: i\n            });\n          });\n        });\n      }\n\n      n.ref.activeStyles.forEach(function (e) {\n        var t = e.control,\n            r = e.key,\n            o = e.value;\n        t[r] = \"function\" == typeof o ? o(n) : o;\n      });\n    },\n    didCreateView: function didCreateView(e) {\n      ye(\"CREATE_VIEW\", Object.assign({}, e, {\n        view: e\n      }));\n    },\n    name: \"file\"\n  }),\n      fn = S({\n    create: function create(e) {\n      var t = e.root,\n          n = e.props;\n      t.ref.fileName = Ct(\"legend\"), t.appendChild(t.ref.fileName), t.ref.file = t.appendChildView(t.createChildView(cn, {\n        id: n.id\n      })), t.ref.data = !1;\n    },\n    ignoreRect: !0,\n    write: A({\n      DID_LOAD_ITEM: function DID_LOAD_ITEM(e) {\n        var t = e.root,\n            n = e.props;\n        Nt(t.ref.fileName, wt(t.query(\"GET_ITEM_NAME\", n.id)));\n      }\n    }),\n    didCreateView: function didCreateView(e) {\n      ye(\"CREATE_VIEW\", Object.assign({}, e, {\n        view: e\n      }));\n    },\n    tag: \"fieldset\",\n    name: \"file-wrapper\"\n  }),\n      dn = {\n    type: \"spring\",\n    damping: .6,\n    mass: 7\n  },\n      pn = function pn(e, t, n) {\n    var r = S({\n      name: \"panel-\" + t.name + \" filepond--\" + n,\n      mixins: t.mixins,\n      ignoreRectUpdate: !0\n    }),\n        o = e.createChildView(r, t.props);\n    e.ref[t.name] = e.appendChildView(o);\n  },\n      En = S({\n    name: \"panel\",\n    read: function read(e) {\n      var t = e.root;\n      return e.props.heightCurrent = t.ref.bottom.translateY;\n    },\n    write: function write(e) {\n      var t = e.root,\n          n = e.props;\n\n      if (null !== t.ref.scalable && n.scalable === t.ref.scalable || (t.ref.scalable = !N(n.scalable) || n.scalable, t.element.dataset.scalable = t.ref.scalable), n.height) {\n        var r = t.ref.top.rect.element,\n            o = t.ref.bottom.rect.element,\n            i = Math.max(r.height + o.height, n.height);\n        t.ref.center.translateY = r.height, t.ref.center.scaleY = (i - r.height - o.height) / 100, t.ref.bottom.translateY = i - o.height;\n      }\n    },\n    create: function create(e) {\n      var t = e.root,\n          n = e.props;\n      [{\n        name: \"top\"\n      }, {\n        name: \"center\",\n        props: {\n          translateY: null,\n          scaleY: null\n        },\n        mixins: {\n          animations: {\n            scaleY: dn\n          },\n          styles: [\"translateY\", \"scaleY\"]\n        }\n      }, {\n        name: \"bottom\",\n        props: {\n          translateY: null\n        },\n        mixins: {\n          animations: {\n            translateY: dn\n          },\n          styles: [\"translateY\"]\n        }\n      }].forEach(function (e) {\n        pn(t, e, n.name);\n      }), t.element.classList.add(\"filepond--\" + n.name), t.ref.scalable = null;\n    },\n    ignoreRect: !0,\n    mixins: {\n      apis: [\"height\", \"heightCurrent\", \"scalable\"]\n    }\n  }),\n      _n = {\n    type: \"spring\",\n    stiffness: .75,\n    damping: .45,\n    mass: 10\n  },\n      Tn = {\n    DID_START_ITEM_LOAD: \"busy\",\n    DID_UPDATE_ITEM_LOAD_PROGRESS: \"loading\",\n    DID_THROW_ITEM_INVALID: \"load-invalid\",\n    DID_THROW_ITEM_LOAD_ERROR: \"load-error\",\n    DID_LOAD_ITEM: \"idle\",\n    DID_THROW_ITEM_REMOVE_ERROR: \"remove-error\",\n    DID_START_ITEM_REMOVE: \"busy\",\n    DID_START_ITEM_PROCESSING: \"busy processing\",\n    DID_REQUEST_ITEM_PROCESSING: \"busy processing\",\n    DID_UPDATE_ITEM_PROCESS_PROGRESS: \"processing\",\n    DID_COMPLETE_ITEM_PROCESSING: \"processing-complete\",\n    DID_THROW_ITEM_PROCESSING_ERROR: \"processing-error\",\n    DID_THROW_ITEM_PROCESSING_REVERT_ERROR: \"processing-revert-error\",\n    DID_ABORT_ITEM_PROCESSING: \"cancelled\",\n    DID_REVERT_ITEM_PROCESSING: \"idle\"\n  },\n      In = A({\n    DID_UPDATE_PANEL_HEIGHT: function DID_UPDATE_PANEL_HEIGHT(e) {\n      var t = e.root,\n          n = e.action;\n      t.height = n.height;\n    }\n  }),\n      vn = A({\n    DID_GRAB_ITEM: function DID_GRAB_ITEM(e) {\n      var t = e.root;\n      e.props.dragOrigin = {\n        x: t.translateX,\n        y: t.translateY\n      };\n    },\n    DID_DRAG_ITEM: function DID_DRAG_ITEM(e) {\n      e.root.element.dataset.dragState = \"drag\";\n    },\n    DID_DROP_ITEM: function DID_DROP_ITEM(e) {\n      var t = e.root,\n          n = e.props;\n      n.dragOffset = null, n.dragOrigin = null, t.element.dataset.dragState = \"drop\";\n    }\n  }, function (e) {\n    var t = e.root,\n        n = e.actions,\n        r = e.props,\n        o = e.shouldOptimize;\n    \"drop\" === t.element.dataset.dragState && t.scaleX <= 1 && (t.element.dataset.dragState = \"idle\");\n    var i = n.concat().filter(function (e) {\n      return /^DID_/.test(e.type);\n    }).reverse().find(function (e) {\n      return Tn[e.type];\n    });\n    i && i.type !== r.currentState && (r.currentState = i.type, t.element.dataset.filepondItemState = Tn[r.currentState] || \"\");\n    var a = t.query(\"GET_ITEM_PANEL_ASPECT_RATIO\") || t.query(\"GET_PANEL_ASPECT_RATIO\");\n    a ? o || (t.height = t.rect.element.width * a) : (In({\n      root: t,\n      actions: n,\n      props: r\n    }), !t.height && t.ref.container.rect.element.height > 0 && (t.height = t.ref.container.rect.element.height)), o && (t.ref.panel.height = null), t.ref.panel.height = t.height;\n  }),\n      mn = S({\n    create: function create(e) {\n      var t = e.root,\n          n = e.props;\n      t.ref.handleClick = function (e) {\n        return t.dispatch(\"DID_ACTIVATE_ITEM\", {\n          id: n.id\n        });\n      }, t.element.id = \"filepond--item-\" + n.id, t.element.addEventListener(\"click\", t.ref.handleClick), t.ref.container = t.appendChildView(t.createChildView(fn, {\n        id: n.id\n      })), t.ref.panel = t.appendChildView(t.createChildView(En, {\n        name: \"item-panel\"\n      })), t.ref.panel.height = null, n.markedForRemoval = !1, t.query(\"GET_ALLOW_REORDER\") && (t.element.dataset.dragState = \"idle\", t.element.addEventListener(\"pointerdown\", function (e) {\n        if (e.isPrimary) {\n          var r = !1,\n              o = e.pageX,\n              i = e.pageY;\n          n.dragOrigin = {\n            x: t.translateX,\n            y: t.translateY\n          }, n.dragCenter = {\n            x: e.offsetX,\n            y: e.offsetY\n          };\n          var a,\n              s,\n              u,\n              l = (a = t.query(\"GET_ACTIVE_ITEMS\"), s = a.map(function (e) {\n            return e.id;\n          }), u = void 0, {\n            setIndex: function setIndex(e) {\n              u = e;\n            },\n            getIndex: function getIndex() {\n              return u;\n            },\n            getItemIndex: function getItemIndex(e) {\n              return s.indexOf(e.id);\n            }\n          });\n          t.dispatch(\"DID_GRAB_ITEM\", {\n            id: n.id,\n            dragState: l\n          });\n\n          var c = function c(e) {\n            e.isPrimary && (e.stopPropagation(), e.preventDefault(), n.dragOffset = {\n              x: e.pageX - o,\n              y: e.pageY - i\n            }, n.dragOffset.x * n.dragOffset.x + n.dragOffset.y * n.dragOffset.y > 16 && !r && (r = !0, t.element.removeEventListener(\"click\", t.ref.handleClick)), t.dispatch(\"DID_DRAG_ITEM\", {\n              id: n.id,\n              dragState: l\n            }));\n          };\n\n          document.addEventListener(\"pointermove\", c), document.addEventListener(\"pointerup\", function e(a) {\n            a.isPrimary && (document.removeEventListener(\"pointermove\", c), document.removeEventListener(\"pointerup\", e), n.dragOffset = {\n              x: a.pageX - o,\n              y: a.pageY - i\n            }, t.dispatch(\"DID_DROP_ITEM\", {\n              id: n.id,\n              dragState: l\n            }), r && setTimeout(function () {\n              return t.element.addEventListener(\"click\", t.ref.handleClick);\n            }, 0));\n          });\n        }\n      }));\n    },\n    write: vn,\n    destroy: function destroy(e) {\n      var t = e.root,\n          n = e.props;\n      t.element.removeEventListener(\"click\", t.ref.handleClick), t.dispatch(\"RELEASE_ITEM\", {\n        query: n.id\n      });\n    },\n    tag: \"li\",\n    name: \"item\",\n    mixins: {\n      apis: [\"id\", \"interactionMethod\", \"markedForRemoval\", \"spawnDate\", \"dragCenter\", \"dragOrigin\", \"dragOffset\"],\n      styles: [\"translateX\", \"translateY\", \"scaleX\", \"scaleY\", \"opacity\", \"height\"],\n      animations: {\n        scaleX: \"spring\",\n        scaleY: \"spring\",\n        translateX: _n,\n        translateY: _n,\n        opacity: {\n          type: \"tween\",\n          duration: 150\n        }\n      }\n    }\n  }),\n      hn = function hn(e, t) {\n    return Math.max(1, Math.floor((e + 1) / t));\n  },\n      gn = function gn(e, t, n) {\n    if (n) {\n      var r = e.rect.element.width,\n          o = t.length,\n          i = null;\n      if (0 === o || n.top < t[0].rect.element.top) return -1;\n      var a = t[0].rect.element,\n          s = a.marginLeft + a.marginRight,\n          u = a.width + s,\n          l = hn(r, u);\n\n      if (1 === l) {\n        for (var c = 0; c < o; c++) {\n          var f = t[c],\n              d = f.rect.outer.top + .5 * f.rect.element.height;\n          if (n.top < d) return c;\n        }\n\n        return o;\n      }\n\n      for (var p = a.marginTop + a.marginBottom, E = a.height + p, _ = 0; _ < o; _++) {\n        var T = _ % l * u,\n            I = Math.floor(_ / l) * E,\n            v = I - a.marginTop,\n            m = T + u,\n            h = I + E + a.marginBottom;\n\n        if (n.top < h && n.top > v) {\n          if (n.left < m) return _;\n          i = _ !== o - 1 ? _ : null;\n        }\n      }\n\n      return null !== i ? i : o;\n    }\n  },\n      Rn = {\n    height: 0,\n    width: 0,\n\n    get getHeight() {\n      return this.height;\n    },\n\n    set setHeight(e) {\n      0 !== this.height && 0 !== e || (this.height = e);\n    },\n\n    get getWidth() {\n      return this.width;\n    },\n\n    set setWidth(e) {\n      0 !== this.width && 0 !== e || (this.width = e);\n    },\n\n    setDimensions: function setDimensions(e, t) {\n      0 !== this.height && 0 !== e || (this.height = e), 0 !== this.width && 0 !== t || (this.width = t);\n    }\n  },\n      On = function On(e, t, n) {\n    var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,\n        o = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1;\n    e.dragOffset ? (e.translateX = null, e.translateY = null, e.translateX = e.dragOrigin.x + e.dragOffset.x, e.translateY = e.dragOrigin.y + e.dragOffset.y, e.scaleX = 1.025, e.scaleY = 1.025) : (e.translateX = t, e.translateY = n, Date.now() > e.spawnDate && (0 === e.opacity && yn(e, t, n, r, o), e.scaleX = 1, e.scaleY = 1, e.opacity = 1));\n  },\n      yn = function yn(e, t, n, r, o) {\n    e.interactionMethod === re ? (e.translateX = null, e.translateX = t, e.translateY = null, e.translateY = n) : e.interactionMethod === ee ? (e.translateX = null, e.translateX = t - 20 * r, e.translateY = null, e.translateY = n - 10 * o, e.scaleX = .8, e.scaleY = .8) : e.interactionMethod === te ? (e.translateY = null, e.translateY = n - 30) : e.interactionMethod === J && (e.translateX = null, e.translateX = t - 30, e.translateY = null);\n  },\n      Dn = function Dn(e) {\n    return e.rect.element.height + .5 * e.rect.element.marginBottom + .5 * e.rect.element.marginTop;\n  },\n      Sn = A({\n    DID_ADD_ITEM: function DID_ADD_ITEM(e) {\n      var t = e.root,\n          n = e.action,\n          r = n.id,\n          o = n.index,\n          i = n.interactionMethod;\n      t.ref.addIndex = o;\n      var a = Date.now(),\n          s = a,\n          u = 1;\n\n      if (i !== re) {\n        u = 0;\n        var l = t.query(\"GET_ITEM_INSERT_INTERVAL\"),\n            c = a - t.ref.lastItemSpanwDate;\n        s = c < l ? a + (l - c) : a;\n      }\n\n      t.ref.lastItemSpanwDate = s, t.appendChildView(t.createChildView(mn, {\n        spawnDate: s,\n        id: r,\n        opacity: u,\n        interactionMethod: i\n      }), o);\n    },\n    DID_REMOVE_ITEM: function DID_REMOVE_ITEM(e) {\n      var t = e.root,\n          n = e.action.id,\n          r = t.childViews.find(function (e) {\n        return e.id === n;\n      });\n      r && (r.scaleX = .9, r.scaleY = .9, r.opacity = 0, r.markedForRemoval = !0);\n    },\n    DID_DRAG_ITEM: function DID_DRAG_ITEM(e) {\n      var t = e.root,\n          n = e.action,\n          r = n.id,\n          o = n.dragState,\n          i = t.query(\"GET_ITEM\", {\n        id: r\n      }),\n          a = t.childViews.find(function (e) {\n        return e.id === r;\n      }),\n          s = t.childViews.length,\n          u = o.getItemIndex(i);\n\n      if (a) {\n        var l,\n            c = a.dragOrigin.x + a.dragOffset.x + a.dragCenter.x,\n            f = a.dragOrigin.y + a.dragOffset.y + a.dragCenter.y,\n            d = Dn(a),\n            p = (l = a).rect.element.width + .5 * l.rect.element.marginLeft + .5 * l.rect.element.marginRight,\n            E = Math.floor(t.rect.outer.width / p);\n        E > s && (E = s);\n\n        var _ = Math.floor(s / E + 1);\n\n        Rn.setHeight = d * _, Rn.setWidth = p * E;\n        var T = {\n          y: Math.floor(f / d),\n          x: Math.floor(c / p),\n          getGridIndex: function getGridIndex() {\n            return f > Rn.getHeight || f < 0 || c > Rn.getWidth || c < 0 ? u : this.y * E + this.x;\n          },\n          getColIndex: function getColIndex() {\n            for (var e = t.query(\"GET_ACTIVE_ITEMS\"), n = t.childViews.filter(function (e) {\n              return e.rect.element.height;\n            }), r = e.map(function (e) {\n              return n.find(function (t) {\n                return t.id === e.id;\n              });\n            }), o = r.findIndex(function (e) {\n              return e === a;\n            }), i = Dn(a), s = r.length, u = s, l = 0, c = 0, d = 0, p = 0; p < s; p++) {\n              if (l = Dn(r[p]), f < (c = (d = c) + l)) {\n                if (o > p) {\n                  if (f < d + i) {\n                    u = p;\n                    break;\n                  }\n\n                  continue;\n                }\n\n                u = p;\n                break;\n              }\n            }\n\n            return u;\n          }\n        },\n            I = E > 1 ? T.getGridIndex() : T.getColIndex();\n        t.dispatch(\"MOVE_ITEM\", {\n          query: a,\n          index: I\n        });\n        var v = o.getIndex();\n\n        if (void 0 === v || v !== I) {\n          if (o.setIndex(I), void 0 === v) return;\n          t.dispatch(\"DID_REORDER_ITEMS\", {\n            items: t.query(\"GET_ACTIVE_ITEMS\"),\n            origin: u,\n            target: I\n          });\n        }\n      }\n    }\n  }),\n      An = S({\n    create: function create(e) {\n      var t = e.root;\n      r(t.element, \"role\", \"list\"), t.ref.lastItemSpanwDate = Date.now();\n    },\n    write: function write(e) {\n      var t = e.root,\n          n = e.props,\n          r = e.actions,\n          o = e.shouldOptimize;\n      Sn({\n        root: t,\n        props: n,\n        actions: r\n      });\n      var i = n.dragCoordinates,\n          a = t.rect.element.width,\n          s = t.childViews.filter(function (e) {\n        return e.rect.element.height;\n      }),\n          u = t.query(\"GET_ACTIVE_ITEMS\").map(function (e) {\n        return s.find(function (t) {\n          return t.id === e.id;\n        });\n      }).filter(function (e) {\n        return e;\n      }),\n          l = i ? gn(t, u, i) : null,\n          c = t.ref.addIndex || null;\n      t.ref.addIndex = null;\n      var f = 0,\n          d = 0,\n          p = 0;\n\n      if (0 !== u.length) {\n        var E = u[0].rect.element,\n            _ = E.marginTop + E.marginBottom,\n            T = E.marginLeft + E.marginRight,\n            I = E.width + T,\n            v = E.height + _,\n            m = hn(a, I);\n\n        if (1 === m) {\n          var h = 0,\n              g = 0;\n          u.forEach(function (e, t) {\n            if (l) {\n              var n = t - l;\n              g = -2 === n ? .25 * -_ : -1 === n ? .75 * -_ : 0 === n ? .75 * _ : 1 === n ? .25 * _ : 0;\n            }\n\n            o && (e.translateX = null, e.translateY = null), e.markedForRemoval || On(e, 0, h + g);\n            var r = (e.rect.element.height + _) * (e.markedForRemoval ? e.opacity : 1);\n            h += r;\n          });\n        } else {\n          var R = 0,\n              O = 0;\n          u.forEach(function (e, t) {\n            t === l && (f = 1), t === c && (p += 1), e.markedForRemoval && e.opacity < .5 && (d -= 1);\n            var n = t + p + f + d,\n                r = n % m,\n                i = Math.floor(n / m),\n                a = r * I,\n                s = i * v,\n                u = Math.sign(a - R),\n                E = Math.sign(s - O);\n            R = a, O = s, e.markedForRemoval || (o && (e.translateX = null, e.translateY = null), On(e, a, s, u, E));\n          });\n        }\n      }\n    },\n    tag: \"ul\",\n    name: \"list\",\n    didWriteView: function didWriteView(e) {\n      var t = e.root;\n      t.childViews.filter(function (e) {\n        return e.markedForRemoval && 0 === e.opacity && e.resting;\n      }).forEach(function (e) {\n        e._destroy(), t.removeChildView(e);\n      });\n    },\n    filterFrameActionsForChild: function filterFrameActionsForChild(e, t) {\n      return t.filter(function (t) {\n        return !t.data || !t.data.id || e.id === t.data.id;\n      });\n    },\n    mixins: {\n      apis: [\"dragCoordinates\"]\n    }\n  }),\n      Ln = A({\n    DID_DRAG: function DID_DRAG(e) {\n      var t = e.root,\n          n = e.props,\n          r = e.action;\n      t.query(\"GET_ITEM_INSERT_LOCATION_FREEDOM\") && (n.dragCoordinates = {\n        left: r.position.scopeLeft - t.ref.list.rect.element.left,\n        top: r.position.scopeTop - (t.rect.outer.top + t.rect.element.marginTop + t.rect.element.scrollTop)\n      });\n    },\n    DID_END_DRAG: function DID_END_DRAG(e) {\n      e.props.dragCoordinates = null;\n    }\n  }),\n      bn = S({\n    create: function create(e) {\n      var t = e.root,\n          n = e.props;\n      t.ref.list = t.appendChildView(t.createChildView(An)), n.dragCoordinates = null, n.overflowing = !1;\n    },\n    write: function write(e) {\n      var t = e.root,\n          n = e.props,\n          r = e.actions;\n\n      if (Ln({\n        root: t,\n        props: n,\n        actions: r\n      }), t.ref.list.dragCoordinates = n.dragCoordinates, n.overflowing && !n.overflow && (n.overflowing = !1, t.element.dataset.state = \"\", t.height = null), n.overflow) {\n        var o = Math.round(n.overflow);\n        o !== t.height && (n.overflowing = !0, t.element.dataset.state = \"overflow\", t.height = o);\n      }\n    },\n    name: \"list-scroller\",\n    mixins: {\n      apis: [\"overflow\", \"dragCoordinates\"],\n      styles: [\"height\", \"translateY\"],\n      animations: {\n        translateY: \"spring\"\n      }\n    }\n  }),\n      Pn = function Pn(e, t, n) {\n    var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : \"\";\n    n ? r(e, t, o) : e.removeAttribute(t);\n  },\n      Mn = function Mn(e) {\n    var t = e.root,\n        n = e.action;\n    t.query(\"GET_ALLOW_SYNC_ACCEPT_ATTRIBUTE\") && Pn(t.element, \"accept\", !!n.value, n.value ? n.value.join(\",\") : \"\");\n  },\n      wn = function wn(e) {\n    var t = e.root,\n        n = e.action;\n    Pn(t.element, \"multiple\", n.value);\n  },\n      Cn = function Cn(e) {\n    var t = e.root,\n        n = e.action;\n    Pn(t.element, \"webkitdirectory\", n.value);\n  },\n      Nn = function Nn(e) {\n    var t = e.root,\n        n = t.query(\"GET_DISABLED\"),\n        r = t.query(\"GET_ALLOW_BROWSE\"),\n        o = n || !r;\n    Pn(t.element, \"disabled\", o);\n  },\n      Gn = function Gn(e) {\n    var t = e.root;\n    e.action.value ? 0 === t.query(\"GET_TOTAL_ITEMS\") && Pn(t.element, \"required\", !0) : Pn(t.element, \"required\", !1);\n  },\n      Un = function Un(e) {\n    var t = e.root,\n        n = e.action;\n    Pn(t.element, \"capture\", !!n.value, !0 === n.value ? \"\" : n.value);\n  },\n      Bn = function Bn(e) {\n    var t = e.root,\n        n = t.element;\n    t.query(\"GET_TOTAL_ITEMS\") > 0 ? (Pn(n, \"required\", !1), Pn(n, \"name\", !1)) : (Pn(n, \"name\", !0, t.query(\"GET_NAME\")), t.query(\"GET_CHECK_VALIDITY\") && n.setCustomValidity(\"\"), t.query(\"GET_REQUIRED\") && Pn(n, \"required\", !0));\n  },\n      Fn = S({\n    tag: \"input\",\n    name: \"browser\",\n    ignoreRect: !0,\n    ignoreRectUpdate: !0,\n    attributes: {\n      type: \"file\"\n    },\n    create: function create(e) {\n      var t = e.root,\n          n = e.props;\n      t.element.id = \"filepond--browser-\" + n.id, r(t.element, \"name\", t.query(\"GET_NAME\")), r(t.element, \"aria-controls\", \"filepond--assistant-\" + n.id), r(t.element, \"aria-labelledby\", \"filepond--drop-label-\" + n.id), Mn({\n        root: t,\n        action: {\n          value: t.query(\"GET_ACCEPTED_FILE_TYPES\")\n        }\n      }), wn({\n        root: t,\n        action: {\n          value: t.query(\"GET_ALLOW_MULTIPLE\")\n        }\n      }), Cn({\n        root: t,\n        action: {\n          value: t.query(\"GET_ALLOW_DIRECTORIES_ONLY\")\n        }\n      }), Nn({\n        root: t\n      }), Gn({\n        root: t,\n        action: {\n          value: t.query(\"GET_REQUIRED\")\n        }\n      }), Un({\n        root: t,\n        action: {\n          value: t.query(\"GET_CAPTURE_METHOD\")\n        }\n      }), t.ref.handleChange = function (e) {\n        if (t.element.value) {\n          var r = Array.from(t.element.files).map(function (e) {\n            return e._relativePath = e.webkitRelativePath, e;\n          });\n          setTimeout(function () {\n            n.onload(r), function (e) {\n              if (e && \"\" !== e.value) {\n                try {\n                  e.value = \"\";\n                } catch (e) {}\n\n                if (e.value) {\n                  var t = Ct(\"form\"),\n                      n = e.parentNode,\n                      r = e.nextSibling;\n                  t.appendChild(e), t.reset(), r ? n.insertBefore(e, r) : n.appendChild(e);\n                }\n              }\n            }(t.element);\n          }, 250);\n        }\n      }, t.element.addEventListener(\"change\", t.ref.handleChange);\n    },\n    destroy: function destroy(e) {\n      var t = e.root;\n      t.element.removeEventListener(\"change\", t.ref.handleChange);\n    },\n    write: A({\n      DID_LOAD_ITEM: Bn,\n      DID_REMOVE_ITEM: Bn,\n      DID_THROW_ITEM_INVALID: function DID_THROW_ITEM_INVALID(e) {\n        var t = e.root;\n        t.query(\"GET_CHECK_VALIDITY\") && t.element.setCustomValidity(t.query(\"GET_LABEL_INVALID_FIELD\"));\n      },\n      DID_SET_DISABLED: Nn,\n      DID_SET_ALLOW_BROWSE: Nn,\n      DID_SET_ALLOW_DIRECTORIES_ONLY: Cn,\n      DID_SET_ALLOW_MULTIPLE: wn,\n      DID_SET_ACCEPTED_FILE_TYPES: Mn,\n      DID_SET_CAPTURE_METHOD: Un,\n      DID_SET_REQUIRED: Gn\n    })\n  }),\n      qn = 13,\n      Vn = 32,\n      xn = function xn(e, t) {\n    e.innerHTML = t;\n    var n = e.querySelector(\".filepond--label-action\");\n    return n && r(n, \"tabindex\", \"0\"), t;\n  },\n      Yn = S({\n    name: \"drop-label\",\n    ignoreRect: !0,\n    create: function create(e) {\n      var t = e.root,\n          n = e.props,\n          o = Ct(\"label\");\n      r(o, \"for\", \"filepond--browser-\" + n.id), r(o, \"id\", \"filepond--drop-label-\" + n.id), r(o, \"aria-hidden\", \"true\"), t.ref.handleKeyDown = function (e) {\n        (e.keyCode === qn || e.keyCode === Vn) && (e.preventDefault(), t.ref.label.click());\n      }, t.ref.handleClick = function (e) {\n        e.target === o || o.contains(e.target) || t.ref.label.click();\n      }, o.addEventListener(\"keydown\", t.ref.handleKeyDown), t.element.addEventListener(\"click\", t.ref.handleClick), xn(o, n.caption), t.appendChild(o), t.ref.label = o;\n    },\n    destroy: function destroy(e) {\n      var t = e.root;\n      t.ref.label.addEventListener(\"keydown\", t.ref.handleKeyDown), t.element.removeEventListener(\"click\", t.ref.handleClick);\n    },\n    write: A({\n      DID_SET_LABEL_IDLE: function DID_SET_LABEL_IDLE(e) {\n        var t = e.root,\n            n = e.action;\n        xn(t.ref.label, n.value);\n      }\n    }),\n    mixins: {\n      styles: [\"opacity\", \"translateX\", \"translateY\"],\n      animations: {\n        opacity: {\n          type: \"tween\",\n          duration: 150\n        },\n        translateX: \"spring\",\n        translateY: \"spring\"\n      }\n    }\n  }),\n      kn = S({\n    name: \"drip-blob\",\n    ignoreRect: !0,\n    mixins: {\n      styles: [\"translateX\", \"translateY\", \"scaleX\", \"scaleY\", \"opacity\"],\n      animations: {\n        scaleX: \"spring\",\n        scaleY: \"spring\",\n        translateX: \"spring\",\n        translateY: \"spring\",\n        opacity: {\n          type: \"tween\",\n          duration: 250\n        }\n      }\n    }\n  }),\n      jn = A({\n    DID_DRAG: function DID_DRAG(e) {\n      var t = e.root,\n          n = e.action;\n      t.ref.blob ? (t.ref.blob.translateX = n.position.scopeLeft, t.ref.blob.translateY = n.position.scopeTop, t.ref.blob.scaleX = 1, t.ref.blob.scaleY = 1, t.ref.blob.opacity = 1) : function (e) {\n        var t = e.root,\n            n = .5 * t.rect.element.width,\n            r = .5 * t.rect.element.height;\n        t.ref.blob = t.appendChildView(t.createChildView(kn, {\n          opacity: 0,\n          scaleX: 2.5,\n          scaleY: 2.5,\n          translateX: n,\n          translateY: r\n        }));\n      }({\n        root: t\n      });\n    },\n    DID_DROP: function DID_DROP(e) {\n      var t = e.root;\n      t.ref.blob && (t.ref.blob.scaleX = 2.5, t.ref.blob.scaleY = 2.5, t.ref.blob.opacity = 0);\n    },\n    DID_END_DRAG: function DID_END_DRAG(e) {\n      var t = e.root;\n      t.ref.blob && (t.ref.blob.opacity = 0);\n    }\n  }),\n      Hn = S({\n    ignoreRect: !0,\n    ignoreRectUpdate: !0,\n    name: \"drip\",\n    write: function write(e) {\n      var t = e.root,\n          n = e.props,\n          r = e.actions;\n      jn({\n        root: t,\n        props: n,\n        actions: r\n      });\n      var o = t.ref.blob;\n      0 === r.length && o && 0 === o.opacity && (t.removeChildView(o), t.ref.blob = null);\n    }\n  }),\n      Xn = function Xn(e, t) {\n    try {\n      var n = new DataTransfer();\n      t.forEach(function (e) {\n        e instanceof File ? n.items.add(e) : n.items.add(new File([e], e.name, {\n          type: e.type\n        }));\n      }), e.files = n.files;\n    } catch (e) {\n      return !1;\n    }\n\n    return !0;\n  },\n      Wn = function Wn(e, t) {\n    return e.ref.fields[t];\n  },\n      zn = function zn(e) {\n    e.query(\"GET_ACTIVE_ITEMS\").forEach(function (t) {\n      e.ref.fields[t.id] && e.element.appendChild(e.ref.fields[t.id]);\n    });\n  },\n      Qn = function Qn(e) {\n    var t = e.root;\n    return zn(t);\n  },\n      Zn = A({\n    DID_SET_DISABLED: function DID_SET_DISABLED(e) {\n      var t = e.root;\n      t.element.disabled = t.query(\"GET_DISABLED\");\n    },\n    DID_ADD_ITEM: function DID_ADD_ITEM(e) {\n      var t = e.root,\n          n = e.action,\n          r = !(t.query(\"GET_ITEM\", n.id).origin === ve.LOCAL) && t.query(\"SHOULD_UPDATE_FILE_INPUT\"),\n          o = Ct(\"input\");\n      o.type = r ? \"file\" : \"hidden\", o.name = t.query(\"GET_NAME\"), o.disabled = t.query(\"GET_DISABLED\"), t.ref.fields[n.id] = o, zn(t);\n    },\n    DID_LOAD_ITEM: function DID_LOAD_ITEM(e) {\n      var t = e.root,\n          n = e.action,\n          r = Wn(t, n.id);\n\n      if (r && (null !== n.serverFileReference && (r.value = n.serverFileReference), t.query(\"SHOULD_UPDATE_FILE_INPUT\"))) {\n        var o = t.query(\"GET_ITEM\", n.id);\n        Xn(r, [o.file]);\n      }\n    },\n    DID_REMOVE_ITEM: function DID_REMOVE_ITEM(e) {\n      var t = e.root,\n          n = e.action,\n          r = Wn(t, n.id);\n      r && (r.parentNode && r.parentNode.removeChild(r), delete t.ref.fields[n.id]);\n    },\n    DID_DEFINE_VALUE: function DID_DEFINE_VALUE(e) {\n      var t = e.root,\n          n = e.action,\n          r = Wn(t, n.id);\n      r && (null === n.value ? r.removeAttribute(\"value\") : r.value = n.value, zn(t));\n    },\n    DID_PREPARE_OUTPUT: function DID_PREPARE_OUTPUT(e) {\n      var t = e.root,\n          n = e.action;\n      t.query(\"SHOULD_UPDATE_FILE_INPUT\") && setTimeout(function () {\n        var e = Wn(t, n.id);\n        e && Xn(e, [n.file]);\n      }, 0);\n    },\n    DID_REORDER_ITEMS: Qn,\n    DID_SORT_ITEMS: Qn\n  }),\n      Kn = S({\n    tag: \"fieldset\",\n    name: \"data\",\n    create: function create(e) {\n      return e.root.ref.fields = {};\n    },\n    write: Zn,\n    ignoreRect: !0\n  }),\n      $n = [\"jpg\", \"jpeg\", \"png\", \"gif\", \"bmp\", \"webp\", \"svg\", \"tiff\"],\n      Jn = [\"css\", \"csv\", \"html\", \"txt\"],\n      er = {\n    zip: \"zip|compressed\",\n    epub: \"application/epub+zip\"\n  },\n      tr = function tr() {\n    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"\";\n    return e = e.toLowerCase(), $n.includes(e) ? \"image/\" + (\"jpg\" === e ? \"jpeg\" : \"svg\" === e ? \"svg+xml\" : e) : Jn.includes(e) ? \"text/\" + e : er[e] || \"\";\n  },\n      nr = function nr(e) {\n    return new Promise(function (t, n) {\n      var r = dr(e);\n      if (r.length && !rr(e)) return t(r);\n      or(e).then(t);\n    });\n  },\n      rr = function rr(e) {\n    return !!e.files && e.files.length > 0;\n  },\n      or = function or(e) {\n    return new Promise(function (t, n) {\n      var r = (e.items ? Array.from(e.items) : []).filter(function (e) {\n        return ir(e);\n      }).map(function (e) {\n        return ar(e);\n      });\n      r.length ? Promise.all(r).then(function (e) {\n        var n = [];\n        e.forEach(function (e) {\n          n.push.apply(n, e);\n        }), t(n.filter(function (e) {\n          return e;\n        }).map(function (e) {\n          return e._relativePath || (e._relativePath = e.webkitRelativePath), e;\n        }));\n      })[\"catch\"](console.error) : t(e.files ? Array.from(e.files) : []);\n    });\n  },\n      ir = function ir(e) {\n    if (cr(e)) {\n      var t = fr(e);\n      if (t) return t.isFile || t.isDirectory;\n    }\n\n    return \"file\" === e.kind;\n  },\n      ar = function ar(e) {\n    return new Promise(function (t, n) {\n      lr(e) ? sr(fr(e)).then(t)[\"catch\"](n) : t([e.getAsFile()]);\n    });\n  },\n      sr = function sr(e) {\n    return new Promise(function (t, n) {\n      var r = [],\n          o = 0,\n          i = 0,\n          a = function a() {\n        0 === i && 0 === o && t(r);\n      };\n\n      !function e(t) {\n        o++;\n        var s = t.createReader();\n        !function t() {\n          s.readEntries(function (n) {\n            if (0 === n.length) return o--, void a();\n            n.forEach(function (t) {\n              t.isDirectory ? e(t) : (i++, t.file(function (e) {\n                var n = ur(e);\n                t.fullPath && (n._relativePath = t.fullPath), r.push(n), i--, a();\n              }));\n            }), t();\n          }, n);\n        }();\n      }(e);\n    });\n  },\n      ur = function ur(e) {\n    if (e.type.length) return e;\n    var t = e.lastModifiedDate,\n        n = e.name,\n        r = tr(je(e.name));\n    return r.length ? ((e = e.slice(0, e.size, r)).name = n, e.lastModifiedDate = t, e) : e;\n  },\n      lr = function lr(e) {\n    return cr(e) && (fr(e) || {}).isDirectory;\n  },\n      cr = function cr(e) {\n    return \"webkitGetAsEntry\" in e;\n  },\n      fr = function fr(e) {\n    return e.webkitGetAsEntry();\n  },\n      dr = function dr(e) {\n    var t = [];\n\n    try {\n      if ((t = Er(e)).length) return t;\n      t = pr(e);\n    } catch (e) {}\n\n    return t;\n  },\n      pr = function pr(e) {\n    var t = e.getData(\"url\");\n    return \"string\" == typeof t && t.length ? [t] : [];\n  },\n      Er = function Er(e) {\n    var t = e.getData(\"text/html\");\n\n    if (\"string\" == typeof t && t.length) {\n      var n = t.match(/src\\s*=\\s*\"(.+?)\"/);\n      if (n) return [n[1]];\n    }\n\n    return [];\n  },\n      _r = [],\n      Tr = function Tr(e) {\n    return {\n      pageLeft: e.pageX,\n      pageTop: e.pageY,\n      scopeLeft: e.offsetX || e.layerX,\n      scopeTop: e.offsetY || e.layerY\n    };\n  },\n      Ir = function Ir(e) {\n    var t = _r.find(function (t) {\n      return t.element === e;\n    });\n\n    if (t) return t;\n    var n = vr(e);\n    return _r.push(n), n;\n  },\n      vr = function vr(e) {\n    var n = [],\n        r = {\n      dragenter: Rr,\n      dragover: Or,\n      dragleave: Dr,\n      drop: yr\n    },\n        o = {};\n    t(r, function (t, r) {\n      o[t] = r(e, n), e.addEventListener(t, o[t], !1);\n    });\n    var i = {\n      element: e,\n      addListener: function addListener(a) {\n        return n.push(a), function () {\n          n.splice(n.indexOf(a), 1), 0 === n.length && (_r.splice(_r.indexOf(i), 1), t(r, function (t) {\n            e.removeEventListener(t, o[t], !1);\n          }));\n        };\n      }\n    };\n    return i;\n  },\n      mr = function mr(e, t) {\n    var n,\n        r = function (e, t) {\n      return \"elementFromPoint\" in e || (e = document), e.elementFromPoint(t.x, t.y);\n    }(\"getRootNode\" in (n = t) ? n.getRootNode() : document, {\n      x: e.pageX - window.pageXOffset,\n      y: e.pageY - window.pageYOffset\n    });\n\n    return r === t || t.contains(r);\n  },\n      hr = null,\n      gr = function gr(e, t) {\n    try {\n      e.dropEffect = t;\n    } catch (e) {}\n  },\n      Rr = function Rr(e, t) {\n    return function (e) {\n      e.preventDefault(), hr = e.target, t.forEach(function (t) {\n        var n = t.element,\n            r = t.onenter;\n        mr(e, n) && (t.state = \"enter\", r(Tr(e)));\n      });\n    };\n  },\n      Or = function Or(e, t) {\n    return function (e) {\n      e.preventDefault();\n      var n = e.dataTransfer;\n      nr(n).then(function (r) {\n        var o = !1;\n        t.some(function (t) {\n          var i = t.filterElement,\n              a = t.element,\n              s = t.onenter,\n              u = t.onexit,\n              l = t.ondrag,\n              c = t.allowdrop;\n          gr(n, \"copy\");\n          var f = c(r);\n          if (f) {\n            if (mr(e, a)) {\n              if (o = !0, null === t.state) return t.state = \"enter\", void s(Tr(e));\n              if (t.state = \"over\", i && !f) return void gr(n, \"none\");\n              l(Tr(e));\n            } else i && !o && gr(n, \"none\"), t.state && (t.state = null, u(Tr(e)));\n          } else gr(n, \"none\");\n        });\n      });\n    };\n  },\n      yr = function yr(e, t) {\n    return function (e) {\n      e.preventDefault();\n      var n = e.dataTransfer;\n      nr(n).then(function (n) {\n        t.forEach(function (t) {\n          var r = t.filterElement,\n              o = t.element,\n              i = t.ondrop,\n              a = t.onexit,\n              s = t.allowdrop;\n          if (t.state = null, !r || mr(e, o)) return s(n) ? void i(Tr(e), n) : a(Tr(e));\n        });\n      });\n    };\n  },\n      Dr = function Dr(e, t) {\n    return function (e) {\n      hr === e.target && t.forEach(function (t) {\n        var n = t.onexit;\n        t.state = null, n(Tr(e));\n      });\n    };\n  },\n      Sr = function Sr(e, t, n) {\n    e.classList.add(\"filepond--hopper\");\n\n    var r = n.catchesDropsOnPage,\n        o = n.requiresDropOnElement,\n        i = n.filterItems,\n        a = void 0 === i ? function (e) {\n      return e;\n    } : i,\n        s = function (e, t, n) {\n      var r = Ir(t),\n          o = {\n        element: e,\n        filterElement: n,\n        state: null,\n        ondrop: function ondrop() {},\n        onenter: function onenter() {},\n        ondrag: function ondrag() {},\n        onexit: function onexit() {},\n        onload: function onload() {},\n        allowdrop: function allowdrop() {}\n      };\n      return o.destroy = r.addListener(o), o;\n    }(e, r ? document.documentElement : e, o),\n        u = \"\",\n        l = \"\";\n\n    s.allowdrop = function (e) {\n      return t(a(e));\n    }, s.ondrop = function (e, n) {\n      var r = a(n);\n      t(r) ? (l = \"drag-drop\", c.onload(r, e)) : c.ondragend(e);\n    }, s.ondrag = function (e) {\n      c.ondrag(e);\n    }, s.onenter = function (e) {\n      l = \"drag-over\", c.ondragstart(e);\n    }, s.onexit = function (e) {\n      l = \"drag-exit\", c.ondragend(e);\n    };\n    var c = {\n      updateHopperState: function updateHopperState() {\n        u !== l && (e.dataset.hopperState = l, u = l);\n      },\n      onload: function onload() {},\n      ondragstart: function ondragstart() {},\n      ondrag: function ondrag() {},\n      ondragend: function ondragend() {},\n      destroy: function destroy() {\n        s.destroy();\n      }\n    };\n    return c;\n  },\n      Ar = !1,\n      Lr = [],\n      br = function br(e) {\n    var t = document.activeElement;\n\n    if (t && /textarea|input/i.test(t.nodeName)) {\n      for (var n = !1, r = t; r !== document.body;) {\n        if (r.classList.contains(\"filepond--root\")) {\n          n = !0;\n          break;\n        }\n\n        r = r.parentNode;\n      }\n\n      if (!n) return;\n    }\n\n    nr(e.clipboardData).then(function (e) {\n      e.length && Lr.forEach(function (t) {\n        return t(e);\n      });\n    });\n  },\n      Pr = function Pr() {\n    var e = function e(_e2) {\n      t.onload(_e2);\n    },\n        t = {\n      destroy: function destroy() {\n        var t;\n        t = e, de(Lr, Lr.indexOf(t)), 0 === Lr.length && (document.removeEventListener(\"paste\", br), Ar = !1);\n      },\n      onload: function onload() {}\n    };\n\n    return function (e) {\n      Lr.includes(e) || (Lr.push(e), Ar || (Ar = !0, document.addEventListener(\"paste\", br)));\n    }(e), t;\n  },\n      Mr = null,\n      wr = null,\n      Cr = [],\n      Nr = function Nr(e, t) {\n    e.element.textContent = t;\n  },\n      Gr = function Gr(e, t, n) {\n    var r = e.query(\"GET_TOTAL_ITEMS\");\n    Nr(e, n + \" \" + t + \", \" + r + \" \" + (1 === r ? e.query(\"GET_LABEL_FILE_COUNT_SINGULAR\") : e.query(\"GET_LABEL_FILE_COUNT_PLURAL\"))), clearTimeout(wr), wr = setTimeout(function () {\n      !function (e) {\n        e.element.textContent = \"\";\n      }(e);\n    }, 1500);\n  },\n      Ur = function Ur(e) {\n    return e.element.parentNode.contains(document.activeElement);\n  },\n      Br = function Br(e) {\n    var t = e.root,\n        n = e.action,\n        r = t.query(\"GET_ITEM\", n.id).filename,\n        o = t.query(\"GET_LABEL_FILE_PROCESSING_ABORTED\");\n    Nr(t, r + \" \" + o);\n  },\n      Fr = function Fr(e) {\n    var t = e.root,\n        n = e.action,\n        r = t.query(\"GET_ITEM\", n.id).filename;\n    Nr(t, n.status.main + \" \" + r + \" \" + n.status.sub);\n  },\n      qr = S({\n    create: function create(e) {\n      var t = e.root,\n          n = e.props;\n      t.element.id = \"filepond--assistant-\" + n.id, r(t.element, \"role\", \"status\"), r(t.element, \"aria-live\", \"polite\"), r(t.element, \"aria-relevant\", \"additions\");\n    },\n    ignoreRect: !0,\n    ignoreRectUpdate: !0,\n    write: A({\n      DID_LOAD_ITEM: function DID_LOAD_ITEM(e) {\n        var t = e.root,\n            n = e.action;\n\n        if (Ur(t)) {\n          t.element.textContent = \"\";\n          var r = t.query(\"GET_ITEM\", n.id);\n          Cr.push(r.filename), clearTimeout(Mr), Mr = setTimeout(function () {\n            Gr(t, Cr.join(\", \"), t.query(\"GET_LABEL_FILE_ADDED\")), Cr.length = 0;\n          }, 750);\n        }\n      },\n      DID_REMOVE_ITEM: function DID_REMOVE_ITEM(e) {\n        var t = e.root,\n            n = e.action;\n\n        if (Ur(t)) {\n          var r = n.item;\n          Gr(t, r.filename, t.query(\"GET_LABEL_FILE_REMOVED\"));\n        }\n      },\n      DID_COMPLETE_ITEM_PROCESSING: function DID_COMPLETE_ITEM_PROCESSING(e) {\n        var t = e.root,\n            n = e.action,\n            r = t.query(\"GET_ITEM\", n.id).filename,\n            o = t.query(\"GET_LABEL_FILE_PROCESSING_COMPLETE\");\n        Nr(t, r + \" \" + o);\n      },\n      DID_ABORT_ITEM_PROCESSING: Br,\n      DID_REVERT_ITEM_PROCESSING: Br,\n      DID_THROW_ITEM_REMOVE_ERROR: Fr,\n      DID_THROW_ITEM_LOAD_ERROR: Fr,\n      DID_THROW_ITEM_INVALID: Fr,\n      DID_THROW_ITEM_PROCESSING_ERROR: Fr\n    }),\n    tag: \"span\",\n    name: \"assistant\"\n  }),\n      Vr = function Vr(e) {\n    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"-\";\n    return e.replace(new RegExp(t + \".\", \"g\"), function (e) {\n      return e.charAt(1).toUpperCase();\n    });\n  },\n      xr = function xr(e) {\n    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 16,\n        n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],\n        r = Date.now(),\n        o = null;\n    return function () {\n      for (var i = arguments.length, a = new Array(i), s = 0; s < i; s++) {\n        a[s] = arguments[s];\n      }\n\n      clearTimeout(o);\n\n      var u = Date.now() - r,\n          l = function l() {\n        r = Date.now(), e.apply(void 0, a);\n      };\n\n      u < t ? n || (o = setTimeout(l, t - u)) : l();\n    };\n  },\n      Yr = function Yr(e) {\n    return e.preventDefault();\n  },\n      kr = function kr(e) {\n    var t = e.ref.list.childViews[0].childViews[0];\n    return t ? {\n      top: t.rect.element.marginTop,\n      bottom: t.rect.element.marginBottom\n    } : {\n      top: 0,\n      bottom: 0\n    };\n  },\n      jr = function jr(e) {\n    var t = 0,\n        n = 0,\n        r = e.ref.list,\n        o = r.childViews[0],\n        i = o.childViews.filter(function (e) {\n      return e.rect.element.height;\n    }),\n        a = e.query(\"GET_ACTIVE_ITEMS\").map(function (e) {\n      return i.find(function (t) {\n        return t.id === e.id;\n      });\n    }).filter(function (e) {\n      return e;\n    });\n    if (0 === a.length) return {\n      visual: t,\n      bounds: n\n    };\n\n    var s = o.rect.element.width,\n        u = gn(o, a, r.dragCoordinates),\n        l = a[0].rect.element,\n        c = l.marginTop + l.marginBottom,\n        f = l.marginLeft + l.marginRight,\n        d = l.width + f,\n        p = l.height + c,\n        E = void 0 !== u && u >= 0 ? 1 : 0,\n        _ = a.find(function (e) {\n      return e.markedForRemoval && e.opacity < .45;\n    }) ? -1 : 0,\n        T = a.length + E + _,\n        I = hn(s, d);\n\n    return 1 === I ? a.forEach(function (e) {\n      var r = e.rect.element.height + c;\n      n += r, t += r * e.opacity;\n    }) : (n = Math.ceil(T / I) * p, t = n), {\n      visual: t,\n      bounds: n\n    };\n  },\n      Hr = function Hr(e) {\n    var t = e.ref.measureHeight || null;\n    return {\n      cappedHeight: parseInt(e.style.maxHeight, 10) || null,\n      fixedHeight: 0 === t ? null : t\n    };\n  },\n      Xr = function Xr(e, t) {\n    var n = e.query(\"GET_ALLOW_REPLACE\"),\n        r = e.query(\"GET_ALLOW_MULTIPLE\"),\n        o = e.query(\"GET_TOTAL_ITEMS\"),\n        i = e.query(\"GET_MAX_FILES\"),\n        a = t.length;\n    return !r && a > 1 || !!(V(i = r ? i : n ? i : 1) && o + a > i) && (e.dispatch(\"DID_THROW_MAX_FILES\", {\n      source: t,\n      error: ot(\"warning\", 0, \"Max files\")\n    }), !0);\n  },\n      Wr = function Wr(e, t, n) {\n    var r = e.childViews[0];\n    return gn(r, t, {\n      left: n.scopeLeft - r.rect.element.left,\n      top: n.scopeTop - (e.rect.outer.top + e.rect.element.marginTop + e.rect.element.scrollTop)\n    });\n  },\n      zr = function zr(e) {\n    var t = e.query(\"GET_ALLOW_DROP\"),\n        n = e.query(\"GET_DISABLED\"),\n        r = t && !n;\n\n    if (r && !e.ref.hopper) {\n      var o = Sr(e.element, function (t) {\n        var n = e.query(\"GET_BEFORE_DROP_FILE\") || function () {\n          return !0;\n        };\n\n        return !e.query(\"GET_DROP_VALIDATION\") || t.every(function (t) {\n          return ye(\"ALLOW_HOPPER_ITEM\", t, {\n            query: e.query\n          }).every(function (e) {\n            return !0 === e;\n          }) && n(t);\n        });\n      }, {\n        filterItems: function filterItems(t) {\n          var n = e.query(\"GET_IGNORED_FILES\");\n          return t.filter(function (e) {\n            return !ht(e) || !n.includes(e.name.toLowerCase());\n          });\n        },\n        catchesDropsOnPage: e.query(\"GET_DROP_ON_PAGE\"),\n        requiresDropOnElement: e.query(\"GET_DROP_ON_ELEMENT\")\n      });\n      o.onload = function (t, n) {\n        var r = e.ref.list.childViews[0].childViews.filter(function (e) {\n          return e.rect.element.height;\n        }),\n            o = e.query(\"GET_ACTIVE_ITEMS\").map(function (e) {\n          return r.find(function (t) {\n            return t.id === e.id;\n          });\n        }).filter(function (e) {\n          return e;\n        });\n        Oe(\"ADD_ITEMS\", t, {\n          dispatch: e.dispatch\n        }).then(function (t) {\n          if (Xr(e, t)) return !1;\n          e.dispatch(\"ADD_ITEMS\", {\n            items: t,\n            index: Wr(e.ref.list, o, n),\n            interactionMethod: ee\n          });\n        }), e.dispatch(\"DID_DROP\", {\n          position: n\n        }), e.dispatch(\"DID_END_DRAG\", {\n          position: n\n        });\n      }, o.ondragstart = function (t) {\n        e.dispatch(\"DID_START_DRAG\", {\n          position: t\n        });\n      }, o.ondrag = xr(function (t) {\n        e.dispatch(\"DID_DRAG\", {\n          position: t\n        });\n      }), o.ondragend = function (t) {\n        e.dispatch(\"DID_END_DRAG\", {\n          position: t\n        });\n      }, e.ref.hopper = o, e.ref.drip = e.appendChildView(e.createChildView(Hn));\n    } else !r && e.ref.hopper && (e.ref.hopper.destroy(), e.ref.hopper = null, e.removeChildView(e.ref.drip));\n  },\n      Qr = function Qr(e, t) {\n    var n = e.query(\"GET_ALLOW_BROWSE\"),\n        r = e.query(\"GET_DISABLED\"),\n        o = n && !r;\n    o && !e.ref.browser ? e.ref.browser = e.appendChildView(e.createChildView(Fn, Object.assign({}, t, {\n      onload: function onload(t) {\n        Oe(\"ADD_ITEMS\", t, {\n          dispatch: e.dispatch\n        }).then(function (t) {\n          if (Xr(e, t)) return !1;\n          e.dispatch(\"ADD_ITEMS\", {\n            items: t,\n            index: -1,\n            interactionMethod: te\n          });\n        });\n      }\n    })), 0) : !o && e.ref.browser && (e.removeChildView(e.ref.browser), e.ref.browser = null);\n  },\n      Zr = function Zr(e) {\n    var t = e.query(\"GET_ALLOW_PASTE\"),\n        n = e.query(\"GET_DISABLED\"),\n        r = t && !n;\n    r && !e.ref.paster ? (e.ref.paster = Pr(), e.ref.paster.onload = function (t) {\n      Oe(\"ADD_ITEMS\", t, {\n        dispatch: e.dispatch\n      }).then(function (t) {\n        if (Xr(e, t)) return !1;\n        e.dispatch(\"ADD_ITEMS\", {\n          items: t,\n          index: -1,\n          interactionMethod: ne\n        });\n      });\n    }) : !r && e.ref.paster && (e.ref.paster.destroy(), e.ref.paster = null);\n  },\n      Kr = A({\n    DID_SET_ALLOW_BROWSE: function DID_SET_ALLOW_BROWSE(e) {\n      var t = e.root,\n          n = e.props;\n      Qr(t, n);\n    },\n    DID_SET_ALLOW_DROP: function DID_SET_ALLOW_DROP(e) {\n      var t = e.root;\n      zr(t);\n    },\n    DID_SET_ALLOW_PASTE: function DID_SET_ALLOW_PASTE(e) {\n      var t = e.root;\n      Zr(t);\n    },\n    DID_SET_DISABLED: function DID_SET_DISABLED(e) {\n      var t = e.root,\n          n = e.props;\n      zr(t), Zr(t), Qr(t, n), t.query(\"GET_DISABLED\") ? t.element.dataset.disabled = \"disabled\" : t.element.removeAttribute(\"data-disabled\");\n    }\n  }),\n      $r = S({\n    name: \"root\",\n    read: function read(e) {\n      var t = e.root;\n      t.ref.measure && (t.ref.measureHeight = t.ref.measure.offsetHeight);\n    },\n    create: function create(e) {\n      var t = e.root,\n          n = e.props,\n          r = t.query(\"GET_ID\");\n      r && (t.element.id = r);\n      var o = t.query(\"GET_CLASS_NAME\");\n      o && o.split(\" \").filter(function (e) {\n        return e.length;\n      }).forEach(function (e) {\n        t.element.classList.add(e);\n      }), t.ref.label = t.appendChildView(t.createChildView(Yn, Object.assign({}, n, {\n        translateY: null,\n        caption: t.query(\"GET_LABEL_IDLE\")\n      }))), t.ref.list = t.appendChildView(t.createChildView(bn, {\n        translateY: null\n      })), t.ref.panel = t.appendChildView(t.createChildView(En, {\n        name: \"panel-root\"\n      })), t.ref.assistant = t.appendChildView(t.createChildView(qr, Object.assign({}, n))), t.ref.data = t.appendChildView(t.createChildView(Kn, Object.assign({}, n))), t.ref.measure = Ct(\"div\"), t.ref.measure.style.height = \"100%\", t.element.appendChild(t.ref.measure), t.ref.bounds = null, t.query(\"GET_STYLES\").filter(function (e) {\n        return !M(e.value);\n      }).map(function (e) {\n        var n = e.name,\n            r = e.value;\n        t.element.dataset[n] = r;\n      }), t.ref.widthPrevious = null, t.ref.widthUpdated = xr(function () {\n        t.ref.updateHistory = [], t.dispatch(\"DID_RESIZE_ROOT\");\n      }, 250), t.ref.previousAspectRatio = null, t.ref.updateHistory = [];\n      var i = window.matchMedia(\"(pointer: fine) and (hover: hover)\").matches,\n          a = (\"PointerEvent\" in window);\n      t.query(\"GET_ALLOW_REORDER\") && a && !i && (t.element.addEventListener(\"touchmove\", Yr, {\n        passive: !1\n      }), t.element.addEventListener(\"gesturestart\", Yr));\n      var s = t.query(\"GET_CREDITS\");\n\n      if (2 === s.length) {\n        var u = document.createElement(\"a\");\n        u.className = \"filepond--credits\", u.setAttribute(\"aria-hidden\", \"true\"), u.href = s[0], u.tabindex = -1, u.target = \"_blank\", u.rel = \"noopener noreferrer\", u.textContent = s[1], t.element.appendChild(u), t.ref.credits = u;\n      }\n    },\n    write: function write(e) {\n      var t = e.root,\n          n = e.props,\n          r = e.actions;\n\n      if (Kr({\n        root: t,\n        props: n,\n        actions: r\n      }), r.filter(function (e) {\n        return /^DID_SET_STYLE_/.test(e.type);\n      }).filter(function (e) {\n        return !M(e.data.value);\n      }).map(function (e) {\n        var n = e.type,\n            r = e.data,\n            o = Vr(n.substr(8).toLowerCase(), \"_\");\n        t.element.dataset[o] = r.value, t.invalidateLayout();\n      }), !t.rect.element.hidden) {\n        t.rect.element.width !== t.ref.widthPrevious && (t.ref.widthPrevious = t.rect.element.width, t.ref.widthUpdated());\n        var o = t.ref.bounds;\n        o || (o = t.ref.bounds = Hr(t), t.element.removeChild(t.ref.measure), t.ref.measure = null);\n        var i = t.ref,\n            a = i.hopper,\n            s = i.label,\n            u = i.list,\n            l = i.panel;\n        a && a.updateHopperState();\n        var c = t.query(\"GET_PANEL_ASPECT_RATIO\"),\n            f = t.query(\"GET_ALLOW_MULTIPLE\"),\n            d = t.query(\"GET_TOTAL_ITEMS\"),\n            p = d === (f ? t.query(\"GET_MAX_FILES\") || 1e6 : 1),\n            E = r.find(function (e) {\n          return \"DID_ADD_ITEM\" === e.type;\n        });\n\n        if (p && E) {\n          var _ = E.data.interactionMethod;\n          s.opacity = 0, f ? s.translateY = -40 : _ === J ? s.translateX = 40 : s.translateY = _ === te ? 40 : 30;\n        } else p || (s.opacity = 1, s.translateX = 0, s.translateY = 0);\n\n        var T = kr(t),\n            I = jr(t),\n            v = s.rect.element.height,\n            m = !f || p ? 0 : v,\n            h = p ? u.rect.element.marginTop : 0,\n            g = 0 === d ? 0 : u.rect.element.marginBottom,\n            R = m + h + I.visual + g,\n            O = m + h + I.bounds + g;\n\n        if (u.translateY = Math.max(0, m - u.rect.element.marginTop) - T.top, c) {\n          var y = t.rect.element.width,\n              D = y * c;\n          c !== t.ref.previousAspectRatio && (t.ref.previousAspectRatio = c, t.ref.updateHistory = []);\n          var S = t.ref.updateHistory;\n          if (S.push(y), S.length > 4) for (var A = S.length, L = A - 10, b = 0, P = A; P >= L; P--) {\n            if (S[P] === S[P - 2] && b++, b >= 2) return;\n          }\n          l.scalable = !1, l.height = D;\n          var w = D - m - (g - T.bottom) - (p ? h : 0);\n          I.visual > w ? u.overflow = w : u.overflow = null, t.height = D;\n        } else if (o.fixedHeight) {\n          l.scalable = !1;\n          var C = o.fixedHeight - m - (g - T.bottom) - (p ? h : 0);\n          I.visual > C ? u.overflow = C : u.overflow = null;\n        } else if (o.cappedHeight) {\n          var N = R >= o.cappedHeight,\n              G = Math.min(o.cappedHeight, R);\n          l.scalable = !0, l.height = N ? G : G - T.top - T.bottom;\n          var U = G - m - (g - T.bottom) - (p ? h : 0);\n          R > o.cappedHeight && I.visual > U ? u.overflow = U : u.overflow = null, t.height = Math.min(o.cappedHeight, O - T.top - T.bottom);\n        } else {\n          var B = d > 0 ? T.top + T.bottom : 0;\n          l.scalable = !0, l.height = Math.max(v, R - B), t.height = Math.max(v, O - B);\n        }\n\n        t.ref.credits && l.heightCurrent && (t.ref.credits.style.transform = \"translateY(\" + l.heightCurrent + \"px)\");\n      }\n    },\n    destroy: function destroy(e) {\n      var t = e.root;\n      t.ref.paster && t.ref.paster.destroy(), t.ref.hopper && t.ref.hopper.destroy(), t.element.removeEventListener(\"touchmove\", Yr), t.element.removeEventListener(\"gesturestart\", Yr);\n    },\n    mixins: {\n      styles: [\"height\"]\n    }\n  }),\n      Jr = function Jr() {\n    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n        r = null,\n        o = Se(),\n        i = function (e) {\n      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],\n          n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [],\n          r = Object.assign({}, e),\n          o = [],\n          i = [],\n          a = function a(e, t, n) {\n        !n || document.hidden ? (c[e] && c[e](t), o.push({\n          type: e,\n          data: t\n        })) : i.push({\n          type: e,\n          data: t\n        });\n      },\n          s = function s(e) {\n        for (var t, n = arguments.length, r = new Array(n > 1 ? n - 1 : 0), o = 1; o < n; o++) {\n          r[o - 1] = arguments[o];\n        }\n\n        return l[e] ? (t = l)[e].apply(t, r) : null;\n      },\n          u = {\n        getState: function getState() {\n          return Object.assign({}, r);\n        },\n        processActionQueue: function processActionQueue() {\n          var e = [].concat(o);\n          return o.length = 0, e;\n        },\n        processDispatchQueue: function processDispatchQueue() {\n          var e = [].concat(i);\n          i.length = 0, e.forEach(function (e) {\n            var t = e.type,\n                n = e.data;\n            a(t, n);\n          });\n        },\n        dispatch: a,\n        query: s\n      },\n          l = {};\n\n      t.forEach(function (e) {\n        l = Object.assign({}, e(r), {}, l);\n      });\n      var c = {};\n      return n.forEach(function (e) {\n        c = Object.assign({}, e(a, s, r), {}, c);\n      }), u;\n    }({\n      items: [],\n      listUpdateTimeout: null,\n      itemUpdateTimeout: null,\n      processingQueue: [],\n      options: Q(o)\n    }, [Ve, $(o)], [Pt, K(o)]);\n\n    i.dispatch(\"SET_OPTIONS\", {\n      options: e\n    });\n\n    var a = function a() {\n      document.hidden || i.dispatch(\"KICK\");\n    };\n\n    document.addEventListener(\"visibilitychange\", a);\n\n    var s = null,\n        u = !1,\n        l = !1,\n        c = null,\n        f = null,\n        d = function d() {\n      u || (u = !0), clearTimeout(s), s = setTimeout(function () {\n        u = !1, c = null, f = null, l && (l = !1, i.dispatch(\"DID_STOP_RESIZE\"));\n      }, 500);\n    };\n\n    window.addEventListener(\"resize\", d);\n\n    var p = $r(i, {\n      id: oe()\n    }),\n        E = !1,\n        T = !1,\n        I = {\n      _read: function _read() {\n        u && (f = window.innerWidth, c || (c = f), l || f === c || (i.dispatch(\"DID_START_RESIZE\"), l = !0)), T && E && (E = null === p.element.offsetParent), E || (p._read(), T = p.rect.element.hidden);\n      },\n      _write: function _write(e) {\n        var t,\n            n = i.processActionQueue().filter(function (e) {\n          return !/^SET_/.test(e.type);\n        });\n        E && !n.length || (g(n), E = p._write(e, n, l), (t = i.query(\"GET_ITEMS\")).forEach(function (e, n) {\n          e.released && de(t, n);\n        }), E && i.processDispatchQueue());\n      }\n    },\n        v = function v(e) {\n      return function (t) {\n        var n = {\n          type: e\n        };\n        if (!t) return n;\n        if (t.hasOwnProperty(\"error\") && (n.error = t.error ? Object.assign({}, t.error) : null), t.status && (n.status = Object.assign({}, t.status)), t.file && (n.output = t.file), t.source) n.file = t.source;else if (t.item || t.id) {\n          var r = t.item ? t.item : i.query(\"GET_ITEM\", t.id);\n          n.file = r ? Te(r) : null;\n        }\n        return t.items && (n.items = t.items.map(Te)), /progress/.test(e) && (n.progress = t.progress), t.hasOwnProperty(\"origin\") && t.hasOwnProperty(\"target\") && (n.origin = t.origin, n.target = t.target), n;\n      };\n    },\n        m = {\n      DID_DESTROY: v(\"destroy\"),\n      DID_INIT: v(\"init\"),\n      DID_THROW_MAX_FILES: v(\"warning\"),\n      DID_INIT_ITEM: v(\"initfile\"),\n      DID_START_ITEM_LOAD: v(\"addfilestart\"),\n      DID_UPDATE_ITEM_LOAD_PROGRESS: v(\"addfileprogress\"),\n      DID_LOAD_ITEM: v(\"addfile\"),\n      DID_THROW_ITEM_INVALID: [v(\"error\"), v(\"addfile\")],\n      DID_THROW_ITEM_LOAD_ERROR: [v(\"error\"), v(\"addfile\")],\n      DID_THROW_ITEM_REMOVE_ERROR: [v(\"error\"), v(\"removefile\")],\n      DID_PREPARE_OUTPUT: v(\"preparefile\"),\n      DID_START_ITEM_PROCESSING: v(\"processfilestart\"),\n      DID_UPDATE_ITEM_PROCESS_PROGRESS: v(\"processfileprogress\"),\n      DID_ABORT_ITEM_PROCESSING: v(\"processfileabort\"),\n      DID_COMPLETE_ITEM_PROCESSING: v(\"processfile\"),\n      DID_COMPLETE_ITEM_PROCESSING_ALL: v(\"processfiles\"),\n      DID_REVERT_ITEM_PROCESSING: v(\"processfilerevert\"),\n      DID_THROW_ITEM_PROCESSING_ERROR: [v(\"error\"), v(\"processfile\")],\n      DID_REMOVE_ITEM: v(\"removefile\"),\n      DID_UPDATE_ITEMS: v(\"updatefiles\"),\n      DID_ACTIVATE_ITEM: v(\"activatefile\"),\n      DID_REORDER_ITEMS: v(\"reorderfiles\")\n    },\n        h = function h(e) {\n      var t = Object.assign({\n        pond: A\n      }, e);\n      delete t.type, p.element.dispatchEvent(new CustomEvent(\"FilePond:\" + e.type, {\n        detail: t,\n        bubbles: !0,\n        cancelable: !0,\n        composed: !0\n      }));\n      var n = [];\n      e.hasOwnProperty(\"error\") && n.push(e.error), e.hasOwnProperty(\"file\") && n.push(e.file);\n      var r = [\"type\", \"error\", \"file\"];\n      Object.keys(e).filter(function (e) {\n        return !r.includes(e);\n      }).forEach(function (t) {\n        return n.push(e[t]);\n      }), A.fire.apply(A, [e.type].concat(n));\n      var o = i.query(\"GET_ON\" + e.type.toUpperCase());\n      o && o.apply(void 0, n);\n    },\n        g = function g(e) {\n      e.length && e.filter(function (e) {\n        return m[e.type];\n      }).forEach(function (e) {\n        var t = m[e.type];\n        (Array.isArray(t) ? t : [t]).forEach(function (t) {\n          \"DID_INIT_ITEM\" === e.type ? h(t(e.data)) : setTimeout(function () {\n            h(t(e.data));\n          }, 0);\n        });\n      });\n    },\n        R = function R(e) {\n      return new Promise(function (t, n) {\n        i.dispatch(\"REQUEST_ITEM_PREPARE\", {\n          query: e,\n          success: function success(e) {\n            t(e);\n          },\n          failure: function failure(e) {\n            n(e);\n          }\n        });\n      });\n    },\n        O = function O(e, t) {\n      var n;\n      return \"object\" != _typeof(e) || (n = e).file && n.id || t || (t = e, e = void 0), i.dispatch(\"REMOVE_ITEM\", Object.assign({}, t, {\n        query: e\n      })), null === i.query(\"GET_ACTIVE_ITEM\", e);\n    },\n        y = function y() {\n      for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {\n        t[n] = arguments[n];\n      }\n\n      return new Promise(function (e, n) {\n        var r = [],\n            o = {};\n        if (P(t[0])) r.push.apply(r, t[0]), Object.assign(o, t[1] || {});else {\n          var a = t[t.length - 1];\n          \"object\" != _typeof(a) || a instanceof Blob || Object.assign(o, t.pop()), r.push.apply(r, t);\n        }\n        i.dispatch(\"ADD_ITEMS\", {\n          items: r,\n          index: o.index,\n          interactionMethod: J,\n          success: e,\n          failure: n\n        });\n      });\n    },\n        D = function D() {\n      return i.query(\"GET_ACTIVE_ITEMS\");\n    },\n        S = function S(e) {\n      return new Promise(function (t, n) {\n        i.dispatch(\"REQUEST_ITEM_PROCESSING\", {\n          query: e,\n          success: function success(e) {\n            t(e);\n          },\n          failure: function failure(e) {\n            n(e);\n          }\n        });\n      });\n    },\n        A = Object.assign({}, pe(), {}, I, {}, function (e, n) {\n      var r = {};\n      return t(n, function (t) {\n        r[t] = {\n          get: function get() {\n            return e.getState().options[t];\n          },\n          set: function set(n) {\n            e.dispatch(\"SET_\" + Z(t, \"_\").toUpperCase(), {\n              value: n\n            });\n          }\n        };\n      }), r;\n    }(i, o), {\n      setOptions: function setOptions(e) {\n        return i.dispatch(\"SET_OPTIONS\", {\n          options: e\n        });\n      },\n      addFile: function addFile(e) {\n        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n        return new Promise(function (n, r) {\n          y([{\n            source: e,\n            options: t\n          }], {\n            index: t.index\n          }).then(function (e) {\n            return n(e && e[0]);\n          })[\"catch\"](r);\n        });\n      },\n      addFiles: y,\n      getFile: function getFile(e) {\n        return i.query(\"GET_ACTIVE_ITEM\", e);\n      },\n      processFile: S,\n      prepareFile: R,\n      removeFile: O,\n      moveFile: function moveFile(e, t) {\n        return i.dispatch(\"MOVE_ITEM\", {\n          query: e,\n          index: t\n        });\n      },\n      getFiles: D,\n      processFiles: function processFiles() {\n        for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {\n          t[n] = arguments[n];\n        }\n\n        var r = Array.isArray(t[0]) ? t[0] : t;\n\n        if (!r.length) {\n          var o = D().filter(function (e) {\n            return !(e.status === Ie.IDLE && e.origin === ve.LOCAL) && e.status !== Ie.PROCESSING && e.status !== Ie.PROCESSING_COMPLETE && e.status !== Ie.PROCESSING_REVERT_ERROR;\n          });\n          return Promise.all(o.map(S));\n        }\n\n        return Promise.all(r.map(S));\n      },\n      removeFiles: function removeFiles() {\n        for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {\n          t[n] = arguments[n];\n        }\n\n        var r,\n            o = Array.isArray(t[0]) ? t[0] : t;\n        \"object\" == _typeof(o[o.length - 1]) ? r = o.pop() : Array.isArray(t[0]) && (r = t[1]);\n        var i = D();\n        return o.length ? o.map(function (e) {\n          return _(e) ? i[e] ? i[e].id : null : e;\n        }).filter(function (e) {\n          return e;\n        }).map(function (e) {\n          return O(e, r);\n        }) : Promise.all(i.map(function (e) {\n          return O(e, r);\n        }));\n      },\n      prepareFiles: function prepareFiles() {\n        for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {\n          t[n] = arguments[n];\n        }\n\n        var r = Array.isArray(t[0]) ? t[0] : t,\n            o = r.length ? r : D();\n        return Promise.all(o.map(R));\n      },\n      sort: function sort(e) {\n        return i.dispatch(\"SORT\", {\n          compare: e\n        });\n      },\n      browse: function browse() {\n        var e = p.element.querySelector(\"input[type=file]\");\n        e && e.click();\n      },\n      destroy: function destroy() {\n        A.fire(\"destroy\", p.element), i.dispatch(\"ABORT_ALL\"), p._destroy(), window.removeEventListener(\"resize\", d), document.removeEventListener(\"visibilitychange\", a), i.dispatch(\"DID_DESTROY\");\n      },\n      insertBefore: function insertBefore(e) {\n        return L(p.element, e);\n      },\n      insertAfter: function insertAfter(e) {\n        return b(p.element, e);\n      },\n      appendTo: function appendTo(e) {\n        return e.appendChild(p.element);\n      },\n      replaceElement: function replaceElement(e) {\n        L(p.element, e), e.parentNode.removeChild(e), r = e;\n      },\n      restoreElement: function restoreElement() {\n        r && (b(r, p.element), p.element.parentNode.removeChild(p.element), r = null);\n      },\n      isAttachedTo: function isAttachedTo(e) {\n        return p.element === e || r === e;\n      },\n      element: {\n        get: function get() {\n          return p.element;\n        }\n      },\n      status: {\n        get: function get() {\n          return i.query(\"GET_STATUS\");\n        }\n      }\n    });\n\n    return i.dispatch(\"DID_INIT\"), n(A);\n  },\n      eo = function eo() {\n    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n        n = {};\n    return t(Se(), function (e, t) {\n      n[e] = t[0];\n    }), Jr(Object.assign({}, n, {}, e));\n  },\n      to = function to(e) {\n    var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n        o = [];\n    t(e.attributes, function (t) {\n      o.push(e.attributes[t]);\n    });\n    var i = o.filter(function (e) {\n      return e.name;\n    }).reduce(function (t, n) {\n      var o,\n          i = r(e, n.name);\n      return t[(o = n.name, Vr(o.replace(/^data-/, \"\")))] = i === n.name || i, t;\n    }, {});\n    return function e(n, r) {\n      t(r, function (r, o) {\n        t(n, function (e, t) {\n          var i = new RegExp(r);\n          if (i.test(e) && (delete n[e], !1 !== o)) if (U(o)) n[o] = t;else {\n            var a,\n                s = o.group;\n            H(o) && !n[s] && (n[s] = {}), n[s][(a = e.replace(i, \"\"), a.charAt(0).toLowerCase() + a.slice(1))] = t;\n          }\n        }), o.mapping && e(n[o.group], o.mapping);\n      });\n    }(i, n), i;\n  },\n      no = function no() {\n    return (arguments.length <= 0 ? void 0 : arguments[0]) instanceof HTMLElement ? function (e) {\n      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n          n = {\n        \"^class$\": \"className\",\n        \"^multiple$\": \"allowMultiple\",\n        \"^capture$\": \"captureMethod\",\n        \"^webkitdirectory$\": \"allowDirectoriesOnly\",\n        \"^server\": {\n          group: \"server\",\n          mapping: {\n            \"^process\": {\n              group: \"process\"\n            },\n            \"^revert\": {\n              group: \"revert\"\n            },\n            \"^fetch\": {\n              group: \"fetch\"\n            },\n            \"^restore\": {\n              group: \"restore\"\n            },\n            \"^load\": {\n              group: \"load\"\n            }\n          }\n        },\n        \"^type$\": !1,\n        \"^files$\": !1\n      };\n      ye(\"SET_ATTRIBUTE_TO_OPTION_MAP\", n);\n      var r = Object.assign({}, t),\n          o = to(\"FIELDSET\" === e.nodeName ? e.querySelector(\"input[type=file]\") : e, n);\n      Object.keys(o).forEach(function (e) {\n        H(o[e]) ? (H(r[e]) || (r[e] = {}), Object.assign(r[e], o[e])) : r[e] = o[e];\n      }), r.files = (t.files || []).concat(Array.from(e.querySelectorAll(\"input:not([type=file])\")).map(function (e) {\n        return {\n          source: e.value,\n          options: {\n            type: e.dataset.type\n          }\n        };\n      }));\n      var i = eo(r);\n      return e.files && Array.from(e.files).forEach(function (e) {\n        i.addFile(e);\n      }), i.replaceElement(e), i;\n    }.apply(void 0, arguments) : eo.apply(void 0, arguments);\n  },\n      ro = [\"fire\", \"_read\", \"_write\"],\n      oo = function oo(e) {\n    var t = {};\n    return Ee(e, t, ro), t;\n  },\n      io = function io(e, t) {\n    return e.replace(/(?:{([a-zA-Z]+)})/g, function (e, n) {\n      return t[n];\n    });\n  },\n      ao = function ao(e) {\n    var t = new Blob([\"(\", e.toString(), \")()\"], {\n      type: \"application/javascript\"\n    }),\n        n = URL.createObjectURL(t),\n        r = new Worker(n);\n    return {\n      transfer: function transfer(e, t) {},\n      post: function post(e, t, n) {\n        var o = oe();\n        r.onmessage = function (e) {\n          e.data.id === o && t(e.data.message);\n        }, r.postMessage({\n          id: o,\n          message: e\n        }, n);\n      },\n      terminate: function terminate() {\n        r.terminate(), URL.revokeObjectURL(n);\n      }\n    };\n  },\n      so = function so(e) {\n    return new Promise(function (t, n) {\n      var r = new Image();\n      r.onload = function () {\n        t(r);\n      }, r.onerror = function (e) {\n        n(e);\n      }, r.src = e;\n    });\n  },\n      uo = function uo(e, t) {\n    var n = e.slice(0, e.size, e.type);\n    return n.lastModifiedDate = e.lastModifiedDate, n.name = t, n;\n  },\n      lo = function lo(e) {\n    return uo(e, e.name);\n  },\n      co = [],\n      fo = function fo(e) {\n    if (!co.includes(e)) {\n      co.push(e);\n      var n,\n          r = e({\n        addFilter: De,\n        utils: {\n          Type: ge,\n          forin: t,\n          isString: U,\n          isFile: ht,\n          toNaturalFileSize: qt,\n          replaceInString: io,\n          getExtensionFromFilename: je,\n          getFilenameWithoutExtension: mt,\n          guesstimateMimeType: tr,\n          getFileFromBlob: We,\n          getFilenameFromURL: ke,\n          createRoute: A,\n          createWorker: ao,\n          createView: S,\n          createItemAPI: Te,\n          loadImage: so,\n          copyFile: lo,\n          renameFile: uo,\n          createBlob: ze,\n          applyFilterChain: Oe,\n          text: Nt,\n          getNumericAspectRatioFromString: be\n        },\n        views: {\n          fileActionButton: Ft\n        }\n      });\n      n = r.options, Object.assign(Ae, n);\n    }\n  },\n      po = (Kt = c() && !(\"[object OperaMini]\" === Object.prototype.toString.call(window.operamini)) && \"visibilityState\" in document && \"Promise\" in window && \"slice\" in Blob.prototype && \"URL\" in window && \"createObjectURL\" in window.URL && \"performance\" in window && (\"supports\" in (window.CSS || {}) || /MSIE|Trident/.test(window.navigator.userAgent)), function () {\n    return Kt;\n  }),\n      Eo = {\n    apps: []\n  },\n      _o = function _o() {};\n\n  if (e.Status = {}, e.FileStatus = {}, e.FileOrigin = {}, e.OptionTypes = {}, e.create = _o, e.destroy = _o, e.parse = _o, e.find = _o, e.registerPlugin = _o, e.getOptions = _o, e.setOptions = _o, po()) {\n    !function (e, t) {\n      var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 60,\n          r = \"__framePainter\";\n      if (window[r]) return window[r].readers.push(e), void window[r].writers.push(t);\n      window[r] = {\n        readers: [e],\n        writers: [t]\n      };\n\n      var o = window[r],\n          i = 1e3 / n,\n          a = null,\n          s = null,\n          u = null,\n          l = null,\n          c = function c() {\n        document.hidden ? (u = function u() {\n          return window.setTimeout(function () {\n            return f(performance.now());\n          }, i);\n        }, l = function l() {\n          return window.clearTimeout(s);\n        }) : (u = function u() {\n          return window.requestAnimationFrame(f);\n        }, l = function l() {\n          return window.cancelAnimationFrame(s);\n        });\n      };\n\n      document.addEventListener(\"visibilitychange\", function () {\n        l && l(), c(), f(performance.now());\n      });\n\n      var f = function e(t) {\n        s = u(e), a || (a = t);\n        var n = t - a;\n        n <= i || (a = t - n % i, o.readers.forEach(function (e) {\n          return e();\n        }), o.writers.forEach(function (e) {\n          return e(t);\n        }));\n      };\n\n      c(), f(performance.now());\n    }(function () {\n      Eo.apps.forEach(function (e) {\n        return e._read();\n      });\n    }, function (e) {\n      Eo.apps.forEach(function (t) {\n        return t._write(e);\n      });\n    });\n\n    var To = function t() {\n      document.dispatchEvent(new CustomEvent(\"FilePond:loaded\", {\n        detail: {\n          supported: po,\n          create: e.create,\n          destroy: e.destroy,\n          parse: e.parse,\n          find: e.find,\n          registerPlugin: e.registerPlugin,\n          setOptions: e.setOptions\n        }\n      })), document.removeEventListener(\"DOMContentLoaded\", t);\n    };\n\n    \"loading\" !== document.readyState ? setTimeout(function () {\n      return To();\n    }, 0) : document.addEventListener(\"DOMContentLoaded\", To);\n\n    var Io = function Io() {\n      return t(Se(), function (t, n) {\n        e.OptionTypes[t] = n[1];\n      });\n    };\n\n    e.Status = Object.assign({}, Me), e.FileOrigin = Object.assign({}, ve), e.FileStatus = Object.assign({}, Ie), e.OptionTypes = {}, Io(), e.create = function () {\n      var t = no.apply(void 0, arguments);\n      return t.on(\"destroy\", e.destroy), Eo.apps.push(t), oo(t);\n    }, e.destroy = function (e) {\n      var t = Eo.apps.findIndex(function (t) {\n        return t.isAttachedTo(e);\n      });\n      return t >= 0 && (Eo.apps.splice(t, 1)[0].restoreElement(), !0);\n    }, e.parse = function (t) {\n      return Array.from(t.querySelectorAll(\".filepond\")).filter(function (e) {\n        return !Eo.apps.find(function (t) {\n          return t.isAttachedTo(e);\n        });\n      }).map(function (t) {\n        return e.create(t);\n      });\n    }, e.find = function (e) {\n      var t = Eo.apps.find(function (t) {\n        return t.isAttachedTo(e);\n      });\n      return t ? oo(t) : null;\n    }, e.registerPlugin = function () {\n      for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) {\n        t[n] = arguments[n];\n      }\n\n      t.forEach(fo), Io();\n    }, e.getOptions = function () {\n      var e = {};\n      return t(Se(), function (t, n) {\n        e[t] = n[0];\n      }), e;\n    }, e.setOptions = function (n) {\n      return H(n) && (Eo.apps.forEach(function (e) {\n        e.setOptions(n);\n      }), function (e) {\n        t(e, function (e, t) {\n          Ae[e] && (Ae[e][0] = z(t, Ae[e][0], Ae[e][1]));\n        });\n      }(n)), e.getOptions();\n    };\n  }\n\n  e.supported = po, Object.defineProperty(e, \"__esModule\", {\n    value: !0\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvdHJhaW5lci9maWxlcG9uZC9maWxlcG9uZC5taW4uanMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBRUEsQ0FBQyxVQUFTQSxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLG9DQUFpQkMsT0FBakIsTUFBMEIsZUFBYSxRQUF2QyxHQUFxREQsQ0FBQyxDQUFDQyxPQUFELENBQXRELEdBQWdFLFFBQXNDRSxpQ0FBTyxDQUFDLE9BQUQsQ0FBRCxvQ0FBYUgsQ0FBYjtBQUFBO0FBQUE7QUFBQSxrR0FBNUMsR0FBNERBLENBQTVIO0FBQXVKLENBQXJLLENBQXNLLElBQXRLLEVBQTJLLFVBQVNELENBQVQsRUFBVztBQUFDOztBQUFhLE1BQUlDLENBQUMsR0FBQyxXQUFTRCxDQUFULEVBQVdDLEdBQVgsRUFBYTtBQUFDLFNBQUksSUFBSU8sQ0FBUixJQUFhUixDQUFiO0FBQWVBLE1BQUFBLENBQUMsQ0FBQ1MsY0FBRixDQUFpQkQsQ0FBakIsS0FBcUJQLEdBQUMsQ0FBQ08sQ0FBRCxFQUFHUixDQUFDLENBQUNRLENBQUQsQ0FBSixDQUF0QjtBQUFmO0FBQThDLEdBQWxFO0FBQUEsTUFBbUVBLENBQUMsR0FBQyxXQUFTUixDQUFULEVBQVc7QUFBQyxRQUFJUSxDQUFDLEdBQUMsRUFBTjtBQUFTLFdBQU9QLENBQUMsQ0FBQ0QsQ0FBRCxFQUFHLFVBQVNDLENBQVQsRUFBVztBQUFDLE9BQUMsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWFPLENBQWIsRUFBZTtBQUFDLHNCQUFZLE9BQU9BLENBQW5CLEdBQXFCRSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JYLENBQXRCLEVBQXdCQyxDQUF4QixFQUEwQlMsTUFBTSxDQUFDRSxNQUFQLENBQWMsRUFBZCxFQUFpQkosQ0FBakIsQ0FBMUIsQ0FBckIsR0FBb0VSLENBQUMsQ0FBQ0MsQ0FBRCxDQUFELEdBQUtPLENBQXpFO0FBQTJFLE9BQTNGLENBQTRGQSxDQUE1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LElBQUFBLEtBQUssRUFBQyxDQUFDO0FBQVIsR0FBckMsQ0FBZjtBQUFnRSxDQUFqb2xILENBQUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvdHJhaW5lci9maWxlcG9uZC9maWxlcG9uZC5taW4uanM/YTg5MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEZpbGVQb25kIDQuMzAuM1xuICogTGljZW5zZWQgdW5kZXIgTUlULCBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVC9cbiAqIFBsZWFzZSB2aXNpdCBodHRwczovL3BxaW5hLm5sL2ZpbGVwb25kLyBmb3IgZGV0YWlscy5cbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4hZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT90KGV4cG9ydHMpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wiZXhwb3J0c1wiXSx0KTp0KChlPWV8fHNlbGYpLkZpbGVQb25kPXt9KX0odGhpcyxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjt2YXIgdD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbiBpbiBlKWUuaGFzT3duUHJvcGVydHkobikmJnQobixlW25dKX0sbj1mdW5jdGlvbihlKXt2YXIgbj17fTtyZXR1cm4gdChlLGZ1bmN0aW9uKHQpeyFmdW5jdGlvbihlLHQsbil7XCJmdW5jdGlvblwiIT10eXBlb2Ygbj9PYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LE9iamVjdC5hc3NpZ24oe30sbikpOmVbdF09bn0obix0LGVbdF0pfSksbn0scj1mdW5jdGlvbihlLHQpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKG51bGw9PT1uKXJldHVybiBlLmdldEF0dHJpYnV0ZSh0KXx8ZS5oYXNBdHRyaWJ1dGUodCk7ZS5zZXRBdHRyaWJ1dGUodCxuKX0sbz1bXCJzdmdcIixcInBhdGhcIl0saT1mdW5jdGlvbihlKXtyZXR1cm4gby5pbmNsdWRlcyhlKX0sYT1mdW5jdGlvbihlLG4pe3ZhciBvPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp7fTtcIm9iamVjdFwiPT10eXBlb2YgbiYmKG89bixuPW51bGwpO3ZhciBhPWkoZSk/ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixlKTpkb2N1bWVudC5jcmVhdGVFbGVtZW50KGUpO3JldHVybiBuJiYoaShlKT9yKGEsXCJjbGFzc1wiLG4pOmEuY2xhc3NOYW1lPW4pLHQobyxmdW5jdGlvbihlLHQpe3IoYSxlLHQpfSksYX0scz1mdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbihlLG4pe3JldHVybiB2b2lkIDAhPT1uP3Quc3BsaWNlKG4sMCxlKTp0LnB1c2goZSksZX19LHU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZnVuY3Rpb24obil7cmV0dXJuIHQuc3BsaWNlKHQuaW5kZXhPZihuKSwxKSxuLmVsZW1lbnQucGFyZW50Tm9kZSYmZS5yZW1vdmVDaGlsZChuLmVsZW1lbnQpLG59fSxsPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJnZvaWQgMCE9PXdpbmRvdy5kb2N1bWVudCxjPWZ1bmN0aW9uKCl7cmV0dXJuIGx9LGY9XCJjaGlsZHJlblwiaW4oYygpP2EoXCJzdmdcIik6e30pP2Z1bmN0aW9uKGUpe3JldHVybiBlLmNoaWxkcmVuLmxlbmd0aH06ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY2hpbGROb2Rlcy5sZW5ndGh9LGQ9ZnVuY3Rpb24oZSx0LG4scil7dmFyIG89blswXXx8ZS5sZWZ0LGk9blsxXXx8ZS50b3AsYT1vK2Uud2lkdGgscz1pK2UuaGVpZ2h0KihyWzFdfHwxKSx1PXtlbGVtZW50Ok9iamVjdC5hc3NpZ24oe30sZSksaW5uZXI6e2xlZnQ6ZS5sZWZ0LHRvcDplLnRvcCxyaWdodDplLnJpZ2h0LGJvdHRvbTplLmJvdHRvbX0sb3V0ZXI6e2xlZnQ6byx0b3A6aSxyaWdodDphLGJvdHRvbTpzfX07cmV0dXJuIHQuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiFlLmlzUmVjdElnbm9yZWQoKX0pLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5yZWN0fSkuZm9yRWFjaChmdW5jdGlvbihlKXtwKHUuaW5uZXIsT2JqZWN0LmFzc2lnbih7fSxlLmlubmVyKSkscCh1Lm91dGVyLE9iamVjdC5hc3NpZ24oe30sZS5vdXRlcikpfSksRSh1LmlubmVyKSx1Lm91dGVyLmJvdHRvbSs9dS5lbGVtZW50Lm1hcmdpbkJvdHRvbSx1Lm91dGVyLnJpZ2h0Kz11LmVsZW1lbnQubWFyZ2luUmlnaHQsRSh1Lm91dGVyKSx1fSxwPWZ1bmN0aW9uKGUsdCl7dC50b3ArPWUudG9wLHQucmlnaHQrPWUubGVmdCx0LmJvdHRvbSs9ZS50b3AsdC5sZWZ0Kz1lLmxlZnQsdC5ib3R0b20+ZS5ib3R0b20mJihlLmJvdHRvbT10LmJvdHRvbSksdC5yaWdodD5lLnJpZ2h0JiYoZS5yaWdodD10LnJpZ2h0KX0sRT1mdW5jdGlvbihlKXtlLndpZHRoPWUucmlnaHQtZS5sZWZ0LGUuaGVpZ2h0PWUuYm90dG9tLWUudG9wfSxfPWZ1bmN0aW9uKGUpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiBlfSxUPWZ1bmN0aW9uKGUpe3JldHVybiBlPC41PzIqZSplOig0LTIqZSkqZS0xfSxJPXtzcHJpbmc6ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e30sdD1lLnN0aWZmbmVzcyxyPXZvaWQgMD09PXQ/LjU6dCxvPWUuZGFtcGluZyxpPXZvaWQgMD09PW8/Ljc1Om8sYT1lLm1hc3Mscz12b2lkIDA9PT1hPzEwOmEsdT1udWxsLGw9bnVsbCxjPTAsZj0hMSxkPW4oe2ludGVycG9sYXRlOmZ1bmN0aW9uKGUsdCl7aWYoIWYpe2lmKCFfKHUpfHwhXyhsKSlyZXR1cm4gZj0hMCx2b2lkKGM9MCk7KGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106LjAwMTtyZXR1cm4gTWF0aC5hYnMoZS10KTxyJiZNYXRoLmFicyhuKTxyfSkobCs9Yys9LShsLXUpKnIvcyx1LGMqPWkpfHx0PyhsPXUsYz0wLGY9ITAsZC5vbnVwZGF0ZShsKSxkLm9uY29tcGxldGUobCkpOmQub251cGRhdGUobCl9fSx0YXJnZXQ6e3NldDpmdW5jdGlvbihlKXtpZihfKGUpJiYhXyhsKSYmKGw9ZSksbnVsbD09PXUmJih1PWUsbD1lKSxsPT09KHU9ZSl8fHZvaWQgMD09PXUpcmV0dXJuIGY9ITAsYz0wLGQub251cGRhdGUobCksdm9pZCBkLm9uY29tcGxldGUobCk7Zj0hMX0sZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHV9fSxyZXN0aW5nOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZn19LG9udXBkYXRlOmZ1bmN0aW9uKGUpe30sb25jb21wbGV0ZTpmdW5jdGlvbihlKXt9fSk7cmV0dXJuIGR9LHR3ZWVuOmZ1bmN0aW9uKCl7dmFyIGUsdCxyPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSxvPXIuZHVyYXRpb24saT12b2lkIDA9PT1vPzUwMDpvLGE9ci5lYXNpbmcscz12b2lkIDA9PT1hP1Q6YSx1PXIuZGVsYXksbD12b2lkIDA9PT11PzA6dSxjPW51bGwsZj0hMCxkPSExLHA9bnVsbCxFPW4oe2ludGVycG9sYXRlOmZ1bmN0aW9uKG4scil7Znx8bnVsbD09PXB8fChudWxsPT09YyYmKGM9biksbi1jPGx8fCgoZT1uLWMtbCk+PWl8fHI/KGU9MSx0PWQ/MDoxLEUub251cGRhdGUodCpwKSxFLm9uY29tcGxldGUodCpwKSxmPSEwKToodD1lL2ksRS5vbnVwZGF0ZSgoZT49MD9zKGQ/MS10OnQpOjApKnApKSkpfSx0YXJnZXQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBkPzA6cH0sc2V0OmZ1bmN0aW9uKGUpe2lmKG51bGw9PT1wKXJldHVybiBwPWUsRS5vbnVwZGF0ZShlKSx2b2lkIEUub25jb21wbGV0ZShlKTtlPHA/KHA9MSxkPSEwKTooZD0hMSxwPWUpLGY9ITEsYz1udWxsfX0scmVzdGluZzp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGZ9fSxvbnVwZGF0ZTpmdW5jdGlvbihlKXt9LG9uY29tcGxldGU6ZnVuY3Rpb24oZSl7fX0pO3JldHVybiBFfX0sdj1mdW5jdGlvbihlLHQsbil7dmFyIHI9ZVt0XSYmXCJvYmplY3RcIj09dHlwZW9mIGVbdF1bbl0/ZVt0XVtuXTplW3RdfHxlLG89XCJzdHJpbmdcIj09dHlwZW9mIHI/cjpyLnR5cGUsaT1cIm9iamVjdFwiPT10eXBlb2Ygcj9PYmplY3QuYXNzaWduKHt9LHIpOnt9O3JldHVybiBJW29dP0lbb10oaSk6bnVsbH0sbT1mdW5jdGlvbihlLHQsbil7dmFyIHI9YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10mJmFyZ3VtZW50c1szXTsodD1BcnJheS5pc0FycmF5KHQpP3Q6W3RdKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2UuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgbz1lLGk9ZnVuY3Rpb24oKXtyZXR1cm4gbltlXX0sYT1mdW5jdGlvbih0KXtyZXR1cm4gbltlXT10fTtcIm9iamVjdFwiPT10eXBlb2YgZSYmKG89ZS5rZXksaT1lLmdldHRlcnx8aSxhPWUuc2V0dGVyfHxhKSx0W29dJiYhcnx8KHRbb109e2dldDppLHNldDphfSl9KX0pfSxoPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT1lfSxnPXtvcGFjaXR5OjEsc2NhbGVYOjEsc2NhbGVZOjEsdHJhbnNsYXRlWDowLHRyYW5zbGF0ZVk6MCxyb3RhdGVYOjAscm90YXRlWTowLHJvdGF0ZVo6MCxvcmlnaW5YOjAsb3JpZ2luWTowfSxSPWZ1bmN0aW9uKGUsdCl7aWYoT2JqZWN0LmtleXMoZSkubGVuZ3RoIT09T2JqZWN0LmtleXModCkubGVuZ3RoKXJldHVybiEwO2Zvcih2YXIgbiBpbiB0KWlmKHRbbl0hPT1lW25dKXJldHVybiEwO3JldHVybiExfSxPPWZ1bmN0aW9uKGUsdCl7dmFyIG49dC5vcGFjaXR5LHI9dC5wZXJzcGVjdGl2ZSxvPXQudHJhbnNsYXRlWCxpPXQudHJhbnNsYXRlWSxhPXQuc2NhbGVYLHM9dC5zY2FsZVksdT10LnJvdGF0ZVgsbD10LnJvdGF0ZVksYz10LnJvdGF0ZVosZj10Lm9yaWdpblgsZD10Lm9yaWdpblkscD10LndpZHRoLEU9dC5oZWlnaHQsXz1cIlwiLFQ9XCJcIjsoaChmKXx8aChkKSkmJihUKz1cInRyYW5zZm9ybS1vcmlnaW46IFwiKyhmfHwwKStcInB4IFwiKyhkfHwwKStcInB4O1wiKSxoKHIpJiYoXys9XCJwZXJzcGVjdGl2ZShcIityK1wicHgpIFwiKSwoaChvKXx8aChpKSkmJihfKz1cInRyYW5zbGF0ZTNkKFwiKyhvfHwwKStcInB4LCBcIisoaXx8MCkrXCJweCwgMCkgXCIpLChoKGEpfHxoKHMpKSYmKF8rPVwic2NhbGUzZChcIisoaChhKT9hOjEpK1wiLCBcIisoaChzKT9zOjEpK1wiLCAxKSBcIiksaChjKSYmKF8rPVwicm90YXRlWihcIitjK1wicmFkKSBcIiksaCh1KSYmKF8rPVwicm90YXRlWChcIit1K1wicmFkKSBcIiksaChsKSYmKF8rPVwicm90YXRlWShcIitsK1wicmFkKSBcIiksXy5sZW5ndGgmJihUKz1cInRyYW5zZm9ybTpcIitfK1wiO1wiKSxoKG4pJiYoVCs9XCJvcGFjaXR5OlwiK24rXCI7XCIsMD09PW4mJihUKz1cInZpc2liaWxpdHk6aGlkZGVuO1wiKSxuPDEmJihUKz1cInBvaW50ZXItZXZlbnRzOm5vbmU7XCIpKSxoKEUpJiYoVCs9XCJoZWlnaHQ6XCIrRStcInB4O1wiKSxoKHApJiYoVCs9XCJ3aWR0aDpcIitwK1wicHg7XCIpO3ZhciBJPWUuZWxlbWVudEN1cnJlbnRTdHlsZXx8XCJcIjtULmxlbmd0aD09PUkubGVuZ3RoJiZUPT09SXx8KGUuc3R5bGUuY3NzVGV4dD1ULGUuZWxlbWVudEN1cnJlbnRTdHlsZT1UKX0seT17c3R5bGVzOmZ1bmN0aW9uKGUpe3ZhciB0PWUubWl4aW5Db25maWcsbj1lLnZpZXdQcm9wcyxyPWUudmlld0ludGVybmFsQVBJLG89ZS52aWV3RXh0ZXJuYWxBUEksaT1lLnZpZXcsYT1PYmplY3QuYXNzaWduKHt9LG4pLHM9e307bSh0LFtyLG9dLG4pO3ZhciB1PWZ1bmN0aW9uKCl7cmV0dXJuIGkucmVjdD9kKGkucmVjdCxpLmNoaWxkVmlld3MsW24udHJhbnNsYXRlWHx8MCxuLnRyYW5zbGF0ZVl8fDBdLFtuLnNjYWxlWHx8MCxuLnNjYWxlWXx8MF0pOm51bGx9O3JldHVybiByLnJlY3Q9e2dldDp1fSxvLnJlY3Q9e2dldDp1fSx0LmZvckVhY2goZnVuY3Rpb24oZSl7bltlXT12b2lkIDA9PT1hW2VdP2dbZV06YVtlXX0pLHt3cml0ZTpmdW5jdGlvbigpe2lmKFIocyxuKSlyZXR1cm4gTyhpLmVsZW1lbnQsbiksT2JqZWN0LmFzc2lnbihzLE9iamVjdC5hc3NpZ24oe30sbikpLCEwfSxkZXN0cm95OmZ1bmN0aW9uKCl7fX19LGxpc3RlbmVyczpmdW5jdGlvbihlKXtlLm1peGluQ29uZmlnLGUudmlld1Byb3BzLGUudmlld0ludGVybmFsQVBJO3ZhciB0LG49ZS52aWV3RXh0ZXJuYWxBUEkscj0oZS52aWV3U3RhdGUsZS52aWV3KSxvPVtdLGk9KHQ9ci5lbGVtZW50LGZ1bmN0aW9uKGUsbil7dC5hZGRFdmVudExpc3RlbmVyKGUsbil9KSxhPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LG4pe2UucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LG4pfX0oci5lbGVtZW50KTtyZXR1cm4gbi5vbj1mdW5jdGlvbihlLHQpe28ucHVzaCh7dHlwZTplLGZuOnR9KSxpKGUsdCl9LG4ub2ZmPWZ1bmN0aW9uKGUsdCl7by5zcGxpY2Uoby5maW5kSW5kZXgoZnVuY3Rpb24obil7cmV0dXJuIG4udHlwZT09PWUmJm4uZm49PT10fSksMSksYShlLHQpfSx7d3JpdGU6ZnVuY3Rpb24oKXtyZXR1cm4hMH0sZGVzdHJveTpmdW5jdGlvbigpe28uZm9yRWFjaChmdW5jdGlvbihlKXthKGUudHlwZSxlLmZuKX0pfX19LGFuaW1hdGlvbnM6ZnVuY3Rpb24oZSl7dmFyIG49ZS5taXhpbkNvbmZpZyxyPWUudmlld1Byb3BzLG89ZS52aWV3SW50ZXJuYWxBUEksaT1lLnZpZXdFeHRlcm5hbEFQSSxhPU9iamVjdC5hc3NpZ24oe30scikscz1bXTtyZXR1cm4gdChuLGZ1bmN0aW9uKGUsdCl7dmFyIG49dih0KTtuJiYobi5vbnVwZGF0ZT1mdW5jdGlvbih0KXtyW2VdPXR9LG4udGFyZ2V0PWFbZV0sbShbe2tleTplLHNldHRlcjpmdW5jdGlvbihlKXtuLnRhcmdldCE9PWUmJihuLnRhcmdldD1lKX0sZ2V0dGVyOmZ1bmN0aW9uKCl7cmV0dXJuIHJbZV19fV0sW28saV0sciwhMCkscy5wdXNoKG4pKX0pLHt3cml0ZTpmdW5jdGlvbihlKXt2YXIgdD1kb2N1bWVudC5oaWRkZW4sbj0hMDtyZXR1cm4gcy5mb3JFYWNoKGZ1bmN0aW9uKHIpe3IucmVzdGluZ3x8KG49ITEpLHIuaW50ZXJwb2xhdGUoZSx0KX0pLG59LGRlc3Ryb3k6ZnVuY3Rpb24oKXt9fX0sYXBpczpmdW5jdGlvbihlKXt2YXIgdD1lLm1peGluQ29uZmlnLG49ZS52aWV3UHJvcHMscj1lLnZpZXdFeHRlcm5hbEFQSTttKHQscixuKX19LEQ9ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e30sdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30sbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e307cmV0dXJuIHQubGF5b3V0Q2FsY3VsYXRlZHx8KGUucGFkZGluZ1RvcD1wYXJzZUludChuLnBhZGRpbmdUb3AsMTApfHwwLGUubWFyZ2luVG9wPXBhcnNlSW50KG4ubWFyZ2luVG9wLDEwKXx8MCxlLm1hcmdpblJpZ2h0PXBhcnNlSW50KG4ubWFyZ2luUmlnaHQsMTApfHwwLGUubWFyZ2luQm90dG9tPXBhcnNlSW50KG4ubWFyZ2luQm90dG9tLDEwKXx8MCxlLm1hcmdpbkxlZnQ9cGFyc2VJbnQobi5tYXJnaW5MZWZ0LDEwKXx8MCx0LmxheW91dENhbGN1bGF0ZWQ9ITApLGUubGVmdD10Lm9mZnNldExlZnR8fDAsZS50b3A9dC5vZmZzZXRUb3B8fDAsZS53aWR0aD10Lm9mZnNldFdpZHRofHwwLGUuaGVpZ2h0PXQub2Zmc2V0SGVpZ2h0fHwwLGUucmlnaHQ9ZS5sZWZ0K2Uud2lkdGgsZS5ib3R0b209ZS50b3ArZS5oZWlnaHQsZS5zY3JvbGxUb3A9dC5zY3JvbGxUb3AsZS5oaWRkZW49bnVsbD09PXQub2Zmc2V0UGFyZW50LGV9LFM9ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e30sdD1lLnRhZyxyPXZvaWQgMD09PXQ/XCJkaXZcIjp0LG89ZS5uYW1lLGk9dm9pZCAwPT09bz9udWxsOm8sbD1lLmF0dHJpYnV0ZXMsYz12b2lkIDA9PT1sP3t9OmwscD1lLnJlYWQsRT12b2lkIDA9PT1wP2Z1bmN0aW9uKCl7fTpwLF89ZS53cml0ZSxUPXZvaWQgMD09PV8/ZnVuY3Rpb24oKXt9Ol8sST1lLmNyZWF0ZSx2PXZvaWQgMD09PUk/ZnVuY3Rpb24oKXt9OkksbT1lLmRlc3Ryb3ksaD12b2lkIDA9PT1tP2Z1bmN0aW9uKCl7fTptLGc9ZS5maWx0ZXJGcmFtZUFjdGlvbnNGb3JDaGlsZCxSPXZvaWQgMD09PWc/ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdH06ZyxPPWUuZGlkQ3JlYXRlVmlldyxTPXZvaWQgMD09PU8/ZnVuY3Rpb24oKXt9Ok8sQT1lLmRpZFdyaXRlVmlldyxMPXZvaWQgMD09PUE/ZnVuY3Rpb24oKXt9OkEsYj1lLmlnbm9yZVJlY3QsUD12b2lkIDAhPT1iJiZiLE09ZS5pZ25vcmVSZWN0VXBkYXRlLHc9dm9pZCAwIT09TSYmTSxDPWUubWl4aW5zLE49dm9pZCAwPT09Qz9bXTpDO3JldHVybiBmdW5jdGlvbihlKXt2YXIgdCxvPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fSxsPWEocixcImZpbGVwb25kLS1cIitpLGMpLHA9d2luZG93LmdldENvbXB1dGVkU3R5bGUobCxudWxsKSxfPUQoKSxJPW51bGwsbT0hMSxnPVtdLE89W10sQT17fSxiPXt9LE09W1RdLEM9W0VdLEc9W2hdLFU9ZnVuY3Rpb24oKXtyZXR1cm4gbH0sQj1mdW5jdGlvbigpe3JldHVybiBnLmNvbmNhdCgpfSxGPWZ1bmN0aW9uKCl7cmV0dXJuIEl8fChJPWQoXyxnLFswLDBdLFsxLDFdKSl9LHE9e2VsZW1lbnQ6e2dldDpVfSxzdHlsZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHB9fSxjaGlsZFZpZXdzOntnZXQ6Qn19LFY9T2JqZWN0LmFzc2lnbih7fSxxLHtyZWN0OntnZXQ6Rn0scmVmOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQX19LGlzOmZ1bmN0aW9uKGUpe3JldHVybiBpPT09ZX0sYXBwZW5kQ2hpbGQ6KHQ9bCxmdW5jdGlvbihlLG4pe3ZvaWQgMCE9PW4mJnQuY2hpbGRyZW5bbl0/dC5pbnNlcnRCZWZvcmUoZSx0LmNoaWxkcmVuW25dKTp0LmFwcGVuZENoaWxkKGUpfSksY3JlYXRlQ2hpbGRWaWV3OmZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LG4pe3JldHVybiB0KGUsbil9fShlKSxsaW5rVmlldzpmdW5jdGlvbihlKXtyZXR1cm4gZy5wdXNoKGUpLGV9LHVubGlua1ZpZXc6ZnVuY3Rpb24oZSl7Zy5zcGxpY2UoZy5pbmRleE9mKGUpLDEpfSxhcHBlbmRDaGlsZFZpZXc6cygwLGcpLHJlbW92ZUNoaWxkVmlldzp1KGwsZykscmVnaXN0ZXJXcml0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIE0ucHVzaChlKX0scmVnaXN0ZXJSZWFkZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIEMucHVzaChlKX0scmVnaXN0ZXJEZXN0cm95ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIEcucHVzaChlKX0saW52YWxpZGF0ZUxheW91dDpmdW5jdGlvbigpe3JldHVybiBsLmxheW91dENhbGN1bGF0ZWQ9ITF9LGRpc3BhdGNoOmUuZGlzcGF0Y2gscXVlcnk6ZS5xdWVyeX0pLHg9e2VsZW1lbnQ6e2dldDpVfSxjaGlsZFZpZXdzOntnZXQ6Qn0scmVjdDp7Z2V0OkZ9LHJlc3Rpbmc6e2dldDpmdW5jdGlvbigpe3JldHVybiBtfX0saXNSZWN0SWdub3JlZDpmdW5jdGlvbigpe3JldHVybiBQfSxfcmVhZDpmdW5jdGlvbigpe0k9bnVsbCxnLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGUuX3JlYWQoKX0pLCEodyYmXy53aWR0aCYmXy5oZWlnaHQpJiZEKF8sbCxwKTt2YXIgZT17cm9vdDprLHByb3BzOm8scmVjdDpffTtDLmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIHQoZSl9KX0sX3dyaXRlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj0wPT09dC5sZW5ndGg7cmV0dXJuIE0uZm9yRWFjaChmdW5jdGlvbihpKXshMT09PWkoe3Byb3BzOm8scm9vdDprLGFjdGlvbnM6dCx0aW1lc3RhbXA6ZSxzaG91bGRPcHRpbWl6ZTpufSkmJihyPSExKX0pLE8uZm9yRWFjaChmdW5jdGlvbih0KXshMT09PXQud3JpdGUoZSkmJihyPSExKX0pLGcuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiEhZS5lbGVtZW50LnBhcmVudE5vZGV9KS5mb3JFYWNoKGZ1bmN0aW9uKG8pe28uX3dyaXRlKGUsUihvLHQpLG4pfHwocj0hMSl9KSxnLmZvckVhY2goZnVuY3Rpb24obyxpKXtvLmVsZW1lbnQucGFyZW50Tm9kZXx8KGsuYXBwZW5kQ2hpbGQoby5lbGVtZW50LGkpLG8uX3JlYWQoKSxvLl93cml0ZShlLFIobyx0KSxuKSxyPSExKX0pLG09cixMKHtwcm9wczpvLHJvb3Q6ayxhY3Rpb25zOnQsdGltZXN0YW1wOmV9KSxyfSxfZGVzdHJveTpmdW5jdGlvbigpe08uZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS5kZXN0cm95KCl9KSxHLmZvckVhY2goZnVuY3Rpb24oZSl7ZSh7cm9vdDprLHByb3BzOm99KX0pLGcuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS5fZGVzdHJveSgpfSl9fSxZPU9iamVjdC5hc3NpZ24oe30scSx7cmVjdDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIF99fX0pO09iamVjdC5rZXlzKE4pLnNvcnQoZnVuY3Rpb24oZSx0KXtyZXR1cm5cInN0eWxlc1wiPT09ZT8xOlwic3R5bGVzXCI9PT10Py0xOjB9KS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PXlbZV0oe21peGluQ29uZmlnOk5bZV0sdmlld1Byb3BzOm8sdmlld1N0YXRlOmIsdmlld0ludGVybmFsQVBJOlYsdmlld0V4dGVybmFsQVBJOngsdmlldzpuKFkpfSk7dCYmTy5wdXNoKHQpfSk7dmFyIGs9bihWKTt2KHtyb290OmsscHJvcHM6b30pO3ZhciBqPWYobCk7cmV0dXJuIGcuZm9yRWFjaChmdW5jdGlvbihlLHQpe2suYXBwZW5kQ2hpbGQoZS5lbGVtZW50LGordCl9KSxTKGspLG4oeCl9fSxBPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKG4pe3ZhciByPW4ucm9vdCxvPW4ucHJvcHMsaT1uLmFjdGlvbnMsYT12b2lkIDA9PT1pP1tdOmkscz1uLnRpbWVzdGFtcCx1PW4uc2hvdWxkT3B0aW1pemU7YS5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIGVbdC50eXBlXX0pLmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIGVbdC50eXBlXSh7cm9vdDpyLHByb3BzOm8sYWN0aW9uOnQuZGF0YSx0aW1lc3RhbXA6cyxzaG91bGRPcHRpbWl6ZTp1fSl9KSx0JiZ0KHtyb290OnIscHJvcHM6byxhY3Rpb25zOmEsdGltZXN0YW1wOnMsc2hvdWxkT3B0aW1pemU6dX0pfX0sTD1mdW5jdGlvbihlLHQpe3JldHVybiB0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGUsdCl9LGI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLHQubmV4dFNpYmxpbmcpfSxQPWZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpfSxNPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lfSx3PWZ1bmN0aW9uKGUpe3JldHVybiBlLnRyaW0oKX0sQz1mdW5jdGlvbihlKXtyZXR1cm5cIlwiK2V9LE49ZnVuY3Rpb24oZSl7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBlfSxHPWZ1bmN0aW9uKGUpe3JldHVybiBOKGUpP2U6XCJ0cnVlXCI9PT1lfSxVPWZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlfSxCPWZ1bmN0aW9uKGUpe3JldHVybiBfKGUpP2U6VShlKT9DKGUpLnJlcGxhY2UoL1thLXpdKy9naSxcIlwiKTowfSxGPWZ1bmN0aW9uKGUpe3JldHVybiBwYXJzZUludChCKGUpLDEwKX0scT1mdW5jdGlvbihlKXtyZXR1cm4gcGFyc2VGbG9hdChCKGUpKX0sVj1mdW5jdGlvbihlKXtyZXR1cm4gXyhlKSYmaXNGaW5pdGUoZSkmJk1hdGguZmxvb3IoZSk9PT1lfSx4PWZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXToxZTM7aWYoVihlKSlyZXR1cm4gZTt2YXIgbj1DKGUpLnRyaW0oKTtyZXR1cm4vTUIkL2kudGVzdChuKT8obj1uLnJlcGxhY2UoL01CJGkvLFwiXCIpLnRyaW0oKSxGKG4pKnQqdCk6L0tCL2kudGVzdChuKT8obj1uLnJlcGxhY2UoL0tCJGkvLFwiXCIpLnRyaW0oKSxGKG4pKnQpOkYobil9LFk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZX0saz17cHJvY2VzczpcIlBPU1RcIixwYXRjaDpcIlBBVENIXCIscmV2ZXJ0OlwiREVMRVRFXCIsZmV0Y2g6XCJHRVRcIixyZXN0b3JlOlwiR0VUXCIsbG9hZDpcIkdFVFwifSxqPWZ1bmN0aW9uKGUsdCxuLHIsbyl7aWYobnVsbD09PXQpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdClyZXR1cm4gdDt2YXIgaT17dXJsOlwiR0VUXCI9PT1ufHxcIlBBVENIXCI9PT1uP1wiP1wiK2UrXCI9XCI6XCJcIixtZXRob2Q6bixoZWFkZXJzOm8sd2l0aENyZWRlbnRpYWxzOiExLHRpbWVvdXQ6cixvbmxvYWQ6bnVsbCxvbmRhdGE6bnVsbCxvbmVycm9yOm51bGx9O2lmKFUodCkpcmV0dXJuIGkudXJsPXQsaTtpZihPYmplY3QuYXNzaWduKGksdCksVShpLmhlYWRlcnMpKXt2YXIgYT1pLmhlYWRlcnMuc3BsaXQoLzooLispLyk7aS5oZWFkZXJzPXtoZWFkZXI6YVswXSx2YWx1ZTphWzFdfX1yZXR1cm4gaS53aXRoQ3JlZGVudGlhbHM9RyhpLndpdGhDcmVkZW50aWFscyksaX0sSD1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWV9LFg9ZnVuY3Rpb24oZSl7cmV0dXJuIFAoZSk/XCJhcnJheVwiOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09ZX0oZSk/XCJudWxsXCI6VihlKT9cImludFwiOi9eWzAtOV0rID8oPzpHQnxNQnxLQikkL2dpLnRlc3QoZSk/XCJieXRlc1wiOmZ1bmN0aW9uKGUpe3JldHVybiBIKGUpJiZVKGUudXJsKSYmSChlLnByb2Nlc3MpJiZIKGUucmV2ZXJ0KSYmSChlLnJlc3RvcmUpJiZIKGUuZmV0Y2gpfShlKT9cImFwaVwiOnR5cGVvZiBlfSxXPXthcnJheTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06XCIsXCI7cmV0dXJuIE0oZSk/W106UChlKT9lOkMoZSkuc3BsaXQodCkubWFwKHcpLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5sZW5ndGh9KX0sYm9vbGVhbjpHLGludDpmdW5jdGlvbihlKXtyZXR1cm5cImJ5dGVzXCI9PT1YKGUpP3goZSk6RihlKX0sbnVtYmVyOnEsZmxvYXQ6cSxieXRlczp4LHN0cmluZzpmdW5jdGlvbihlKXtyZXR1cm4gWShlKT9lOkMoZSl9LGZ1bmN0aW9uOmZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihlKXtmb3IodmFyIHQ9c2VsZixuPWUuc3BsaXQoXCIuXCIpLHI9bnVsbDtyPW4uc2hpZnQoKTspaWYoISh0PXRbcl0pKXJldHVybiBudWxsO3JldHVybiB0fShlKX0sc2VydmVyYXBpOmZ1bmN0aW9uKGUpe3JldHVybihyPXt9KS51cmw9VShuPWUpP246bi51cmx8fFwiXCIsci50aW1lb3V0PW4udGltZW91dD9wYXJzZUludChuLnRpbWVvdXQsMTApOjAsci5oZWFkZXJzPW4uaGVhZGVycz9uLmhlYWRlcnM6e30sdChrLGZ1bmN0aW9uKGUpe3JbZV09aihlLG5bZV0sa1tlXSxyLnRpbWVvdXQsci5oZWFkZXJzKX0pLHIucHJvY2Vzcz1uLnByb2Nlc3N8fFUobil8fG4udXJsP3IucHJvY2VzczpudWxsLHIucmVtb3ZlPW4ucmVtb3ZlfHxudWxsLGRlbGV0ZSByLmhlYWRlcnMscjt2YXIgbixyfSxvYmplY3Q6ZnVuY3Rpb24oZSl7dHJ5e3JldHVybiBKU09OLnBhcnNlKGUucmVwbGFjZSgve1xccyonL2csJ3tcIicpLnJlcGxhY2UoLydcXHMqfS9nLCdcIn0nKS5yZXBsYWNlKC8nXFxzKjovZywnXCI6JykucmVwbGFjZSgvOlxccyonL2csJzpcIicpLnJlcGxhY2UoLyxcXHMqJy9nLCcsXCInKS5yZXBsYWNlKC8nXFxzKiwvZywnXCIsJykpfWNhdGNoKGUpe3JldHVybiBudWxsfX19LHo9ZnVuY3Rpb24oZSx0LG4pe2lmKGU9PT10KXJldHVybiBlO3ZhciByLG89WChlKTtpZihvIT09bil7dmFyIGk9KHI9ZSxXW25dKHIpKTtpZihvPVgoaSksbnVsbD09PWkpdGhyb3cnVHJ5aW5nIHRvIGFzc2lnbiB2YWx1ZSB3aXRoIGluY29ycmVjdCB0eXBlIHRvIFwiJytvcHRpb24rJ1wiLCBhbGxvd2VkIHR5cGU6IFwiJytuKydcIic7ZT1pfXJldHVybiBlfSxRPWZ1bmN0aW9uKGUpe3ZhciByPXt9O3JldHVybiB0KGUsZnVuY3Rpb24odCl7dmFyIG4sbyxpLGE9ZVt0XTtyW3RdPShuPWFbMF0sbz1hWzFdLGk9bix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX0sc2V0OmZ1bmN0aW9uKGUpe2k9eihlLG4sbyl9fSl9KSxuKHIpfSxaPWZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpcIi1cIjtyZXR1cm4gZS5zcGxpdCgvKD89W0EtWl0pLykubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLnRvTG93ZXJDYXNlKCl9KS5qb2luKHQpfSxLPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihuLHIsbyl7dmFyIGk9e307cmV0dXJuIHQoZSxmdW5jdGlvbihlKXt2YXIgdD1aKGUsXCJfXCIpLnRvVXBwZXJDYXNlKCk7aVtcIlNFVF9cIit0XT1mdW5jdGlvbihyKXt0cnl7by5vcHRpb25zW2VdPXIudmFsdWV9Y2F0Y2goZSl7fW4oXCJESURfU0VUX1wiK3Qse3ZhbHVlOm8ub3B0aW9uc1tlXX0pfX0pLGl9fSwkPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihuKXt2YXIgcj17fTtyZXR1cm4gdChlLGZ1bmN0aW9uKGUpe3JbXCJHRVRfXCIrWihlLFwiX1wiKS50b1VwcGVyQ2FzZSgpXT1mdW5jdGlvbih0KXtyZXR1cm4gbi5vcHRpb25zW2VdfX0pLHJ9fSxKPTEsZWU9Mix0ZT0zLG5lPTQscmU9NSxvZT1mdW5jdGlvbigpe3JldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiw5KX07ZnVuY3Rpb24gaWUoZSl7dGhpcy53cmFwcGVkPWV9ZnVuY3Rpb24gYWUoZSl7dmFyIHQsbjtmdW5jdGlvbiByKHQsbil7dHJ5e3ZhciBpPWVbdF0obiksYT1pLnZhbHVlLHM9YSBpbnN0YW5jZW9mIGllO1Byb21pc2UucmVzb2x2ZShzP2Eud3JhcHBlZDphKS50aGVuKGZ1bmN0aW9uKGUpe3M/cihcIm5leHRcIixlKTpvKGkuZG9uZT9cInJldHVyblwiOlwibm9ybWFsXCIsZSl9LGZ1bmN0aW9uKGUpe3IoXCJ0aHJvd1wiLGUpfSl9Y2F0Y2goZSl7byhcInRocm93XCIsZSl9fWZ1bmN0aW9uIG8oZSxvKXtzd2l0Y2goZSl7Y2FzZVwicmV0dXJuXCI6dC5yZXNvbHZlKHt2YWx1ZTpvLGRvbmU6ITB9KTticmVhaztjYXNlXCJ0aHJvd1wiOnQucmVqZWN0KG8pO2JyZWFrO2RlZmF1bHQ6dC5yZXNvbHZlKHt2YWx1ZTpvLGRvbmU6ITF9KX0odD10Lm5leHQpP3IodC5rZXksdC5hcmcpOm49bnVsbH10aGlzLl9pbnZva2U9ZnVuY3Rpb24oZSxvKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oaSxhKXt2YXIgcz17a2V5OmUsYXJnOm8scmVzb2x2ZTppLHJlamVjdDphLG5leHQ6bnVsbH07bj9uPW4ubmV4dD1zOih0PW49cyxyKGUsbykpfSl9LFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUucmV0dXJuJiYodGhpcy5yZXR1cm49dm9pZCAwKX1mdW5jdGlvbiBzZShlLHQpe2lmKG51bGw9PWUpcmV0dXJue307dmFyIG4scixvPWZ1bmN0aW9uKGUsdCl7aWYobnVsbD09ZSlyZXR1cm57fTt2YXIgbixyLG89e30saT1PYmplY3Qua2V5cyhlKTtmb3Iocj0wO3I8aS5sZW5ndGg7cisrKW49aVtyXSx0LmluZGV4T2Yobik+PTB8fChvW25dPWVbbl0pO3JldHVybiBvfShlLHQpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBpPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7Zm9yKHI9MDtyPGkubGVuZ3RoO3IrKyluPWlbcl0sdC5pbmRleE9mKG4pPj0wfHxPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoZSxuKSYmKG9bbl09ZVtuXSl9cmV0dXJuIG99XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuYXN5bmNJdGVyYXRvciYmKGFlLnByb3RvdHlwZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLGFlLnByb3RvdHlwZS5uZXh0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9pbnZva2UoXCJuZXh0XCIsZSl9LGFlLnByb3RvdHlwZS50aHJvdz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5faW52b2tlKFwidGhyb3dcIixlKX0sYWUucHJvdG90eXBlLnJldHVybj1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5faW52b2tlKFwicmV0dXJuXCIsZSl9O2Z1bmN0aW9uIHVlKGUpe3JldHVybiBmdW5jdGlvbihlKXtpZihBcnJheS5pc0FycmF5KGUpKXtmb3IodmFyIHQ9MCxuPW5ldyBBcnJheShlLmxlbmd0aCk7dDxlLmxlbmd0aDt0Kyspblt0XT1lW3RdO3JldHVybiBufX0oZSl8fGxlKGUpfHxmdW5jdGlvbigpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKX0oKX1mdW5jdGlvbiBsZShlKXtpZihTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGUpfHxcIltvYmplY3QgQXJndW1lbnRzXVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpKXJldHVybiBBcnJheS5mcm9tKGUpfXZhciBjZSxmZSxkZT1mdW5jdGlvbihlLHQpe3JldHVybiBlLnNwbGljZSh0LDEpfSxwZT1mdW5jdGlvbigpe3ZhciBlPVtdLHQ9ZnVuY3Rpb24odCxuKXtkZShlLGUuZmluZEluZGV4KGZ1bmN0aW9uKGUpe3JldHVybiBlLmV2ZW50PT09dCYmKGUuY2I9PT1ufHwhbil9KSl9LG49ZnVuY3Rpb24odCxuLHIpe2UuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLmV2ZW50PT09dH0pLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5jYn0pLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7dD9lKCk6ZG9jdW1lbnQuaGlkZGVuP1Byb21pc2UucmVzb2x2ZSgxKS50aGVuKGUpOnNldFRpbWVvdXQoZSwwKX0oZnVuY3Rpb24oKXtyZXR1cm4gZS5hcHBseSh2b2lkIDAsdWUobikpfSxyKX0pfTtyZXR1cm57ZmlyZVN5bmM6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgscj1uZXcgQXJyYXkodD4xP3QtMTowKSxvPTE7bzx0O28rKylyW28tMV09YXJndW1lbnRzW29dO24oZSxyLCEwKX0sZmlyZTpmdW5jdGlvbihlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxyPW5ldyBBcnJheSh0PjE/dC0xOjApLG89MTtvPHQ7bysrKXJbby0xXT1hcmd1bWVudHNbb107bihlLHIsITEpfSxvbjpmdW5jdGlvbih0LG4pe2UucHVzaCh7ZXZlbnQ6dCxjYjpufSl9LG9uT25jZTpmdW5jdGlvbihuLHIpe2UucHVzaCh7ZXZlbnQ6bixjYjpmdW5jdGlvbigpe3QobixyKSxyLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfX0pfSxvZmY6dH19LEVlPWZ1bmN0aW9uKGUsdCxuKXtPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlKS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIW4uaW5jbHVkZXMoZSl9KS5mb3JFYWNoKGZ1bmN0aW9uKG4pe3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodCxuLE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxuKSl9KX0sX2U9W1wiZmlyZVwiLFwicHJvY2Vzc1wiLFwicmV2ZXJ0XCIsXCJsb2FkXCIsXCJvblwiLFwib2ZmXCIsXCJvbk9uY2VcIixcInJldHJ5TG9hZFwiLFwiZXh0ZW5kXCIsXCJhcmNoaXZlXCIsXCJhcmNoaXZlZFwiLFwicmVsZWFzZVwiLFwicmVsZWFzZWRcIixcInJlcXVlc3RQcm9jZXNzaW5nXCIsXCJmcmVlemVcIl0sVGU9ZnVuY3Rpb24oZSl7dmFyIHQ9e307cmV0dXJuIEVlKGUsdCxfZSksdH0sSWU9e0lOSVQ6MSxJRExFOjIsUFJPQ0VTU0lOR19RVUVVRUQ6OSxQUk9DRVNTSU5HOjMsUFJPQ0VTU0lOR19DT01QTEVURTo1LFBST0NFU1NJTkdfRVJST1I6NixQUk9DRVNTSU5HX1JFVkVSVF9FUlJPUjoxMCxMT0FESU5HOjcsTE9BRF9FUlJPUjo4fSx2ZT17SU5QVVQ6MSxMSU1CTzoyLExPQ0FMOjN9LG1lPWZ1bmN0aW9uKGUpe3JldHVybi9bXjAtOV0rLy5leGVjKGUpfSxoZT1mdW5jdGlvbigpe3JldHVybiBtZSgxLjEudG9Mb2NhbGVTdHJpbmcoKSlbMF19LGdlPXtCT09MRUFOOlwiYm9vbGVhblwiLElOVDpcImludFwiLE5VTUJFUjpcIm51bWJlclwiLFNUUklORzpcInN0cmluZ1wiLEFSUkFZOlwiYXJyYXlcIixPQkpFQ1Q6XCJvYmplY3RcIixGVU5DVElPTjpcImZ1bmN0aW9uXCIsQUNUSU9OOlwiYWN0aW9uXCIsU0VSVkVSX0FQSTpcInNlcnZlcmFwaVwiLFJFR0VYOlwicmVnZXhcIn0sUmU9W10sT2U9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyLG8pe3ZhciBpPVJlLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gdC5rZXk9PT1lfSkubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLmNifSk7aWYoMCE9PWkubGVuZ3RoKXt2YXIgYT1pLnNoaWZ0KCk7aS5yZWR1Y2UoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiB0KGUsbil9KX0sYSh0LG4pKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiByKGUpfSkuY2F0Y2goZnVuY3Rpb24oZSl7cmV0dXJuIG8oZSl9KX1lbHNlIHIodCl9KX0seWU9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBSZS5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIHQua2V5PT09ZX0pLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5jYih0LG4pfSl9LERlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIFJlLnB1c2goe2tleTplLGNiOnR9KX0sU2U9ZnVuY3Rpb24oKXtyZXR1cm4gT2JqZWN0LmFzc2lnbih7fSxBZSl9LEFlPXtpZDpbbnVsbCxnZS5TVFJJTkddLG5hbWU6W1wiZmlsZXBvbmRcIixnZS5TVFJJTkddLGRpc2FibGVkOlshMSxnZS5CT09MRUFOXSxjbGFzc05hbWU6W251bGwsZ2UuU1RSSU5HXSxyZXF1aXJlZDpbITEsZ2UuQk9PTEVBTl0sY2FwdHVyZU1ldGhvZDpbbnVsbCxnZS5TVFJJTkddLGFsbG93U3luY0FjY2VwdEF0dHJpYnV0ZTpbITAsZ2UuQk9PTEVBTl0sYWxsb3dEcm9wOlshMCxnZS5CT09MRUFOXSxhbGxvd0Jyb3dzZTpbITAsZ2UuQk9PTEVBTl0sYWxsb3dQYXN0ZTpbITAsZ2UuQk9PTEVBTl0sYWxsb3dNdWx0aXBsZTpbITEsZ2UuQk9PTEVBTl0sYWxsb3dSZXBsYWNlOlshMCxnZS5CT09MRUFOXSxhbGxvd1JldmVydDpbITAsZ2UuQk9PTEVBTl0sYWxsb3dSZW1vdmU6WyEwLGdlLkJPT0xFQU5dLGFsbG93UHJvY2VzczpbITAsZ2UuQk9PTEVBTl0sYWxsb3dSZW9yZGVyOlshMSxnZS5CT09MRUFOXSxhbGxvd0RpcmVjdG9yaWVzT25seTpbITEsZ2UuQk9PTEVBTl0sc3RvcmVBc0ZpbGU6WyExLGdlLkJPT0xFQU5dLGZvcmNlUmV2ZXJ0OlshMSxnZS5CT09MRUFOXSxtYXhGaWxlczpbbnVsbCxnZS5JTlRdLGNoZWNrVmFsaWRpdHk6WyExLGdlLkJPT0xFQU5dLGl0ZW1JbnNlcnRMb2NhdGlvbkZyZWVkb206WyEwLGdlLkJPT0xFQU5dLGl0ZW1JbnNlcnRMb2NhdGlvbjpbXCJiZWZvcmVcIixnZS5TVFJJTkddLGl0ZW1JbnNlcnRJbnRlcnZhbDpbNzUsZ2UuSU5UXSxkcm9wT25QYWdlOlshMSxnZS5CT09MRUFOXSxkcm9wT25FbGVtZW50OlshMCxnZS5CT09MRUFOXSxkcm9wVmFsaWRhdGlvbjpbITEsZ2UuQk9PTEVBTl0saWdub3JlZEZpbGVzOltbXCIuZHNfc3RvcmVcIixcInRodW1icy5kYlwiLFwiZGVza3RvcC5pbmlcIl0sZ2UuQVJSQVldLGluc3RhbnRVcGxvYWQ6WyEwLGdlLkJPT0xFQU5dLG1heFBhcmFsbGVsVXBsb2FkczpbMixnZS5JTlRdLGFsbG93TWluaW11bVVwbG9hZER1cmF0aW9uOlshMCxnZS5CT09MRUFOXSxjaHVua1VwbG9hZHM6WyExLGdlLkJPT0xFQU5dLGNodW5rRm9yY2U6WyExLGdlLkJPT0xFQU5dLGNodW5rU2l6ZTpbNWU2LGdlLklOVF0sY2h1bmtSZXRyeURlbGF5czpbWzUwMCwxZTMsM2UzXSxnZS5BUlJBWV0sc2VydmVyOltudWxsLGdlLlNFUlZFUl9BUEldLGZpbGVTaXplQmFzZTpbMWUzLGdlLklOVF0sbGFiZWxGaWxlU2l6ZUJ5dGVzOltcImJ5dGVzXCIsZ2UuU1RSSU5HXSxsYWJlbEZpbGVTaXplS2lsb2J5dGVzOltcIktCXCIsZ2UuU1RSSU5HXSxsYWJlbEZpbGVTaXplTWVnYWJ5dGVzOltcIk1CXCIsZ2UuU1RSSU5HXSxsYWJlbEZpbGVTaXplR2lnYWJ5dGVzOltcIkdCXCIsZ2UuU1RSSU5HXSxsYWJlbERlY2ltYWxTZXBhcmF0b3I6W2hlKCksZ2UuU1RSSU5HXSxsYWJlbFRob3VzYW5kc1NlcGFyYXRvcjpbKGNlPWhlKCksZmU9MWUzLnRvTG9jYWxlU3RyaW5nKCksZmUhPT0xZTMudG9TdHJpbmcoKT9tZShmZSlbMF06XCIuXCI9PT1jZT9cIixcIjpcIi5cIiksZ2UuU1RSSU5HXSxsYWJlbElkbGU6WydEcmFnICYgRHJvcCB5b3VyIGZpbGVzIG9yIDxzcGFuIGNsYXNzPVwiZmlsZXBvbmQtLWxhYmVsLWFjdGlvblwiPkJyb3dzZTwvc3Bhbj4nLGdlLlNUUklOR10sbGFiZWxJbnZhbGlkRmllbGQ6W1wiRmllbGQgY29udGFpbnMgaW52YWxpZCBmaWxlc1wiLGdlLlNUUklOR10sbGFiZWxGaWxlV2FpdGluZ0ZvclNpemU6W1wiV2FpdGluZyBmb3Igc2l6ZVwiLGdlLlNUUklOR10sbGFiZWxGaWxlU2l6ZU5vdEF2YWlsYWJsZTpbXCJTaXplIG5vdCBhdmFpbGFibGVcIixnZS5TVFJJTkddLGxhYmVsRmlsZUNvdW50U2luZ3VsYXI6W1wiZmlsZSBpbiBsaXN0XCIsZ2UuU1RSSU5HXSxsYWJlbEZpbGVDb3VudFBsdXJhbDpbXCJmaWxlcyBpbiBsaXN0XCIsZ2UuU1RSSU5HXSxsYWJlbEZpbGVMb2FkaW5nOltcIkxvYWRpbmdcIixnZS5TVFJJTkddLGxhYmVsRmlsZUFkZGVkOltcIkFkZGVkXCIsZ2UuU1RSSU5HXSxsYWJlbEZpbGVMb2FkRXJyb3I6W1wiRXJyb3IgZHVyaW5nIGxvYWRcIixnZS5TVFJJTkddLGxhYmVsRmlsZVJlbW92ZWQ6W1wiUmVtb3ZlZFwiLGdlLlNUUklOR10sbGFiZWxGaWxlUmVtb3ZlRXJyb3I6W1wiRXJyb3IgZHVyaW5nIHJlbW92ZVwiLGdlLlNUUklOR10sbGFiZWxGaWxlUHJvY2Vzc2luZzpbXCJVcGxvYWRpbmdcIixnZS5TVFJJTkddLGxhYmVsRmlsZVByb2Nlc3NpbmdDb21wbGV0ZTpbXCJVcGxvYWQgY29tcGxldGVcIixnZS5TVFJJTkddLGxhYmVsRmlsZVByb2Nlc3NpbmdBYm9ydGVkOltcIlVwbG9hZCBjYW5jZWxsZWRcIixnZS5TVFJJTkddLGxhYmVsRmlsZVByb2Nlc3NpbmdFcnJvcjpbXCJFcnJvciBkdXJpbmcgdXBsb2FkXCIsZ2UuU1RSSU5HXSxsYWJlbEZpbGVQcm9jZXNzaW5nUmV2ZXJ0RXJyb3I6W1wiRXJyb3IgZHVyaW5nIHJldmVydFwiLGdlLlNUUklOR10sbGFiZWxUYXBUb0NhbmNlbDpbXCJ0YXAgdG8gY2FuY2VsXCIsZ2UuU1RSSU5HXSxsYWJlbFRhcFRvUmV0cnk6W1widGFwIHRvIHJldHJ5XCIsZ2UuU1RSSU5HXSxsYWJlbFRhcFRvVW5kbzpbXCJ0YXAgdG8gdW5kb1wiLGdlLlNUUklOR10sbGFiZWxCdXR0b25SZW1vdmVJdGVtOltcIlJlbW92ZVwiLGdlLlNUUklOR10sbGFiZWxCdXR0b25BYm9ydEl0ZW1Mb2FkOltcIkFib3J0XCIsZ2UuU1RSSU5HXSxsYWJlbEJ1dHRvblJldHJ5SXRlbUxvYWQ6W1wiUmV0cnlcIixnZS5TVFJJTkddLGxhYmVsQnV0dG9uQWJvcnRJdGVtUHJvY2Vzc2luZzpbXCJDYW5jZWxcIixnZS5TVFJJTkddLGxhYmVsQnV0dG9uVW5kb0l0ZW1Qcm9jZXNzaW5nOltcIlVuZG9cIixnZS5TVFJJTkddLGxhYmVsQnV0dG9uUmV0cnlJdGVtUHJvY2Vzc2luZzpbXCJSZXRyeVwiLGdlLlNUUklOR10sbGFiZWxCdXR0b25Qcm9jZXNzSXRlbTpbXCJVcGxvYWRcIixnZS5TVFJJTkddLGljb25SZW1vdmU6Wyc8c3ZnIHdpZHRoPVwiMjZcIiBoZWlnaHQ9XCIyNlwiIHZpZXdCb3g9XCIwIDAgMjYgMjZcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk0xMS41ODYgMTNsLTIuMjkzIDIuMjkzYTEgMSAwIDAgMCAxLjQxNCAxLjQxNEwxMyAxNC40MTRsMi4yOTMgMi4yOTNhMSAxIDAgMCAwIDEuNDE0LTEuNDE0TDE0LjQxNCAxM2wyLjI5My0yLjI5M2ExIDEgMCAwIDAtMS40MTQtMS40MTRMMTMgMTEuNTg2bC0yLjI5My0yLjI5M2ExIDEgMCAwIDAtMS40MTQgMS40MTRMMTEuNTg2IDEzelwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBmaWxsLXJ1bGU9XCJub256ZXJvXCIvPjwvc3ZnPicsZ2UuU1RSSU5HXSxpY29uUHJvY2VzczpbJzxzdmcgd2lkdGg9XCIyNlwiIGhlaWdodD1cIjI2XCIgdmlld0JveD1cIjAgMCAyNiAyNlwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTE0IDEwLjQxNHYzLjU4NWExIDEgMCAwIDEtMiAwdi0zLjU4NWwtMS4yOTMgMS4yOTNhMSAxIDAgMCAxLTEuNDE0LTEuNDE1bDMtM2ExIDEgMCAwIDEgMS40MTQgMGwzIDNhMSAxIDAgMCAxLTEuNDE0IDEuNDE1TDE0IDEwLjQxNHpNOSAxOGExIDEgMCAwIDEgMC0yaDhhMSAxIDAgMCAxIDAgMkg5elwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCIvPjwvc3ZnPicsZ2UuU1RSSU5HXSxpY29uUmV0cnk6Wyc8c3ZnIHdpZHRoPVwiMjZcIiBoZWlnaHQ9XCIyNlwiIHZpZXdCb3g9XCIwIDAgMjYgMjZcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk0xMC44MSA5LjE4NWwtLjAzOC4wMkE0Ljk5NyA0Ljk5NyAwIDAgMCA4IDEzLjY4M2E1IDUgMCAwIDAgNSA1IDUgNSAwIDAgMCA1LTUgMSAxIDAgMCAxIDIgMEE3IDcgMCAxIDEgOS43MjIgNy40OTZsLS44NDItLjIxYS45OTkuOTk5IDAgMSAxIC40ODQtMS45NGwzLjIzLjgwNmMuNTM1LjEzMy44Ni42NzUuNzMgMS4yMWwtLjgwNCAzLjIzM2EuOTk3Ljk5NyAwIDAgMS0xLjIxLjczLjk5Ny45OTcgMCAwIDEtLjczLTEuMjFsLjIzLS45Mjh2LS4wMDJ6XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIGZpbGwtcnVsZT1cIm5vbnplcm9cIi8+PC9zdmc+JyxnZS5TVFJJTkddLGljb25VbmRvOlsnPHN2ZyB3aWR0aD1cIjI2XCIgaGVpZ2h0PVwiMjZcIiB2aWV3Qm94PVwiMCAwIDI2IDI2XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNOS4xODUgMTAuODFsLjAyLS4wMzhBNC45OTcgNC45OTcgMCAwIDEgMTMuNjgzIDhhNSA1IDAgMCAxIDUgNSA1IDUgMCAwIDEtNSA1IDEgMSAwIDAgMCAwIDJBNyA3IDAgMSAwIDcuNDk2IDkuNzIybC0uMjEtLjg0MmEuOTk5Ljk5OSAwIDEgMC0xLjk0LjQ4NGwuODA2IDMuMjNjLjEzMy41MzUuNjc1Ljg2IDEuMjEuNzNsMy4yMzMtLjgwM2EuOTk3Ljk5NyAwIDAgMCAuNzMtMS4yMS45OTcuOTk3IDAgMCAwLTEuMjEtLjczbC0uOTI4LjIzLS4wMDItLjAwMXpcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgZmlsbC1ydWxlPVwibm9uemVyb1wiLz48L3N2Zz4nLGdlLlNUUklOR10saWNvbkRvbmU6Wyc8c3ZnIHdpZHRoPVwiMjZcIiBoZWlnaHQ9XCIyNlwiIHZpZXdCb3g9XCIwIDAgMjYgMjZcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk0xOC4yOTMgOS4yOTNhMSAxIDAgMCAxIDEuNDE0IDEuNDE0bC03LjAwMiA3YTEgMSAwIDAgMS0xLjQxNCAwbC0zLjk5OC00YTEgMSAwIDEgMSAxLjQxNC0xLjQxNEwxMiAxNS41ODZsNi4yOTQtNi4yOTN6XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIGZpbGwtcnVsZT1cIm5vbnplcm9cIi8+PC9zdmc+JyxnZS5TVFJJTkddLG9uaW5pdDpbbnVsbCxnZS5GVU5DVElPTl0sb253YXJuaW5nOltudWxsLGdlLkZVTkNUSU9OXSxvbmVycm9yOltudWxsLGdlLkZVTkNUSU9OXSxvbmFjdGl2YXRlZmlsZTpbbnVsbCxnZS5GVU5DVElPTl0sb25pbml0ZmlsZTpbbnVsbCxnZS5GVU5DVElPTl0sb25hZGRmaWxlc3RhcnQ6W251bGwsZ2UuRlVOQ1RJT05dLG9uYWRkZmlsZXByb2dyZXNzOltudWxsLGdlLkZVTkNUSU9OXSxvbmFkZGZpbGU6W251bGwsZ2UuRlVOQ1RJT05dLG9ucHJvY2Vzc2ZpbGVzdGFydDpbbnVsbCxnZS5GVU5DVElPTl0sb25wcm9jZXNzZmlsZXByb2dyZXNzOltudWxsLGdlLkZVTkNUSU9OXSxvbnByb2Nlc3NmaWxlYWJvcnQ6W251bGwsZ2UuRlVOQ1RJT05dLG9ucHJvY2Vzc2ZpbGVyZXZlcnQ6W251bGwsZ2UuRlVOQ1RJT05dLG9ucHJvY2Vzc2ZpbGU6W251bGwsZ2UuRlVOQ1RJT05dLG9ucHJvY2Vzc2ZpbGVzOltudWxsLGdlLkZVTkNUSU9OXSxvbnJlbW92ZWZpbGU6W251bGwsZ2UuRlVOQ1RJT05dLG9ucHJlcGFyZWZpbGU6W251bGwsZ2UuRlVOQ1RJT05dLG9udXBkYXRlZmlsZXM6W251bGwsZ2UuRlVOQ1RJT05dLG9ucmVvcmRlcmZpbGVzOltudWxsLGdlLkZVTkNUSU9OXSxiZWZvcmVEcm9wRmlsZTpbbnVsbCxnZS5GVU5DVElPTl0sYmVmb3JlQWRkRmlsZTpbbnVsbCxnZS5GVU5DVElPTl0sYmVmb3JlUmVtb3ZlRmlsZTpbbnVsbCxnZS5GVU5DVElPTl0sYmVmb3JlUHJlcGFyZUZpbGU6W251bGwsZ2UuRlVOQ1RJT05dLHN0eWxlUGFuZWxMYXlvdXQ6W251bGwsZ2UuU1RSSU5HXSxzdHlsZVBhbmVsQXNwZWN0UmF0aW86W251bGwsZ2UuU1RSSU5HXSxzdHlsZUl0ZW1QYW5lbEFzcGVjdFJhdGlvOltudWxsLGdlLlNUUklOR10sc3R5bGVCdXR0b25SZW1vdmVJdGVtUG9zaXRpb246W1wibGVmdFwiLGdlLlNUUklOR10sc3R5bGVCdXR0b25Qcm9jZXNzSXRlbVBvc2l0aW9uOltcInJpZ2h0XCIsZ2UuU1RSSU5HXSxzdHlsZUxvYWRJbmRpY2F0b3JQb3NpdGlvbjpbXCJyaWdodFwiLGdlLlNUUklOR10sc3R5bGVQcm9ncmVzc0luZGljYXRvclBvc2l0aW9uOltcInJpZ2h0XCIsZ2UuU1RSSU5HXSxzdHlsZUJ1dHRvblJlbW92ZUl0ZW1BbGlnbjpbITEsZ2UuQk9PTEVBTl0sZmlsZXM6W1tdLGdlLkFSUkFZXSxjcmVkaXRzOltbXCJodHRwczovL3BxaW5hLm5sL1wiLFwiUG93ZXJlZCBieSBQUUlOQVwiXSxnZS5BUlJBWV19LExlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE0odCk/ZVswXXx8bnVsbDpWKHQpP2VbdF18fG51bGw6KFwib2JqZWN0XCI9PXR5cGVvZiB0JiYodD10LmlkKSxlLmZpbmQoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaWQ9PT10fSl8fG51bGwpfSxiZT1mdW5jdGlvbihlKXtpZihNKGUpKXJldHVybiBlO2lmKC86Ly50ZXN0KGUpKXt2YXIgdD1lLnNwbGl0KFwiOlwiKTtyZXR1cm4gdFsxXS90WzBdfXJldHVybiBwYXJzZUZsb2F0KGUpfSxQZT1mdW5jdGlvbihlKXtyZXR1cm4gZS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIWUuYXJjaGl2ZWR9KX0sTWU9e0VNUFRZOjAsSURMRToxLEVSUk9SOjIsQlVTWTozLFJFQURZOjR9LHdlPW51bGwsQ2U9W0llLkxPQURfRVJST1IsSWUuUFJPQ0VTU0lOR19FUlJPUixJZS5QUk9DRVNTSU5HX1JFVkVSVF9FUlJPUl0sTmU9W0llLkxPQURJTkcsSWUuUFJPQ0VTU0lORyxJZS5QUk9DRVNTSU5HX1FVRVVFRCxJZS5JTklUXSxHZT1bSWUuUFJPQ0VTU0lOR19DT01QTEVURV0sVWU9ZnVuY3Rpb24oZSl7cmV0dXJuIENlLmluY2x1ZGVzKGUuc3RhdHVzKX0sQmU9ZnVuY3Rpb24oZSl7cmV0dXJuIE5lLmluY2x1ZGVzKGUuc3RhdHVzKX0sRmU9ZnVuY3Rpb24oZSl7cmV0dXJuIEdlLmluY2x1ZGVzKGUuc3RhdHVzKX0scWU9ZnVuY3Rpb24oZSl7cmV0dXJuIEgoZS5vcHRpb25zLnNlcnZlcikmJihIKGUub3B0aW9ucy5zZXJ2ZXIucHJvY2Vzcyl8fFkoZS5vcHRpb25zLnNlcnZlci5wcm9jZXNzKSl9LFZlPWZ1bmN0aW9uKGUpe3JldHVybntHRVRfU1RBVFVTOmZ1bmN0aW9uKCl7dmFyIHQ9UGUoZS5pdGVtcyksbj1NZS5FTVBUWSxyPU1lLkVSUk9SLG89TWUuQlVTWSxpPU1lLklETEUsYT1NZS5SRUFEWTtyZXR1cm4gMD09PXQubGVuZ3RoP246dC5zb21lKFVlKT9yOnQuc29tZShCZSk/bzp0LnNvbWUoRmUpP2E6aX0sR0VUX0lURU06ZnVuY3Rpb24odCl7cmV0dXJuIExlKGUuaXRlbXMsdCl9LEdFVF9BQ1RJVkVfSVRFTTpmdW5jdGlvbih0KXtyZXR1cm4gTGUoUGUoZS5pdGVtcyksdCl9LEdFVF9BQ1RJVkVfSVRFTVM6ZnVuY3Rpb24oKXtyZXR1cm4gUGUoZS5pdGVtcyl9LEdFVF9JVEVNUzpmdW5jdGlvbigpe3JldHVybiBlLml0ZW1zfSxHRVRfSVRFTV9OQU1FOmZ1bmN0aW9uKHQpe3ZhciBuPUxlKGUuaXRlbXMsdCk7cmV0dXJuIG4/bi5maWxlbmFtZTpudWxsfSxHRVRfSVRFTV9TSVpFOmZ1bmN0aW9uKHQpe3ZhciBuPUxlKGUuaXRlbXMsdCk7cmV0dXJuIG4/bi5maWxlU2l6ZTpudWxsfSxHRVRfU1RZTEVTOmZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5rZXlzKGUub3B0aW9ucykuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybi9ec3R5bGUvLnRlc3QoZSl9KS5tYXAoZnVuY3Rpb24odCl7cmV0dXJue25hbWU6dCx2YWx1ZTplLm9wdGlvbnNbdF19fSl9LEdFVF9QQU5FTF9BU1BFQ1RfUkFUSU86ZnVuY3Rpb24oKXtyZXR1cm4vY2lyY2xlLy50ZXN0KGUub3B0aW9ucy5zdHlsZVBhbmVsTGF5b3V0KT8xOmJlKGUub3B0aW9ucy5zdHlsZVBhbmVsQXNwZWN0UmF0aW8pfSxHRVRfSVRFTV9QQU5FTF9BU1BFQ1RfUkFUSU86ZnVuY3Rpb24oKXtyZXR1cm4gZS5vcHRpb25zLnN0eWxlSXRlbVBhbmVsQXNwZWN0UmF0aW99LEdFVF9JVEVNU19CWV9TVEFUVVM6ZnVuY3Rpb24odCl7cmV0dXJuIFBlKGUuaXRlbXMpLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5zdGF0dXM9PT10fSl9LEdFVF9UT1RBTF9JVEVNUzpmdW5jdGlvbigpe3JldHVybiBQZShlLml0ZW1zKS5sZW5ndGh9LFNIT1VMRF9VUERBVEVfRklMRV9JTlBVVDpmdW5jdGlvbigpe3JldHVybiBlLm9wdGlvbnMuc3RvcmVBc0ZpbGUmJmZ1bmN0aW9uKCl7aWYobnVsbD09PXdlKXRyeXt2YXIgZT1uZXcgRGF0YVRyYW5zZmVyO2UuaXRlbXMuYWRkKG5ldyBGaWxlKFtcImhlbGxvIHdvcmxkXCJdLFwiVGhpc19Xb3Jrcy50eHRcIikpO3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTt0LnNldEF0dHJpYnV0ZShcInR5cGVcIixcImZpbGVcIiksdC5maWxlcz1lLmZpbGVzLHdlPTE9PT10LmZpbGVzLmxlbmd0aH1jYXRjaChlKXt3ZT0hMX1yZXR1cm4gd2V9KCkmJiFxZShlKX0sSVNfQVNZTkM6ZnVuY3Rpb24oKXtyZXR1cm4gcWUoZSl9LEdFVF9GSUxFX1NJWkVfTEFCRUxTOmZ1bmN0aW9uKGUpe3JldHVybntsYWJlbEJ5dGVzOmUoXCJHRVRfTEFCRUxfRklMRV9TSVpFX0JZVEVTXCIpfHx2b2lkIDAsbGFiZWxLaWxvYnl0ZXM6ZShcIkdFVF9MQUJFTF9GSUxFX1NJWkVfS0lMT0JZVEVTXCIpfHx2b2lkIDAsbGFiZWxNZWdhYnl0ZXM6ZShcIkdFVF9MQUJFTF9GSUxFX1NJWkVfTUVHQUJZVEVTXCIpfHx2b2lkIDAsbGFiZWxHaWdhYnl0ZXM6ZShcIkdFVF9MQUJFTF9GSUxFX1NJWkVfR0lHQUJZVEVTXCIpfHx2b2lkIDB9fX19LHhlPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4obixlKSx0KX0sWWU9ZnVuY3Rpb24oZSl7cmV0dXJuL15cXHMqZGF0YTooW2Etel0rXFwvW2EtejAtOS0rLl0rKDtbYS16LV0rPVthLXowLTktXSspPyk/KDtiYXNlNjQpPywoW2EtejAtOSEkJicsKCkqKzs9XFwtLl9+OkBcXC8/JVxcc10qKVxccyokL2kudGVzdChlKX0sa2U9ZnVuY3Rpb24oZSl7cmV0dXJuIGUuc3BsaXQoXCIvXCIpLnBvcCgpLnNwbGl0KFwiP1wiKS5zaGlmdCgpfSxqZT1mdW5jdGlvbihlKXtyZXR1cm4gZS5zcGxpdChcIi5cIikucG9wKCl9LEhlPWZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpcIlwiO3JldHVybih0K2UpLnNsaWNlKC10Lmxlbmd0aCl9LFhlPWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOm5ldyBEYXRlO3JldHVybiBlLmdldEZ1bGxZZWFyKCkrXCItXCIrSGUoZS5nZXRNb250aCgpKzEsXCIwMFwiKStcIi1cIitIZShlLmdldERhdGUoKSxcIjAwXCIpK1wiX1wiK0hlKGUuZ2V0SG91cnMoKSxcIjAwXCIpK1wiLVwiK0hlKGUuZ2V0TWludXRlcygpLFwiMDBcIikrXCItXCIrSGUoZS5nZXRTZWNvbmRzKCksXCIwMFwiKX0sV2U9ZnVuY3Rpb24oZSx0KXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCxyPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsLG89XCJzdHJpbmdcIj09dHlwZW9mIG4/ZS5zbGljZSgwLGUuc2l6ZSxuKTplLnNsaWNlKDAsZS5zaXplLGUudHlwZSk7cmV0dXJuIG8ubGFzdE1vZGlmaWVkRGF0ZT1uZXcgRGF0ZSxlLl9yZWxhdGl2ZVBhdGgmJihvLl9yZWxhdGl2ZVBhdGg9ZS5fcmVsYXRpdmVQYXRoKSxVKHQpfHwodD1YZSgpKSx0JiZudWxsPT09ciYmamUodCk/by5uYW1lPXQ6KHI9cnx8ZnVuY3Rpb24oZSl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuXCJcIjt2YXIgdD1lLnNwbGl0KFwiL1wiKS5wb3AoKTtyZXR1cm4vc3ZnLy50ZXN0KHQpP1wic3ZnXCI6L3ppcHxjb21wcmVzc2VkLy50ZXN0KHQpP1wiemlwXCI6L3BsYWluLy50ZXN0KHQpP1widHh0XCI6L21zd29yZC8udGVzdCh0KT9cImRvY1wiOi9bYS16XSsvLnRlc3QodCk/XCJqcGVnXCI9PT10P1wianBnXCI6dDpcIlwifShvLnR5cGUpLG8ubmFtZT10KyhyP1wiLlwiK3I6XCJcIikpLG99LHplPWZ1bmN0aW9uKGUsdCl7dmFyIG49d2luZG93LkJsb2JCdWlsZGVyPXdpbmRvdy5CbG9iQnVpbGRlcnx8d2luZG93LldlYktpdEJsb2JCdWlsZGVyfHx3aW5kb3cuTW96QmxvYkJ1aWxkZXJ8fHdpbmRvdy5NU0Jsb2JCdWlsZGVyO2lmKG4pe3ZhciByPW5ldyBuO3JldHVybiByLmFwcGVuZChlKSxyLmdldEJsb2IodCl9cmV0dXJuIG5ldyBCbG9iKFtlXSx7dHlwZTp0fSl9LFFlPWZ1bmN0aW9uKGUpe3JldHVybigvXmRhdGE6KC4rKTsvLmV4ZWMoZSl8fFtdKVsxXXx8bnVsbH0sWmU9ZnVuY3Rpb24oZSl7dmFyIHQ9UWUoZSk7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPW5ldyBBcnJheUJ1ZmZlcihlLmxlbmd0aCkscj1uZXcgVWludDhBcnJheShuKSxvPTA7bzxlLmxlbmd0aDtvKyspcltvXT1lLmNoYXJDb2RlQXQobyk7cmV0dXJuIHplKG4sdCl9KGZ1bmN0aW9uKGUpe3JldHVybiBhdG9iKGZ1bmN0aW9uKGUpe3JldHVybiBlLnNwbGl0KFwiLFwiKVsxXS5yZXBsYWNlKC9cXHMvZyxcIlwiKX0oZSkpfShlKSx0KX0sS2U9ZnVuY3Rpb24oZSl7aWYoIS9eY29udGVudC1kaXNwb3NpdGlvbjovaS50ZXN0KGUpKXJldHVybiBudWxsO3ZhciB0PWUuc3BsaXQoL2ZpbGVuYW1lPXxmaWxlbmFtZVxcKj0uKycnLykuc3BsaWNlKDEpLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS50cmltKCkucmVwbGFjZSgvXltcIiddfFs7XCInXXswLDJ9JC9nLFwiXCIpfSkuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLmxlbmd0aH0pO3JldHVybiB0Lmxlbmd0aD9kZWNvZGVVUkkodFt0Lmxlbmd0aC0xXSk6bnVsbH0sJGU9ZnVuY3Rpb24oZSl7aWYoL2NvbnRlbnQtbGVuZ3RoOi9pLnRlc3QoZSkpe3ZhciB0PWUubWF0Y2goL1swLTldKy8pWzBdO3JldHVybiB0P3BhcnNlSW50KHQsMTApOm51bGx9cmV0dXJuIG51bGx9LEplPWZ1bmN0aW9uKGUpe3JldHVybi94LWNvbnRlbnQtdHJhbnNmZXItaWQ6L2kudGVzdChlKSYmKGUuc3BsaXQoXCI6XCIpWzFdfHxcIlwiKS50cmltKCl8fG51bGx9LGV0PWZ1bmN0aW9uKGUpe3ZhciB0PXtzb3VyY2U6bnVsbCxuYW1lOm51bGwsc2l6ZTpudWxsfSxuPWUuc3BsaXQoXCJcXG5cIikscj0hMCxvPSExLGk9dm9pZCAwO3RyeXtmb3IodmFyIGEscz1uW1N5bWJvbC5pdGVyYXRvcl0oKTshKHI9KGE9cy5uZXh0KCkpLmRvbmUpO3I9ITApe3ZhciB1PWEudmFsdWUsbD1LZSh1KTtpZihsKXQubmFtZT1sO2Vsc2V7dmFyIGM9JGUodSk7aWYoYyl0LnNpemU9YztlbHNle3ZhciBmPUplKHUpO2YmJih0LnNvdXJjZT1mKX19fX1jYXRjaChlKXtvPSEwLGk9ZX1maW5hbGx5e3RyeXtyfHxudWxsPT1zLnJldHVybnx8cy5yZXR1cm4oKX1maW5hbGx5e2lmKG8pdGhyb3cgaX19cmV0dXJuIHR9LHR0PWZ1bmN0aW9uKGUpe3ZhciB0PXtzb3VyY2U6bnVsbCxjb21wbGV0ZTohMSxwcm9ncmVzczowLHNpemU6bnVsbCx0aW1lc3RhbXA6bnVsbCxkdXJhdGlvbjowLHJlcXVlc3Q6bnVsbH0sbj1mdW5jdGlvbihuKXtlPyh0LnRpbWVzdGFtcD1EYXRlLm5vdygpLHQucmVxdWVzdD1lKG4sZnVuY3Rpb24oZSl7dC5kdXJhdGlvbj1EYXRlLm5vdygpLXQudGltZXN0YW1wLHQuY29tcGxldGU9ITAsZSBpbnN0YW5jZW9mIEJsb2ImJihlPVdlKGUsZS5uYW1lfHxrZShuKSkpLHIuZmlyZShcImxvYWRcIixlIGluc3RhbmNlb2YgQmxvYj9lOmU/ZS5ib2R5Om51bGwpfSxmdW5jdGlvbihlKXtyLmZpcmUoXCJlcnJvclwiLFwic3RyaW5nXCI9PXR5cGVvZiBlP3t0eXBlOlwiZXJyb3JcIixjb2RlOjAsYm9keTplfTplKX0sZnVuY3Rpb24oZSxuLG8pe28mJih0LnNpemU9byksdC5kdXJhdGlvbj1EYXRlLm5vdygpLXQudGltZXN0YW1wLGU/KHQucHJvZ3Jlc3M9bi9vLHIuZmlyZShcInByb2dyZXNzXCIsdC5wcm9ncmVzcykpOnQucHJvZ3Jlc3M9bnVsbH0sZnVuY3Rpb24oKXtyLmZpcmUoXCJhYm9ydFwiKX0sZnVuY3Rpb24oZSl7dmFyIG49ZXQoXCJzdHJpbmdcIj09dHlwZW9mIGU/ZTplLmhlYWRlcnMpO3IuZmlyZShcIm1ldGFcIix7c2l6ZTp0LnNpemV8fG4uc2l6ZSxmaWxlbmFtZTpuLm5hbWUsc291cmNlOm4uc291cmNlfSl9KSk6ci5maXJlKFwiZXJyb3JcIix7dHlwZTpcImVycm9yXCIsYm9keTpcIkNhbid0IGxvYWQgVVJMXCIsY29kZTo0MDB9KX0scj1PYmplY3QuYXNzaWduKHt9LHBlKCkse3NldFNvdXJjZTpmdW5jdGlvbihlKXtyZXR1cm4gdC5zb3VyY2U9ZX0sZ2V0UHJvZ3Jlc3M6ZnVuY3Rpb24oKXtyZXR1cm4gdC5wcm9ncmVzc30sYWJvcnQ6ZnVuY3Rpb24oKXt0LnJlcXVlc3QmJnQucmVxdWVzdC5hYm9ydCYmdC5yZXF1ZXN0LmFib3J0KCl9LGxvYWQ6ZnVuY3Rpb24oKXt2YXIgZSxvLGk9dC5zb3VyY2U7ci5maXJlKFwiaW5pdFwiLGkpLGkgaW5zdGFuY2VvZiBGaWxlP3IuZmlyZShcImxvYWRcIixpKTppIGluc3RhbmNlb2YgQmxvYj9yLmZpcmUoXCJsb2FkXCIsV2UoaSxpLm5hbWUpKTpZZShpKT9yLmZpcmUoXCJsb2FkXCIsV2UoWmUoaSksZSxudWxsLG8pKTpuKGkpfX0pO3JldHVybiByfSxudD1mdW5jdGlvbihlKXtyZXR1cm4vR0VUfEhFQUQvLnRlc3QoZSl9LHJ0PWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj17b25oZWFkZXJzOmZ1bmN0aW9uKCl7fSxvbnByb2dyZXNzOmZ1bmN0aW9uKCl7fSxvbmxvYWQ6ZnVuY3Rpb24oKXt9LG9udGltZW91dDpmdW5jdGlvbigpe30sb25lcnJvcjpmdW5jdGlvbigpe30sb25hYm9ydDpmdW5jdGlvbigpe30sYWJvcnQ6ZnVuY3Rpb24oKXtvPSEwLGEuYWJvcnQoKX19LG89ITEsaT0hMTtuPU9iamVjdC5hc3NpZ24oe21ldGhvZDpcIlBPU1RcIixoZWFkZXJzOnt9LHdpdGhDcmVkZW50aWFsczohMX0sbiksdD1lbmNvZGVVUkkodCksbnQobi5tZXRob2QpJiZlJiYodD1cIlwiK3QrZW5jb2RlVVJJQ29tcG9uZW50KFwic3RyaW5nXCI9PXR5cGVvZiBlP2U6SlNPTi5zdHJpbmdpZnkoZSkpKTt2YXIgYT1uZXcgWE1MSHR0cFJlcXVlc3Q7cmV0dXJuKG50KG4ubWV0aG9kKT9hOmEudXBsb2FkKS5vbnByb2dyZXNzPWZ1bmN0aW9uKGUpe298fHIub25wcm9ncmVzcyhlLmxlbmd0aENvbXB1dGFibGUsZS5sb2FkZWQsZS50b3RhbCl9LGEub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7YS5yZWFkeVN0YXRlPDJ8fDQ9PT1hLnJlYWR5U3RhdGUmJjA9PT1hLnN0YXR1c3x8aXx8KGk9ITAsci5vbmhlYWRlcnMoYSkpfSxhLm9ubG9hZD1mdW5jdGlvbigpe2Euc3RhdHVzPj0yMDAmJmEuc3RhdHVzPDMwMD9yLm9ubG9hZChhKTpyLm9uZXJyb3IoYSl9LGEub25lcnJvcj1mdW5jdGlvbigpe3JldHVybiByLm9uZXJyb3IoYSl9LGEub25hYm9ydD1mdW5jdGlvbigpe289ITAsci5vbmFib3J0KCl9LGEub250aW1lb3V0PWZ1bmN0aW9uKCl7cmV0dXJuIHIub250aW1lb3V0KGEpfSxhLm9wZW4obi5tZXRob2QsdCwhMCksVihuLnRpbWVvdXQpJiYoYS50aW1lb3V0PW4udGltZW91dCksT2JqZWN0LmtleXMobi5oZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PXVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChuLmhlYWRlcnNbZV0pKTthLnNldFJlcXVlc3RIZWFkZXIoZSx0KX0pLG4ucmVzcG9uc2VUeXBlJiYoYS5yZXNwb25zZVR5cGU9bi5yZXNwb25zZVR5cGUpLG4ud2l0aENyZWRlbnRpYWxzJiYoYS53aXRoQ3JlZGVudGlhbHM9ITApLGEuc2VuZChlKSxyfSxvdD1mdW5jdGlvbihlLHQsbixyKXtyZXR1cm57dHlwZTplLGNvZGU6dCxib2R5Om4saGVhZGVyczpyfX0saXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe2Uob3QoXCJlcnJvclwiLDAsXCJUaW1lb3V0XCIsdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkpfX0sYXQ9ZnVuY3Rpb24oZSl7cmV0dXJuL1xcPy8udGVzdChlKX0sc3Q9ZnVuY3Rpb24oKXtmb3IodmFyIGU9XCJcIix0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodCkscj0wO3I8dDtyKyspbltyXT1hcmd1bWVudHNbcl07cmV0dXJuIG4uZm9yRWFjaChmdW5jdGlvbih0KXtlKz1hdChlKSYmYXQodCk/dC5yZXBsYWNlKC9cXD8vLFwiJlwiKTp0fSksZX0sdXQ9ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06XCJcIix0PWFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQpcmV0dXJuIHQ7aWYoIXR8fCFVKHQudXJsKSlyZXR1cm4gbnVsbDt2YXIgbj10Lm9ubG9hZHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LHI9dC5vbmVycm9yfHxmdW5jdGlvbihlKXtyZXR1cm4gbnVsbH07cmV0dXJuIGZ1bmN0aW9uKG8saSxhLHMsdSxsKXt2YXIgYz1ydChvLHN0KGUsdC51cmwpLE9iamVjdC5hc3NpZ24oe30sdCx7cmVzcG9uc2VUeXBlOlwiYmxvYlwifSkpO3JldHVybiBjLm9ubG9hZD1mdW5jdGlvbihlKXt2YXIgcj1lLmdldEFsbFJlc3BvbnNlSGVhZGVycygpLGE9ZXQocikubmFtZXx8a2Uobyk7aShvdChcImxvYWRcIixlLnN0YXR1cyxcIkhFQURcIj09PXQubWV0aG9kP251bGw6V2UobihlLnJlc3BvbnNlKSxhKSxyKSl9LGMub25lcnJvcj1mdW5jdGlvbihlKXthKG90KFwiZXJyb3JcIixlLnN0YXR1cyxyKGUucmVzcG9uc2UpfHxlLnN0YXR1c1RleHQsZS5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkpfSxjLm9uaGVhZGVycz1mdW5jdGlvbihlKXtsKG90KFwiaGVhZGVyc1wiLGUuc3RhdHVzLG51bGwsZS5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkpfSxjLm9udGltZW91dD1pdChhKSxjLm9ucHJvZ3Jlc3M9cyxjLm9uYWJvcnQ9dSxjfX0sbHQ9MCxjdD0xLGZ0PTIsZHQ9MyxwdD00LEV0PWZ1bmN0aW9uKGUsdCxuLHIsbyxpLGEscyx1LGwsYyl7Zm9yKHZhciBmPVtdLGQ9Yy5jaHVua1RyYW5zZmVySWQscD1jLmNodW5rU2VydmVyLEU9Yy5jaHVua1NpemUsXz1jLmNodW5rUmV0cnlEZWxheXMsVD17c2VydmVySWQ6ZCxhYm9ydGVkOiExfSxJPXQub25kYXRhfHxmdW5jdGlvbihlKXtyZXR1cm4gZX0sdj10Lm9ubG9hZHx8ZnVuY3Rpb24oZSx0KXtyZXR1cm5cIkhFQURcIj09PXQ/ZS5nZXRSZXNwb25zZUhlYWRlcihcIlVwbG9hZC1PZmZzZXRcIik6ZS5yZXNwb25zZX0sbT10Lm9uZXJyb3J8fGZ1bmN0aW9uKGUpe3JldHVybiBudWxsfSxoPU1hdGguZmxvb3Ioci5zaXplL0UpLGc9MDtnPD1oO2crKyl7dmFyIFI9ZypFLE89ci5zbGljZShSLFIrRSxcImFwcGxpY2F0aW9uL29mZnNldCtvY3RldC1zdHJlYW1cIik7ZltnXT17aW5kZXg6ZyxzaXplOk8uc2l6ZSxvZmZzZXQ6UixkYXRhOk8sZmlsZTpyLHByb2dyZXNzOjAscmV0cmllczp1ZShfKSxzdGF0dXM6bHQsZXJyb3I6bnVsbCxyZXF1ZXN0Om51bGwsdGltZW91dDpudWxsfX12YXIgeSxELFMsQSxMPWZ1bmN0aW9uKGUpe3JldHVybiBlLnN0YXR1cz09PWx0fHxlLnN0YXR1cz09PWR0fSxiPWZ1bmN0aW9uKHQpe2lmKCFULmFib3J0ZWQpaWYodD10fHxmLmZpbmQoTCkpe3Quc3RhdHVzPWZ0LHQucHJvZ3Jlc3M9bnVsbDt2YXIgbj1wLm9uZGF0YXx8ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LG89cC5vbmVycm9yfHxmdW5jdGlvbihlKXtyZXR1cm4gbnVsbH0scz1zdChlLHAudXJsLFQuc2VydmVySWQpLGw9XCJmdW5jdGlvblwiPT10eXBlb2YgcC5oZWFkZXJzP3AuaGVhZGVycyh0KTpPYmplY3QuYXNzaWduKHt9LHAuaGVhZGVycyx7XCJDb250ZW50LVR5cGVcIjpcImFwcGxpY2F0aW9uL29mZnNldCtvY3RldC1zdHJlYW1cIixcIlVwbG9hZC1PZmZzZXRcIjp0Lm9mZnNldCxcIlVwbG9hZC1MZW5ndGhcIjpyLnNpemUsXCJVcGxvYWQtTmFtZVwiOnIubmFtZX0pLGM9dC5yZXF1ZXN0PXJ0KG4odC5kYXRhKSxzLE9iamVjdC5hc3NpZ24oe30scCx7aGVhZGVyczpsfSkpO2Mub25sb2FkPWZ1bmN0aW9uKCl7dC5zdGF0dXM9Y3QsdC5yZXF1ZXN0PW51bGwsdygpfSxjLm9ucHJvZ3Jlc3M9ZnVuY3Rpb24oZSxuLHIpe3QucHJvZ3Jlc3M9ZT9uOm51bGwsTSgpfSxjLm9uZXJyb3I9ZnVuY3Rpb24oZSl7dC5zdGF0dXM9ZHQsdC5yZXF1ZXN0PW51bGwsdC5lcnJvcj1vKGUucmVzcG9uc2UpfHxlLnN0YXR1c1RleHQsUCh0KXx8YShvdChcImVycm9yXCIsZS5zdGF0dXMsbyhlLnJlc3BvbnNlKXx8ZS5zdGF0dXNUZXh0LGUuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpKX0sYy5vbnRpbWVvdXQ9ZnVuY3Rpb24oZSl7dC5zdGF0dXM9ZHQsdC5yZXF1ZXN0PW51bGwsUCh0KXx8aXQoYSkoZSl9LGMub25hYm9ydD1mdW5jdGlvbigpe3Quc3RhdHVzPWx0LHQucmVxdWVzdD1udWxsLHUoKX19ZWxzZSBmLmV2ZXJ5KGZ1bmN0aW9uKGUpe3JldHVybiBlLnN0YXR1cz09PWN0fSkmJmkoVC5zZXJ2ZXJJZCl9LFA9ZnVuY3Rpb24oZSl7cmV0dXJuIDAhPT1lLnJldHJpZXMubGVuZ3RoJiYoZS5zdGF0dXM9cHQsY2xlYXJUaW1lb3V0KGUudGltZW91dCksZS50aW1lb3V0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXtiKGUpfSxlLnJldHJpZXMuc2hpZnQoKSksITApfSxNPWZ1bmN0aW9uKCl7dmFyIGU9Zi5yZWR1Y2UoZnVuY3Rpb24oZSx0KXtyZXR1cm4gbnVsbD09PWV8fG51bGw9PT10LnByb2dyZXNzP251bGw6ZSt0LnByb2dyZXNzfSwwKTtpZihudWxsPT09ZSlyZXR1cm4gcyghMSwwLDApO3ZhciB0PWYucmVkdWNlKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUrdC5zaXplfSwwKTtzKCEwLGUsdCl9LHc9ZnVuY3Rpb24oKXtmLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5zdGF0dXM9PT1mdH0pLmxlbmd0aD49MXx8YigpfTtyZXR1cm4gVC5zZXJ2ZXJJZD8oeT1mdW5jdGlvbihlKXtULmFib3J0ZWR8fChmLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gdC5vZmZzZXQ8ZX0pLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5zdGF0dXM9Y3QsZS5wcm9ncmVzcz1lLnNpemV9KSx3KCkpfSxEPXN0KGUscC51cmwsVC5zZXJ2ZXJJZCksUz17aGVhZGVyczpcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmhlYWRlcnM/dC5oZWFkZXJzKFQuc2VydmVySWQpOk9iamVjdC5hc3NpZ24oe30sdC5oZWFkZXJzKSxtZXRob2Q6XCJIRUFEXCJ9LChBPXJ0KG51bGwsRCxTKSkub25sb2FkPWZ1bmN0aW9uKGUpe3JldHVybiB5KHYoZSxTLm1ldGhvZCkpfSxBLm9uZXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIGEob3QoXCJlcnJvclwiLGUuc3RhdHVzLG0oZS5yZXNwb25zZSl8fGUuc3RhdHVzVGV4dCxlLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSl9LEEub250aW1lb3V0PWl0KGEpKTpmdW5jdGlvbihpKXt2YXIgcz1uZXcgRm9ybURhdGE7SChvKSYmcy5hcHBlbmQobixKU09OLnN0cmluZ2lmeShvKSk7dmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgdC5oZWFkZXJzP3QuaGVhZGVycyhyLG8pOk9iamVjdC5hc3NpZ24oe30sdC5oZWFkZXJzLHtcIlVwbG9hZC1MZW5ndGhcIjpyLnNpemV9KSxsPU9iamVjdC5hc3NpZ24oe30sdCx7aGVhZGVyczp1fSksYz1ydChJKHMpLHN0KGUsdC51cmwpLGwpO2Mub25sb2FkPWZ1bmN0aW9uKGUpe3JldHVybiBpKHYoZSxsLm1ldGhvZCkpfSxjLm9uZXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIGEob3QoXCJlcnJvclwiLGUuc3RhdHVzLG0oZS5yZXNwb25zZSl8fGUuc3RhdHVzVGV4dCxlLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSl9LGMub250aW1lb3V0PWl0KGEpfShmdW5jdGlvbihlKXtULmFib3J0ZWR8fChsKGUpLFQuc2VydmVySWQ9ZSx3KCkpfSkse2Fib3J0OmZ1bmN0aW9uKCl7VC5hYm9ydGVkPSEwLGYuZm9yRWFjaChmdW5jdGlvbihlKXtjbGVhclRpbWVvdXQoZS50aW1lb3V0KSxlLnJlcXVlc3QmJmUucmVxdWVzdC5hYm9ydCgpfSl9fX0sX3Q9ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06XCJcIix0PWFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwLG49YXJndW1lbnRzLmxlbmd0aD4yP2FyZ3VtZW50c1syXTp2b2lkIDAscj1hcmd1bWVudHMubGVuZ3RoPjM/YXJndW1lbnRzWzNdOnZvaWQgMDtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0P2Z1bmN0aW9uKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsbz1uZXcgQXJyYXkoZSksaT0wO2k8ZTtpKyspb1tpXT1hcmd1bWVudHNbaV07cmV0dXJuIHQuYXBwbHkodm9pZCAwLFtuXS5jb25jYXQobyxbcl0pKX06dCYmVSh0LnVybCk/ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIGZ1bmN0aW9uKG8saSxhLHMsdSxsLGMpe2lmKG8pe3ZhciBmPXIuY2h1bmtVcGxvYWRzLGQ9ZiYmby5zaXplPnIuY2h1bmtTaXplLHA9ZiYmKGR8fHIuY2h1bmtGb3JjZSk7aWYobyBpbnN0YW5jZW9mIEJsb2ImJnApcmV0dXJuIEV0KGUsdCxuLG8saSxhLHMsdSxsLGMscik7dmFyIEU9dC5vbmRhdGF8fGZ1bmN0aW9uKGUpe3JldHVybiBlfSxfPXQub25sb2FkfHxmdW5jdGlvbihlKXtyZXR1cm4gZX0sVD10Lm9uZXJyb3J8fGZ1bmN0aW9uKGUpe3JldHVybiBudWxsfSxJPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQuaGVhZGVycz90LmhlYWRlcnMobyxpKXx8e306T2JqZWN0LmFzc2lnbih7fSx0LmhlYWRlcnMpLHY9T2JqZWN0LmFzc2lnbih7fSx0LHtoZWFkZXJzOkl9KSxtPW5ldyBGb3JtRGF0YTtIKGkpJiZtLmFwcGVuZChuLEpTT04uc3RyaW5naWZ5KGkpKSwobyBpbnN0YW5jZW9mIEJsb2I/W3tuYW1lOm51bGwsZmlsZTpvfV06bykuZm9yRWFjaChmdW5jdGlvbihlKXttLmFwcGVuZChuLGUuZmlsZSxudWxsPT09ZS5uYW1lP2UuZmlsZS5uYW1lOlwiXCIrZS5uYW1lK2UuZmlsZS5uYW1lKX0pO3ZhciBoPXJ0KEUobSksc3QoZSx0LnVybCksdik7cmV0dXJuIGgub25sb2FkPWZ1bmN0aW9uKGUpe2Eob3QoXCJsb2FkXCIsZS5zdGF0dXMsXyhlLnJlc3BvbnNlKSxlLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSl9LGgub25lcnJvcj1mdW5jdGlvbihlKXtzKG90KFwiZXJyb3JcIixlLnN0YXR1cyxUKGUucmVzcG9uc2UpfHxlLnN0YXR1c1RleHQsZS5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkpfSxoLm9udGltZW91dD1pdChzKSxoLm9ucHJvZ3Jlc3M9dSxoLm9uYWJvcnQ9bCxofX19KGUsdCxuLHIpOm51bGx9LFR0PWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOlwiXCIsdD1hcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0KXJldHVybiB0O2lmKCF0fHwhVSh0LnVybCkpcmV0dXJuIGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQoKX07dmFyIG49dC5vbmxvYWR8fGZ1bmN0aW9uKGUpe3JldHVybiBlfSxyPXQub25lcnJvcnx8ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGx9O3JldHVybiBmdW5jdGlvbihvLGksYSl7dmFyIHM9cnQobyxlK3QudXJsLHQpO3JldHVybiBzLm9ubG9hZD1mdW5jdGlvbihlKXtpKG90KFwibG9hZFwiLGUuc3RhdHVzLG4oZS5yZXNwb25zZSksZS5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkpfSxzLm9uZXJyb3I9ZnVuY3Rpb24oZSl7YShvdChcImVycm9yXCIsZS5zdGF0dXMscihlLnJlc3BvbnNlKXx8ZS5zdGF0dXNUZXh0LGUuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpKX0scy5vbnRpbWVvdXQ9aXQoYSksc319LEl0PWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOjAsdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MTtyZXR1cm4gZStNYXRoLnJhbmRvbSgpKih0LWUpfSx2dD1mdW5jdGlvbihlLHQpe3ZhciBuPXtjb21wbGV0ZTohMSxwZXJjZWl2ZWRQcm9ncmVzczowLHBlcmNlaXZlZFBlcmZvcm1hbmNlVXBkYXRlcjpudWxsLHByb2dyZXNzOm51bGwsdGltZXN0YW1wOm51bGwscGVyY2VpdmVkRHVyYXRpb246MCxkdXJhdGlvbjowLHJlcXVlc3Q6bnVsbCxyZXNwb25zZTpudWxsfSxyPXQuYWxsb3dNaW5pbXVtVXBsb2FkRHVyYXRpb24sbz1mdW5jdGlvbigpe24ucmVxdWVzdCYmKG4ucGVyY2VpdmVkUGVyZm9ybWFuY2VVcGRhdGVyLmNsZWFyKCksbi5yZXF1ZXN0LmFib3J0JiZuLnJlcXVlc3QuYWJvcnQoKSxuLmNvbXBsZXRlPSEwKX0saT1yP2Z1bmN0aW9uKCl7cmV0dXJuIG4ucHJvZ3Jlc3M/TWF0aC5taW4obi5wcm9ncmVzcyxuLnBlcmNlaXZlZFByb2dyZXNzKTpudWxsfTpmdW5jdGlvbigpe3JldHVybiBuLnByb2dyZXNzfHxudWxsfSxhPXI/ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5taW4obi5kdXJhdGlvbixuLnBlcmNlaXZlZER1cmF0aW9uKX06ZnVuY3Rpb24oKXtyZXR1cm4gbi5kdXJhdGlvbn0scz1PYmplY3QuYXNzaWduKHt9LHBlKCkse3Byb2Nlc3M6ZnVuY3Rpb24odCxvKXt2YXIgaT1mdW5jdGlvbigpezAhPT1uLmR1cmF0aW9uJiZudWxsIT09bi5wcm9ncmVzcyYmcy5maXJlKFwicHJvZ3Jlc3NcIixzLmdldFByb2dyZXNzKCkpfSxhPWZ1bmN0aW9uKCl7bi5jb21wbGV0ZT0hMCxzLmZpcmUoXCJsb2FkLXBlcmNlaXZlZFwiLG4ucmVzcG9uc2UuYm9keSl9O3MuZmlyZShcInN0YXJ0XCIpLG4udGltZXN0YW1wPURhdGUubm93KCksbi5wZXJjZWl2ZWRQZXJmb3JtYW5jZVVwZGF0ZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjFlMyxuPShhcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzJdLGFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXToyNSkscj1hcmd1bWVudHMubGVuZ3RoPjQmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06MjUwLG89bnVsbCxpPURhdGUubm93KCk7cmV0dXJuIHQ+MCYmZnVuY3Rpb24gYSgpe3ZhciBzPURhdGUubm93KCktaSx1PUl0KG4scik7cyt1PnQmJih1PXMrdS10KTt2YXIgbD1zL3Q7bD49MXx8ZG9jdW1lbnQuaGlkZGVuP2UoMSk6KGUobCksbz1zZXRUaW1lb3V0KGEsdSkpfSgpLHtjbGVhcjpmdW5jdGlvbigpe2NsZWFyVGltZW91dChvKX19fShmdW5jdGlvbihlKXtuLnBlcmNlaXZlZFByb2dyZXNzPWUsbi5wZXJjZWl2ZWREdXJhdGlvbj1EYXRlLm5vdygpLW4udGltZXN0YW1wLGkoKSxuLnJlc3BvbnNlJiYxPT09bi5wZXJjZWl2ZWRQcm9ncmVzcyYmIW4uY29tcGxldGUmJmEoKX0scj9JdCg3NTAsMTUwMCk6MCksbi5yZXF1ZXN0PWUodCxvLGZ1bmN0aW9uKGUpe24ucmVzcG9uc2U9SChlKT9lOnt0eXBlOlwibG9hZFwiLGNvZGU6MjAwLGJvZHk6XCJcIitlLGhlYWRlcnM6e319LG4uZHVyYXRpb249RGF0ZS5ub3coKS1uLnRpbWVzdGFtcCxuLnByb2dyZXNzPTEscy5maXJlKFwibG9hZFwiLG4ucmVzcG9uc2UuYm9keSksKCFyfHxyJiYxPT09bi5wZXJjZWl2ZWRQcm9ncmVzcykmJmEoKX0sZnVuY3Rpb24oZSl7bi5wZXJjZWl2ZWRQZXJmb3JtYW5jZVVwZGF0ZXIuY2xlYXIoKSxzLmZpcmUoXCJlcnJvclwiLEgoZSk/ZTp7dHlwZTpcImVycm9yXCIsY29kZTowLGJvZHk6XCJcIitlfSl9LGZ1bmN0aW9uKGUsdCxyKXtuLmR1cmF0aW9uPURhdGUubm93KCktbi50aW1lc3RhbXAsbi5wcm9ncmVzcz1lP3QvcjpudWxsLGkoKX0sZnVuY3Rpb24oKXtuLnBlcmNlaXZlZFBlcmZvcm1hbmNlVXBkYXRlci5jbGVhcigpLHMuZmlyZShcImFib3J0XCIsbi5yZXNwb25zZT9uLnJlc3BvbnNlLmJvZHk6bnVsbCl9LGZ1bmN0aW9uKGUpe3MuZmlyZShcInRyYW5zZmVyXCIsZSl9KX0sYWJvcnQ6byxnZXRQcm9ncmVzczppLGdldER1cmF0aW9uOmEscmVzZXQ6ZnVuY3Rpb24oKXtvKCksbi5jb21wbGV0ZT0hMSxuLnBlcmNlaXZlZFByb2dyZXNzPTAsbi5wcm9ncmVzcz0wLG4udGltZXN0YW1wPW51bGwsbi5wZXJjZWl2ZWREdXJhdGlvbj0wLG4uZHVyYXRpb249MCxuLnJlcXVlc3Q9bnVsbCxuLnJlc3BvbnNlPW51bGx9fSk7cmV0dXJuIHN9LG10PWZ1bmN0aW9uKGUpe3JldHVybiBlLnN1YnN0cigwLGUubGFzdEluZGV4T2YoXCIuXCIpKXx8ZX0saHQ9ZnVuY3Rpb24oZSl7cmV0dXJuISEoZSBpbnN0YW5jZW9mIEZpbGV8fGUgaW5zdGFuY2VvZiBCbG9iJiZlLm5hbWUpfSxndD1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpudWxsLHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm51bGwscj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCxvPW9lKCksaT17YXJjaGl2ZWQ6ITEsZnJvemVuOiExLHJlbGVhc2VkOiExLHNvdXJjZTpudWxsLGZpbGU6cixzZXJ2ZXJGaWxlUmVmZXJlbmNlOnQsdHJhbnNmZXJJZDpudWxsLHByb2Nlc3NpbmdBYm9ydGVkOiExLHN0YXR1czp0P0llLlBST0NFU1NJTkdfQ09NUExFVEU6SWUuSU5JVCxhY3RpdmVMb2FkZXI6bnVsbCxhY3RpdmVQcm9jZXNzb3I6bnVsbH0sYT1udWxsLHM9e30sdT1mdW5jdGlvbihlKXtyZXR1cm4gaS5zdGF0dXM9ZX0sbD1mdW5jdGlvbihlKXtpZighaS5yZWxlYXNlZCYmIWkuZnJvemVuKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07Zi5maXJlLmFwcGx5KGYsW2VdLmNvbmNhdChuKSl9fSxjPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1lLnNwbGl0KFwiLlwiKSxvPXJbMF0saT1yLnBvcCgpLGE9cztyLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGE9YVtlXX0pLEpTT04uc3RyaW5naWZ5KGFbaV0pIT09SlNPTi5zdHJpbmdpZnkodCkmJihhW2ldPXQsbChcIm1ldGFkYXRhLXVwZGF0ZVwiLHtrZXk6byx2YWx1ZTpzW29dLHNpbGVudDpufSkpfSxmPU9iamVjdC5hc3NpZ24oe2lkOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gb319LG9yaWdpbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGV9LHNldDpmdW5jdGlvbih0KXtyZXR1cm4gZT10fX0sc2VydmVySWQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBpLnNlcnZlckZpbGVSZWZlcmVuY2V9fSx0cmFuc2ZlcklkOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS50cmFuc2ZlcklkfX0sc3RhdHVzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS5zdGF0dXN9fSxmaWxlbmFtZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGkuZmlsZS5uYW1lfX0sZmlsZW5hbWVXaXRob3V0RXh0ZW5zaW9uOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbXQoaS5maWxlLm5hbWUpfX0sZmlsZUV4dGVuc2lvbjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGplKGkuZmlsZS5uYW1lKX19LGZpbGVUeXBlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS5maWxlLnR5cGV9fSxmaWxlU2l6ZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGkuZmlsZS5zaXplfX0sZmlsZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGkuZmlsZX19LHJlbGF0aXZlUGF0aDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGkuZmlsZS5fcmVsYXRpdmVQYXRofX0sc291cmNlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS5zb3VyY2V9fSxnZXRNZXRhZGF0YTpmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24gZSh0KXtpZighSCh0KSlyZXR1cm4gdDt2YXIgbj1QKHQpP1tdOnt9O2Zvcih2YXIgciBpbiB0KWlmKHQuaGFzT3duUHJvcGVydHkocikpe3ZhciBvPXRbcl07bltyXT1vJiZIKG8pP2Uobyk6b31yZXR1cm4gbn0oZT9zW2VdOnMpfSxzZXRNZXRhZGF0YTpmdW5jdGlvbihlLHQsbil7aWYoSChlKSl7dmFyIHI9ZTtyZXR1cm4gT2JqZWN0LmtleXMocikuZm9yRWFjaChmdW5jdGlvbihlKXtjKGUscltlXSx0KX0pLGV9cmV0dXJuIGMoZSx0LG4pLHR9LGV4dGVuZDpmdW5jdGlvbihlLHQpe3JldHVybiBkW2VdPXR9LGFib3J0TG9hZDpmdW5jdGlvbigpe2kuYWN0aXZlTG9hZGVyP2kuYWN0aXZlTG9hZGVyLmFib3J0KCk6KHUoSWUuSU5JVCksbChcImxvYWQtYWJvcnRcIikpfSxyZXRyeUxvYWQ6ZnVuY3Rpb24oKXtpLmFjdGl2ZUxvYWRlciYmaS5hY3RpdmVMb2FkZXIubG9hZCgpfSxyZXF1ZXN0UHJvY2Vzc2luZzpmdW5jdGlvbigpe2kucHJvY2Vzc2luZ0Fib3J0ZWQ9ITEsdShJZS5QUk9DRVNTSU5HX1FVRVVFRCl9LGFib3J0UHJvY2Vzc2luZzpmdW5jdGlvbigpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihlKXtpZighaS5hY3RpdmVQcm9jZXNzb3IpcmV0dXJuIGkucHJvY2Vzc2luZ0Fib3J0ZWQ9ITAsdShJZS5JRExFKSxsKFwicHJvY2Vzcy1hYm9ydFwiKSx2b2lkIGUoKTthPWZ1bmN0aW9uKCl7ZSgpfSxpLmFjdGl2ZVByb2Nlc3Nvci5hYm9ydCgpfSl9LGxvYWQ6ZnVuY3Rpb24odCxuLHIpe2kuc291cmNlPXQsZi5maXJlU3luYyhcImluaXRcIiksaS5maWxlP2YuZmlyZVN5bmMoXCJsb2FkLXNraXBcIik6KGkuZmlsZT1mdW5jdGlvbihlKXt2YXIgdD1bZS5uYW1lLGUuc2l6ZSxlLnR5cGVdO3JldHVybiBlIGluc3RhbmNlb2YgQmxvYnx8WWUoZSk/dFswXT1lLm5hbWV8fFhlKCk6WWUoZSk/KHRbMV09ZS5sZW5ndGgsdFsyXT1RZShlKSk6VShlKSYmKHRbMF09a2UoZSksdFsxXT0wLHRbMl09XCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIikse25hbWU6dFswXSxzaXplOnRbMV0sdHlwZTp0WzJdfX0odCksbi5vbihcImluaXRcIixmdW5jdGlvbigpe2woXCJsb2FkLWluaXRcIil9KSxuLm9uKFwibWV0YVwiLGZ1bmN0aW9uKHQpe2kuZmlsZS5zaXplPXQuc2l6ZSxpLmZpbGUuZmlsZW5hbWU9dC5maWxlbmFtZSx0LnNvdXJjZSYmKGU9dmUuTElNQk8saS5zZXJ2ZXJGaWxlUmVmZXJlbmNlPXQuc291cmNlLGkuc3RhdHVzPUllLlBST0NFU1NJTkdfQ09NUExFVEUpLGwoXCJsb2FkLW1ldGFcIil9KSxuLm9uKFwicHJvZ3Jlc3NcIixmdW5jdGlvbihlKXt1KEllLkxPQURJTkcpLGwoXCJsb2FkLXByb2dyZXNzXCIsZSl9KSxuLm9uKFwiZXJyb3JcIixmdW5jdGlvbihlKXt1KEllLkxPQURfRVJST1IpLGwoXCJsb2FkLXJlcXVlc3QtZXJyb3JcIixlKX0pLG4ub24oXCJhYm9ydFwiLGZ1bmN0aW9uKCl7dShJZS5JTklUKSxsKFwibG9hZC1hYm9ydFwiKX0pLG4ub24oXCJsb2FkXCIsZnVuY3Rpb24odCl7aS5hY3RpdmVMb2FkZXI9bnVsbDt2YXIgbj1mdW5jdGlvbih0KXtpLmZpbGU9aHQodCk/dDppLmZpbGUsZT09PXZlLkxJTUJPJiZpLnNlcnZlckZpbGVSZWZlcmVuY2U/dShJZS5QUk9DRVNTSU5HX0NPTVBMRVRFKTp1KEllLklETEUpLGwoXCJsb2FkXCIpfTtpLnNlcnZlckZpbGVSZWZlcmVuY2U/bih0KTpyKHQsbixmdW5jdGlvbihlKXtpLmZpbGU9dCxsKFwibG9hZC1tZXRhXCIpLHUoSWUuTE9BRF9FUlJPUiksbChcImxvYWQtZmlsZS1lcnJvclwiLGUpfSl9KSxuLnNldFNvdXJjZSh0KSxpLmFjdGl2ZUxvYWRlcj1uLG4ubG9hZCgpKX0scHJvY2VzczpmdW5jdGlvbiBlKHQsbil7aWYoaS5wcm9jZXNzaW5nQWJvcnRlZClpLnByb2Nlc3NpbmdBYm9ydGVkPSExO2Vsc2UgaWYodShJZS5QUk9DRVNTSU5HKSxhPW51bGwsaS5maWxlIGluc3RhbmNlb2YgQmxvYil7dC5vbihcImxvYWRcIixmdW5jdGlvbihlKXtpLnRyYW5zZmVySWQ9bnVsbCxpLnNlcnZlckZpbGVSZWZlcmVuY2U9ZX0pLHQub24oXCJ0cmFuc2ZlclwiLGZ1bmN0aW9uKGUpe2kudHJhbnNmZXJJZD1lfSksdC5vbihcImxvYWQtcGVyY2VpdmVkXCIsZnVuY3Rpb24oZSl7aS5hY3RpdmVQcm9jZXNzb3I9bnVsbCxpLnRyYW5zZmVySWQ9bnVsbCxpLnNlcnZlckZpbGVSZWZlcmVuY2U9ZSx1KEllLlBST0NFU1NJTkdfQ09NUExFVEUpLGwoXCJwcm9jZXNzLWNvbXBsZXRlXCIsZSl9KSx0Lm9uKFwic3RhcnRcIixmdW5jdGlvbigpe2woXCJwcm9jZXNzLXN0YXJ0XCIpfSksdC5vbihcImVycm9yXCIsZnVuY3Rpb24oZSl7aS5hY3RpdmVQcm9jZXNzb3I9bnVsbCx1KEllLlBST0NFU1NJTkdfRVJST1IpLGwoXCJwcm9jZXNzLWVycm9yXCIsZSl9KSx0Lm9uKFwiYWJvcnRcIixmdW5jdGlvbihlKXtpLmFjdGl2ZVByb2Nlc3Nvcj1udWxsLGkuc2VydmVyRmlsZVJlZmVyZW5jZT1lLHUoSWUuSURMRSksbChcInByb2Nlc3MtYWJvcnRcIiksYSYmYSgpfSksdC5vbihcInByb2dyZXNzXCIsZnVuY3Rpb24oZSl7bChcInByb2Nlc3MtcHJvZ3Jlc3NcIixlKX0pO3ZhciByPWNvbnNvbGUuZXJyb3I7bihpLmZpbGUsZnVuY3Rpb24oZSl7aS5hcmNoaXZlZHx8dC5wcm9jZXNzKGUsT2JqZWN0LmFzc2lnbih7fSxzKSl9LHIpLGkuYWN0aXZlUHJvY2Vzc29yPXR9ZWxzZSBmLm9uKFwibG9hZFwiLGZ1bmN0aW9uKCl7ZSh0LG4pfSl9LHJldmVydDpmdW5jdGlvbihlLHQpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihuLHIpe3ZhciBvPW51bGwhPT1pLnNlcnZlckZpbGVSZWZlcmVuY2U/aS5zZXJ2ZXJGaWxlUmVmZXJlbmNlOmkudHJhbnNmZXJJZDtudWxsIT09bz8oZShvLGZ1bmN0aW9uKCl7aS5zZXJ2ZXJGaWxlUmVmZXJlbmNlPW51bGwsaS50cmFuc2ZlcklkPW51bGwsbigpfSxmdW5jdGlvbihlKXt0Pyh1KEllLlBST0NFU1NJTkdfUkVWRVJUX0VSUk9SKSxsKFwicHJvY2Vzcy1yZXZlcnQtZXJyb3JcIikscihlKSk6bigpfSksdShJZS5JRExFKSxsKFwicHJvY2Vzcy1yZXZlcnRcIikpOm4oKX0pfX0scGUoKSx7ZnJlZXplOmZ1bmN0aW9uKCl7cmV0dXJuIGkuZnJvemVuPSEwfSxyZWxlYXNlOmZ1bmN0aW9uKCl7cmV0dXJuIGkucmVsZWFzZWQ9ITB9LHJlbGVhc2VkOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS5yZWxlYXNlZH19LGFyY2hpdmU6ZnVuY3Rpb24oKXtyZXR1cm4gaS5hcmNoaXZlZD0hMH0sYXJjaGl2ZWQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBpLmFyY2hpdmVkfX19KSxkPW4oZik7cmV0dXJuIGR9LFJ0PWZ1bmN0aW9uKGUsdCl7dmFyIG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4gTSh0KT8wOlUodCk/ZS5maW5kSW5kZXgoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaWQ9PT10fSk6LTF9KGUsdCk7aWYoIShuPDApKXJldHVybiBlW25dfHxudWxsfSxPdD1mdW5jdGlvbihlLHQsbixyLG8saSl7dmFyIGE9cnQobnVsbCxlLHttZXRob2Q6XCJHRVRcIixyZXNwb25zZVR5cGU6XCJibG9iXCJ9KTtyZXR1cm4gYS5vbmxvYWQ9ZnVuY3Rpb24obil7dmFyIHI9bi5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSxvPWV0KHIpLm5hbWV8fGtlKGUpO3Qob3QoXCJsb2FkXCIsbi5zdGF0dXMsV2Uobi5yZXNwb25zZSxvKSxyKSl9LGEub25lcnJvcj1mdW5jdGlvbihlKXtuKG90KFwiZXJyb3JcIixlLnN0YXR1cyxlLnN0YXR1c1RleHQsZS5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkpfSxhLm9uaGVhZGVycz1mdW5jdGlvbihlKXtpKG90KFwiaGVhZGVyc1wiLGUuc3RhdHVzLG51bGwsZS5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkpfSxhLm9udGltZW91dD1pdChuKSxhLm9ucHJvZ3Jlc3M9cixhLm9uYWJvcnQ9byxhfSx5dD1mdW5jdGlvbihlKXtyZXR1cm4gMD09PWUuaW5kZXhPZihcIi8vXCIpJiYoZT1sb2NhdGlvbi5wcm90b2NvbCtlKSxlLnRvTG93ZXJDYXNlKCkucmVwbGFjZShcImJsb2I6XCIsXCJcIikucmVwbGFjZSgvKFthLXpdKT86XFwvXFwvLyxcIiQxXCIpLnNwbGl0KFwiL1wiKVswXX0sRHQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIFkoZSk/ZS5hcHBseSh2b2lkIDAsYXJndW1lbnRzKTplfX0sU3Q9ZnVuY3Rpb24oZSx0KXtjbGVhclRpbWVvdXQodC5saXN0VXBkYXRlVGltZW91dCksdC5saXN0VXBkYXRlVGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZShcIkRJRF9VUERBVEVfSVRFTVNcIix7aXRlbXM6UGUodC5pdGVtcyl9KX0sMCl9LEF0PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQ+MT90LTE6MCkscj0xO3I8dDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24odCl7aWYoIWUpcmV0dXJuIHQoITApO3ZhciByPWUuYXBwbHkodm9pZCAwLG4pO3JldHVybiBudWxsPT1yP3QoITApOlwiYm9vbGVhblwiPT10eXBlb2Ygcj90KHIpOnZvaWQoXCJmdW5jdGlvblwiPT10eXBlb2Ygci50aGVuJiZyLnRoZW4odCkpfSl9LEx0PWZ1bmN0aW9uKGUsdCl7ZS5pdGVtcy5zb3J0KGZ1bmN0aW9uKGUsbil7cmV0dXJuIHQoVGUoZSksVGUobikpfSl9LGJ0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LHI9bi5xdWVyeSxvPW4uc3VjY2VzcyxpPXZvaWQgMD09PW8/ZnVuY3Rpb24oKXt9Om8sYT1uLmZhaWx1cmUscz12b2lkIDA9PT1hP2Z1bmN0aW9uKCl7fTphLHU9c2UobixbXCJxdWVyeVwiLFwic3VjY2Vzc1wiLFwiZmFpbHVyZVwiXSksbD1MZShlLml0ZW1zLHIpO2w/dChsLGkscyx1fHx7fSk6cyh7ZXJyb3I6b3QoXCJlcnJvclwiLDAsXCJJdGVtIG5vdCBmb3VuZFwiKSxmaWxlOm51bGx9KX19LFB0PWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm57QUJPUlRfQUxMOmZ1bmN0aW9uKCl7UGUobi5pdGVtcykuZm9yRWFjaChmdW5jdGlvbihlKXtlLmZyZWV6ZSgpLGUuYWJvcnRMb2FkKCksZS5hYm9ydFByb2Nlc3NpbmcoKX0pfSxESURfU0VUX0ZJTEVTOmZ1bmN0aW9uKHQpe3ZhciByPXQudmFsdWUsbz0odm9pZCAwPT09cj9bXTpyKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJue3NvdXJjZTplLnNvdXJjZT9lLnNvdXJjZTplLG9wdGlvbnM6ZS5vcHRpb25zfX0pLGk9UGUobi5pdGVtcyk7aS5mb3JFYWNoKGZ1bmN0aW9uKHQpe28uZmluZChmdW5jdGlvbihlKXtyZXR1cm4gZS5zb3VyY2U9PT10LnNvdXJjZXx8ZS5zb3VyY2U9PT10LmZpbGV9KXx8ZShcIlJFTU9WRV9JVEVNXCIse3F1ZXJ5OnQscmVtb3ZlOiExfSl9KSxpPVBlKG4uaXRlbXMpLG8uZm9yRWFjaChmdW5jdGlvbih0LG4pe2kuZmluZChmdW5jdGlvbihlKXtyZXR1cm4gZS5zb3VyY2U9PT10LnNvdXJjZXx8ZS5maWxlPT09dC5zb3VyY2V9KXx8ZShcIkFERF9JVEVNXCIsT2JqZWN0LmFzc2lnbih7fSx0LHtpbnRlcmFjdGlvbk1ldGhvZDpyZSxpbmRleDpufSkpfSl9LERJRF9VUERBVEVfSVRFTV9NRVRBREFUQTpmdW5jdGlvbihyKXt2YXIgbz1yLmlkLGk9ci5hY3Rpb24sYT1yLmNoYW5nZTthLnNpbGVudHx8KGNsZWFyVGltZW91dChuLml0ZW1VcGRhdGVUaW1lb3V0KSxuLml0ZW1VcGRhdGVUaW1lb3V0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXt2YXIgcj1SdChuLml0ZW1zLG8pO2lmKHQoXCJJU19BU1lOQ1wiKSl7ci5vcmlnaW49PT12ZS5MT0NBTCYmZShcIkRJRF9MT0FEX0lURU1cIix7aWQ6ci5pZCxlcnJvcjpudWxsLHNlcnZlckZpbGVSZWZlcmVuY2U6ci5zb3VyY2V9KTt2YXIgcyx1PWZ1bmN0aW9uKCl7c2V0VGltZW91dChmdW5jdGlvbigpe2UoXCJSRVFVRVNUX0lURU1fUFJPQ0VTU0lOR1wiLHtxdWVyeTpvfSl9LDMyKX07cmV0dXJuIHIuc3RhdHVzPT09SWUuUFJPQ0VTU0lOR19DT01QTEVURT8ocz1uLm9wdGlvbnMuaW5zdGFudFVwbG9hZCx2b2lkIHIucmV2ZXJ0KFR0KG4ub3B0aW9ucy5zZXJ2ZXIudXJsLG4ub3B0aW9ucy5zZXJ2ZXIucmV2ZXJ0KSx0KFwiR0VUX0ZPUkNFX1JFVkVSVFwiKSkudGhlbihzP3U6ZnVuY3Rpb24oKXt9KS5jYXRjaChmdW5jdGlvbigpe30pKTpyLnN0YXR1cz09PUllLlBST0NFU1NJTkc/ZnVuY3Rpb24oZSl7ci5hYm9ydFByb2Nlc3NpbmcoKS50aGVuKGU/dTpmdW5jdGlvbigpe30pfShuLm9wdGlvbnMuaW5zdGFudFVwbG9hZCk6dm9pZChuLm9wdGlvbnMuaW5zdGFudFVwbG9hZCYmdSgpKX1PZShcIlNIT1VMRF9QUkVQQVJFX09VVFBVVFwiLCExLHtpdGVtOnIscXVlcnk6dCxhY3Rpb246aSxjaGFuZ2U6YX0pLnRoZW4oZnVuY3Rpb24obil7dmFyIGk9dChcIkdFVF9CRUZPUkVfUFJFUEFSRV9GSUxFXCIpO2kmJihuPWkocixuKSksbiYmZShcIlJFUVVFU1RfUFJFUEFSRV9PVVRQVVRcIix7cXVlcnk6byxpdGVtOnIsc3VjY2VzczpmdW5jdGlvbih0KXtlKFwiRElEX1BSRVBBUkVfT1VUUFVUXCIse2lkOm8sZmlsZTp0fSl9fSwhMCl9KX0sMCkpfSxNT1ZFX0lURU06ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5xdWVyeSxyPWUuaW5kZXgsbz1MZShuLml0ZW1zLHQpO2lmKG8pe3ZhciBpPW4uaXRlbXMuaW5kZXhPZihvKTtpIT09KHI9eGUociwwLG4uaXRlbXMubGVuZ3RoLTEpKSYmbi5pdGVtcy5zcGxpY2UociwwLG4uaXRlbXMuc3BsaWNlKGksMSlbMF0pfX0sU09SVDpmdW5jdGlvbihyKXt2YXIgbz1yLmNvbXBhcmU7THQobixvKSxlKFwiRElEX1NPUlRfSVRFTVNcIix7aXRlbXM6dChcIkdFVF9BQ1RJVkVfSVRFTVNcIil9KX0sQUREX0lURU1TOmZ1bmN0aW9uKG4pe3ZhciByPW4uaXRlbXMsbz1uLmluZGV4LGk9bi5pbnRlcmFjdGlvbk1ldGhvZCxhPW4uc3VjY2VzcyxzPXZvaWQgMD09PWE/ZnVuY3Rpb24oKXt9OmEsdT1uLmZhaWx1cmUsbD12b2lkIDA9PT11P2Z1bmN0aW9uKCl7fTp1LGM9bztpZigtMT09PW98fHZvaWQgMD09PW8pe3ZhciBmPXQoXCJHRVRfSVRFTV9JTlNFUlRfTE9DQVRJT05cIiksZD10KFwiR0VUX1RPVEFMX0lURU1TXCIpO2M9XCJiZWZvcmVcIj09PWY/MDpkfXZhciBwPXQoXCJHRVRfSUdOT1JFRF9GSUxFU1wiKSxFPXIuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBodChlKT8hcC5pbmNsdWRlcyhlLm5hbWUudG9Mb3dlckNhc2UoKSk6IU0oZSl9KS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKG4scil7ZShcIkFERF9JVEVNXCIse2ludGVyYWN0aW9uTWV0aG9kOmksc291cmNlOnQuc291cmNlfHx0LHN1Y2Nlc3M6bixmYWlsdXJlOnIsaW5kZXg6YysrLG9wdGlvbnM6dC5vcHRpb25zfHx7fX0pfSl9KTtQcm9taXNlLmFsbChFKS50aGVuKHMpLmNhdGNoKGwpfSxBRERfSVRFTTpmdW5jdGlvbihyKXt2YXIgbz1yLnNvdXJjZSxpPXIuaW5kZXgsYT12b2lkIDA9PT1pPy0xOmkscz1yLmludGVyYWN0aW9uTWV0aG9kLHU9ci5zdWNjZXNzLGw9dm9pZCAwPT09dT9mdW5jdGlvbigpe306dSxjPXIuZmFpbHVyZSxmPXZvaWQgMD09PWM/ZnVuY3Rpb24oKXt9OmMsZD1yLm9wdGlvbnMscD12b2lkIDA9PT1kP3t9OmQ7aWYoTShvKSlmKHtlcnJvcjpvdChcImVycm9yXCIsMCxcIk5vIHNvdXJjZVwiKSxmaWxlOm51bGx9KTtlbHNlIGlmKCFodChvKXx8IW4ub3B0aW9ucy5pZ25vcmVkRmlsZXMuaW5jbHVkZXMoby5uYW1lLnRvTG93ZXJDYXNlKCkpKXtpZighZnVuY3Rpb24oZSl7dmFyIHQ9UGUoZS5pdGVtcykubGVuZ3RoO2lmKCFlLm9wdGlvbnMuYWxsb3dNdWx0aXBsZSlyZXR1cm4gMD09PXQ7dmFyIG49ZS5vcHRpb25zLm1heEZpbGVzO3JldHVybiBudWxsPT09bnx8dDxufShuKSl7aWYobi5vcHRpb25zLmFsbG93TXVsdGlwbGV8fCFuLm9wdGlvbnMuYWxsb3dNdWx0aXBsZSYmIW4ub3B0aW9ucy5hbGxvd1JlcGxhY2Upe3ZhciBFPW90KFwid2FybmluZ1wiLDAsXCJNYXggZmlsZXNcIik7cmV0dXJuIGUoXCJESURfVEhST1dfTUFYX0ZJTEVTXCIse3NvdXJjZTpvLGVycm9yOkV9KSx2b2lkIGYoe2Vycm9yOkUsZmlsZTpudWxsfSl9dmFyIF89UGUobi5pdGVtcylbMF07aWYoXy5zdGF0dXM9PT1JZS5QUk9DRVNTSU5HX0NPTVBMRVRFfHxfLnN0YXR1cz09PUllLlBST0NFU1NJTkdfUkVWRVJUX0VSUk9SKXt2YXIgVD10KFwiR0VUX0ZPUkNFX1JFVkVSVFwiKTtpZihfLnJldmVydChUdChuLm9wdGlvbnMuc2VydmVyLnVybCxuLm9wdGlvbnMuc2VydmVyLnJldmVydCksVCkudGhlbihmdW5jdGlvbigpe1QmJmUoXCJBRERfSVRFTVwiLHtzb3VyY2U6byxpbmRleDphLGludGVyYWN0aW9uTWV0aG9kOnMsc3VjY2VzczpsLGZhaWx1cmU6ZixvcHRpb25zOnB9KX0pLmNhdGNoKGZ1bmN0aW9uKCl7fSksVClyZXR1cm59ZShcIlJFTU9WRV9JVEVNXCIse3F1ZXJ5Ol8uaWR9KX12YXIgST1cImxvY2FsXCI9PT1wLnR5cGU/dmUuTE9DQUw6XCJsaW1ib1wiPT09cC50eXBlP3ZlLkxJTUJPOnZlLklOUFVULHY9Z3QoSSxJPT09dmUuSU5QVVQ/bnVsbDpvLHAuZmlsZSk7T2JqZWN0LmtleXMocC5tZXRhZGF0YXx8e30pLmZvckVhY2goZnVuY3Rpb24oZSl7di5zZXRNZXRhZGF0YShlLHAubWV0YWRhdGFbZV0pfSkseWUoXCJESURfQ1JFQVRFX0lURU1cIix2LHtxdWVyeTp0LGRpc3BhdGNoOmV9KTt2YXIgbT10KFwiR0VUX0lURU1fSU5TRVJUX0xPQ0FUSU9OXCIpO24ub3B0aW9ucy5pdGVtSW5zZXJ0TG9jYXRpb25GcmVlZG9tfHwoYT1cImJlZm9yZVwiPT09bT8tMTpuLml0ZW1zLmxlbmd0aCksZnVuY3Rpb24oZSx0LG4pe00odCl8fCh2b2lkIDA9PT1uP2UucHVzaCh0KTpmdW5jdGlvbihlLHQsbil7ZS5zcGxpY2UodCwwLG4pfShlLG49eGUobiwwLGUubGVuZ3RoKSx0KSl9KG4uaXRlbXMsdixhKSxZKG0pJiZvJiZMdChuLG0pO3ZhciBoPXYuaWQ7di5vbihcImluaXRcIixmdW5jdGlvbigpe2UoXCJESURfSU5JVF9JVEVNXCIse2lkOmh9KX0pLHYub24oXCJsb2FkLWluaXRcIixmdW5jdGlvbigpe2UoXCJESURfU1RBUlRfSVRFTV9MT0FEXCIse2lkOmh9KX0pLHYub24oXCJsb2FkLW1ldGFcIixmdW5jdGlvbigpe2UoXCJESURfVVBEQVRFX0lURU1fTUVUQVwiLHtpZDpofSl9KSx2Lm9uKFwibG9hZC1wcm9ncmVzc1wiLGZ1bmN0aW9uKHQpe2UoXCJESURfVVBEQVRFX0lURU1fTE9BRF9QUk9HUkVTU1wiLHtpZDpoLHByb2dyZXNzOnR9KX0pLHYub24oXCJsb2FkLXJlcXVlc3QtZXJyb3JcIixmdW5jdGlvbih0KXt2YXIgcj1EdChuLm9wdGlvbnMubGFiZWxGaWxlTG9hZEVycm9yKSh0KTtpZih0LmNvZGU+PTQwMCYmdC5jb2RlPDUwMClyZXR1cm4gZShcIkRJRF9USFJPV19JVEVNX0lOVkFMSURcIix7aWQ6aCxlcnJvcjp0LHN0YXR1czp7bWFpbjpyLHN1Yjp0LmNvZGUrXCIgKFwiK3QuYm9keStcIilcIn19KSx2b2lkIGYoe2Vycm9yOnQsZmlsZTpUZSh2KX0pO2UoXCJESURfVEhST1dfSVRFTV9MT0FEX0VSUk9SXCIse2lkOmgsZXJyb3I6dCxzdGF0dXM6e21haW46cixzdWI6bi5vcHRpb25zLmxhYmVsVGFwVG9SZXRyeX19KX0pLHYub24oXCJsb2FkLWZpbGUtZXJyb3JcIixmdW5jdGlvbih0KXtlKFwiRElEX1RIUk9XX0lURU1fSU5WQUxJRFwiLHtpZDpoLGVycm9yOnQuc3RhdHVzLHN0YXR1czp0LnN0YXR1c30pLGYoe2Vycm9yOnQuc3RhdHVzLGZpbGU6VGUodil9KX0pLHYub24oXCJsb2FkLWFib3J0XCIsZnVuY3Rpb24oKXtlKFwiUkVNT1ZFX0lURU1cIix7cXVlcnk6aH0pfSksdi5vbihcImxvYWQtc2tpcFwiLGZ1bmN0aW9uKCl7ZShcIkNPTVBMRVRFX0xPQURfSVRFTVwiLHtxdWVyeTpoLGl0ZW06dixkYXRhOntzb3VyY2U6byxzdWNjZXNzOmx9fSl9KSx2Lm9uKFwibG9hZFwiLGZ1bmN0aW9uKCl7dmFyIHI9ZnVuY3Rpb24ocil7cj8odi5vbihcIm1ldGFkYXRhLXVwZGF0ZVwiLGZ1bmN0aW9uKHQpe2UoXCJESURfVVBEQVRFX0lURU1fTUVUQURBVEFcIix7aWQ6aCxjaGFuZ2U6dH0pfSksT2UoXCJTSE9VTERfUFJFUEFSRV9PVVRQVVRcIiwhMSx7aXRlbTp2LHF1ZXJ5OnR9KS50aGVuKGZ1bmN0aW9uKHIpe3ZhciBpPXQoXCJHRVRfQkVGT1JFX1BSRVBBUkVfRklMRVwiKTtpJiYocj1pKHYscikpO3ZhciBhPWZ1bmN0aW9uKCl7ZShcIkNPTVBMRVRFX0xPQURfSVRFTVwiLHtxdWVyeTpoLGl0ZW06dixkYXRhOntzb3VyY2U6byxzdWNjZXNzOmx9fSksU3QoZSxuKX07cj9lKFwiUkVRVUVTVF9QUkVQQVJFX09VVFBVVFwiLHtxdWVyeTpoLGl0ZW06dixzdWNjZXNzOmZ1bmN0aW9uKHQpe2UoXCJESURfUFJFUEFSRV9PVVRQVVRcIix7aWQ6aCxmaWxlOnR9KSxhKCl9fSwhMCk6YSgpfSkpOmUoXCJSRU1PVkVfSVRFTVwiLHtxdWVyeTpofSl9O09lKFwiRElEX0xPQURfSVRFTVwiLHYse3F1ZXJ5OnQsZGlzcGF0Y2g6ZX0pLnRoZW4oZnVuY3Rpb24oKXtBdCh0KFwiR0VUX0JFRk9SRV9BRERfRklMRVwiKSxUZSh2KSkudGhlbihyKX0pLmNhdGNoKGZ1bmN0aW9uKHQpe2lmKCF0fHwhdC5lcnJvcnx8IXQuc3RhdHVzKXJldHVybiByKCExKTtlKFwiRElEX1RIUk9XX0lURU1fSU5WQUxJRFwiLHtpZDpoLGVycm9yOnQuZXJyb3Isc3RhdHVzOnQuc3RhdHVzfSl9KX0pLHYub24oXCJwcm9jZXNzLXN0YXJ0XCIsZnVuY3Rpb24oKXtlKFwiRElEX1NUQVJUX0lURU1fUFJPQ0VTU0lOR1wiLHtpZDpofSl9KSx2Lm9uKFwicHJvY2Vzcy1wcm9ncmVzc1wiLGZ1bmN0aW9uKHQpe2UoXCJESURfVVBEQVRFX0lURU1fUFJPQ0VTU19QUk9HUkVTU1wiLHtpZDpoLHByb2dyZXNzOnR9KX0pLHYub24oXCJwcm9jZXNzLWVycm9yXCIsZnVuY3Rpb24odCl7ZShcIkRJRF9USFJPV19JVEVNX1BST0NFU1NJTkdfRVJST1JcIix7aWQ6aCxlcnJvcjp0LHN0YXR1czp7bWFpbjpEdChuLm9wdGlvbnMubGFiZWxGaWxlUHJvY2Vzc2luZ0Vycm9yKSh0KSxzdWI6bi5vcHRpb25zLmxhYmVsVGFwVG9SZXRyeX19KX0pLHYub24oXCJwcm9jZXNzLXJldmVydC1lcnJvclwiLGZ1bmN0aW9uKHQpe2UoXCJESURfVEhST1dfSVRFTV9QUk9DRVNTSU5HX1JFVkVSVF9FUlJPUlwiLHtpZDpoLGVycm9yOnQsc3RhdHVzOnttYWluOkR0KG4ub3B0aW9ucy5sYWJlbEZpbGVQcm9jZXNzaW5nUmV2ZXJ0RXJyb3IpKHQpLHN1YjpuLm9wdGlvbnMubGFiZWxUYXBUb1JldHJ5fX0pfSksdi5vbihcInByb2Nlc3MtY29tcGxldGVcIixmdW5jdGlvbih0KXtlKFwiRElEX0NPTVBMRVRFX0lURU1fUFJPQ0VTU0lOR1wiLHtpZDpoLGVycm9yOm51bGwsc2VydmVyRmlsZVJlZmVyZW5jZTp0fSksZShcIkRJRF9ERUZJTkVfVkFMVUVcIix7aWQ6aCx2YWx1ZTp0fSl9KSx2Lm9uKFwicHJvY2Vzcy1hYm9ydFwiLGZ1bmN0aW9uKCl7ZShcIkRJRF9BQk9SVF9JVEVNX1BST0NFU1NJTkdcIix7aWQ6aH0pfSksdi5vbihcInByb2Nlc3MtcmV2ZXJ0XCIsZnVuY3Rpb24oKXtlKFwiRElEX1JFVkVSVF9JVEVNX1BST0NFU1NJTkdcIix7aWQ6aH0pLGUoXCJESURfREVGSU5FX1ZBTFVFXCIse2lkOmgsdmFsdWU6bnVsbH0pfSksZShcIkRJRF9BRERfSVRFTVwiLHtpZDpoLGluZGV4OmEsaW50ZXJhY3Rpb25NZXRob2Q6c30pLFN0KGUsbik7dmFyIGc9bi5vcHRpb25zLnNlcnZlcnx8e30sUj1nLnVybCxPPWcubG9hZCx5PWcucmVzdG9yZSxEPWcuZmV0Y2g7di5sb2FkKG8sdHQoST09PXZlLklOUFVUP1UobykmJmZ1bmN0aW9uKGUpe3JldHVybihlLmluZGV4T2YoXCI6XCIpPi0xfHxlLmluZGV4T2YoXCIvL1wiKT4tMSkmJnl0KGxvY2F0aW9uLmhyZWYpIT09eXQoZSl9KG8pJiZEP3V0KFIsRCk6T3Q6dXQoUixJPT09dmUuTElNQk8/eTpPKSksZnVuY3Rpb24oZSxuLHIpe09lKFwiTE9BRF9GSUxFXCIsZSx7cXVlcnk6dH0pLnRoZW4obikuY2F0Y2gocil9KX19LFJFUVVFU1RfUFJFUEFSRV9PVVRQVVQ6ZnVuY3Rpb24oZSl7dmFyIG49ZS5pdGVtLHI9ZS5zdWNjZXNzLG89ZS5mYWlsdXJlLGk9dm9pZCAwPT09bz9mdW5jdGlvbigpe306byxhPXtlcnJvcjpvdChcImVycm9yXCIsMCxcIkl0ZW0gbm90IGZvdW5kXCIpLGZpbGU6bnVsbH07aWYobi5hcmNoaXZlZClyZXR1cm4gaShhKTtPZShcIlBSRVBBUkVfT1VUUFVUXCIsbi5maWxlLHtxdWVyeTp0LGl0ZW06bn0pLnRoZW4oZnVuY3Rpb24oZSl7T2UoXCJDT01QTEVURV9QUkVQQVJFX09VVFBVVFwiLGUse3F1ZXJ5OnQsaXRlbTpufSkudGhlbihmdW5jdGlvbihlKXtpZihuLmFyY2hpdmVkKXJldHVybiBpKGEpO3IoZSl9KX0pfSxDT01QTEVURV9MT0FEX0lURU06ZnVuY3Rpb24ocil7dmFyIG89ci5pdGVtLGk9ci5kYXRhLGE9aS5zdWNjZXNzLHM9aS5zb3VyY2UsdT10KFwiR0VUX0lURU1fSU5TRVJUX0xPQ0FUSU9OXCIpO2lmKFkodSkmJnMmJkx0KG4sdSksZShcIkRJRF9MT0FEX0lURU1cIix7aWQ6by5pZCxlcnJvcjpudWxsLHNlcnZlckZpbGVSZWZlcmVuY2U6by5vcmlnaW49PT12ZS5JTlBVVD9udWxsOnN9KSxhKFRlKG8pKSxvLm9yaWdpbiE9PXZlLkxPQ0FMKXJldHVybiBvLm9yaWdpbj09PXZlLkxJTUJPPyhlKFwiRElEX0NPTVBMRVRFX0lURU1fUFJPQ0VTU0lOR1wiLHtpZDpvLmlkLGVycm9yOm51bGwsc2VydmVyRmlsZVJlZmVyZW5jZTpzfSksdm9pZCBlKFwiRElEX0RFRklORV9WQUxVRVwiLHtpZDpvLmlkLHZhbHVlOm8uc2VydmVySWR8fHN9KSk6dm9pZCh0KFwiSVNfQVNZTkNcIikmJm4ub3B0aW9ucy5pbnN0YW50VXBsb2FkJiZlKFwiUkVRVUVTVF9JVEVNX1BST0NFU1NJTkdcIix7cXVlcnk6by5pZH0pKTtlKFwiRElEX0xPQURfTE9DQUxfSVRFTVwiLHtpZDpvLmlkfSl9LFJFVFJZX0lURU1fTE9BRDpidChuLGZ1bmN0aW9uKGUpe2UucmV0cnlMb2FkKCl9KSxSRVFVRVNUX0lURU1fUFJFUEFSRTpidChuLGZ1bmN0aW9uKHQsbixyKXtlKFwiUkVRVUVTVF9QUkVQQVJFX09VVFBVVFwiLHtxdWVyeTp0LmlkLGl0ZW06dCxzdWNjZXNzOmZ1bmN0aW9uKHIpe2UoXCJESURfUFJFUEFSRV9PVVRQVVRcIix7aWQ6dC5pZCxmaWxlOnJ9KSxuKHtmaWxlOnQsb3V0cHV0OnJ9KX0sZmFpbHVyZTpyfSwhMCl9KSxSRVFVRVNUX0lURU1fUFJPQ0VTU0lORzpidChuLGZ1bmN0aW9uKHIsbyxpKXtpZihyLnN0YXR1cz09PUllLklETEV8fHIuc3RhdHVzPT09SWUuUFJPQ0VTU0lOR19FUlJPUilyLnN0YXR1cyE9PUllLlBST0NFU1NJTkdfUVVFVUVEJiYoci5yZXF1ZXN0UHJvY2Vzc2luZygpLGUoXCJESURfUkVRVUVTVF9JVEVNX1BST0NFU1NJTkdcIix7aWQ6ci5pZH0pLGUoXCJQUk9DRVNTX0lURU1cIix7cXVlcnk6cixzdWNjZXNzOm8sZmFpbHVyZTppfSwhMCkpO2Vsc2V7dmFyIGE9ZnVuY3Rpb24oKXtyZXR1cm4gZShcIlJFUVVFU1RfSVRFTV9QUk9DRVNTSU5HXCIse3F1ZXJ5OnIsc3VjY2VzczpvLGZhaWx1cmU6aX0pfSxzPWZ1bmN0aW9uKCl7cmV0dXJuIGRvY3VtZW50LmhpZGRlbj9hKCk6c2V0VGltZW91dChhLDMyKX07ci5zdGF0dXM9PT1JZS5QUk9DRVNTSU5HX0NPTVBMRVRFfHxyLnN0YXR1cz09PUllLlBST0NFU1NJTkdfUkVWRVJUX0VSUk9SP3IucmV2ZXJ0KFR0KG4ub3B0aW9ucy5zZXJ2ZXIudXJsLG4ub3B0aW9ucy5zZXJ2ZXIucmV2ZXJ0KSx0KFwiR0VUX0ZPUkNFX1JFVkVSVFwiKSkudGhlbihzKS5jYXRjaChmdW5jdGlvbigpe30pOnIuc3RhdHVzPT09SWUuUFJPQ0VTU0lORyYmci5hYm9ydFByb2Nlc3NpbmcoKS50aGVuKHMpfX0pLFBST0NFU1NfSVRFTTpidChuLGZ1bmN0aW9uKHIsbyxpKXt2YXIgYT10KFwiR0VUX01BWF9QQVJBTExFTF9VUExPQURTXCIpO2lmKHQoXCJHRVRfSVRFTVNfQllfU1RBVFVTXCIsSWUuUFJPQ0VTU0lORykubGVuZ3RoIT09YSl7aWYoci5zdGF0dXMhPT1JZS5QUk9DRVNTSU5HKXt2YXIgcz1mdW5jdGlvbiB0KCl7dmFyIHI9bi5wcm9jZXNzaW5nUXVldWUuc2hpZnQoKTtpZihyKXt2YXIgbz1yLmlkLGk9ci5zdWNjZXNzLGE9ci5mYWlsdXJlLHM9TGUobi5pdGVtcyxvKTtzJiYhcy5hcmNoaXZlZD9lKFwiUFJPQ0VTU19JVEVNXCIse3F1ZXJ5Om8sc3VjY2VzczppLGZhaWx1cmU6YX0sITApOnQoKX19O3Iub25PbmNlKFwicHJvY2Vzcy1jb21wbGV0ZVwiLGZ1bmN0aW9uKCl7byhUZShyKSkscygpO3ZhciBpPW4ub3B0aW9ucy5zZXJ2ZXI7aWYobi5vcHRpb25zLmluc3RhbnRVcGxvYWQmJnIub3JpZ2luPT09dmUuTE9DQUwmJlkoaS5yZW1vdmUpKXt2YXIgYT1mdW5jdGlvbigpe307ci5vcmlnaW49dmUuTElNQk8sbi5vcHRpb25zLnNlcnZlci5yZW1vdmUoci5zb3VyY2UsYSxhKX10KFwiR0VUX0lURU1TX0JZX1NUQVRVU1wiLEllLlBST0NFU1NJTkdfQ09NUExFVEUpLmxlbmd0aD09PW4uaXRlbXMubGVuZ3RoJiZlKFwiRElEX0NPTVBMRVRFX0lURU1fUFJPQ0VTU0lOR19BTExcIil9KSxyLm9uT25jZShcInByb2Nlc3MtZXJyb3JcIixmdW5jdGlvbihlKXtpKHtlcnJvcjplLGZpbGU6VGUocil9KSxzKCl9KTt2YXIgdT1uLm9wdGlvbnM7ci5wcm9jZXNzKHZ0KF90KHUuc2VydmVyLnVybCx1LnNlcnZlci5wcm9jZXNzLHUubmFtZSx7Y2h1bmtUcmFuc2ZlcklkOnIudHJhbnNmZXJJZCxjaHVua1NlcnZlcjp1LnNlcnZlci5wYXRjaCxjaHVua1VwbG9hZHM6dS5jaHVua1VwbG9hZHMsY2h1bmtGb3JjZTp1LmNodW5rRm9yY2UsY2h1bmtTaXplOnUuY2h1bmtTaXplLGNodW5rUmV0cnlEZWxheXM6dS5jaHVua1JldHJ5RGVsYXlzfSkse2FsbG93TWluaW11bVVwbG9hZER1cmF0aW9uOnQoXCJHRVRfQUxMT1dfTUlOSU1VTV9VUExPQURfRFVSQVRJT05cIil9KSxmdW5jdGlvbihuLG8saSl7T2UoXCJQUkVQQVJFX09VVFBVVFwiLG4se3F1ZXJ5OnQsaXRlbTpyfSkudGhlbihmdW5jdGlvbih0KXtlKFwiRElEX1BSRVBBUkVfT1VUUFVUXCIse2lkOnIuaWQsZmlsZTp0fSksbyh0KX0pLmNhdGNoKGkpfSl9fWVsc2Ugbi5wcm9jZXNzaW5nUXVldWUucHVzaCh7aWQ6ci5pZCxzdWNjZXNzOm8sZmFpbHVyZTppfSl9KSxSRVRSWV9JVEVNX1BST0NFU1NJTkc6YnQobixmdW5jdGlvbih0KXtlKFwiUkVRVUVTVF9JVEVNX1BST0NFU1NJTkdcIix7cXVlcnk6dH0pfSksUkVRVUVTVF9SRU1PVkVfSVRFTTpidChuLGZ1bmN0aW9uKG4pe0F0KHQoXCJHRVRfQkVGT1JFX1JFTU9WRV9GSUxFXCIpLFRlKG4pKS50aGVuKGZ1bmN0aW9uKHQpe3QmJmUoXCJSRU1PVkVfSVRFTVwiLHtxdWVyeTpufSl9KX0pLFJFTEVBU0VfSVRFTTpidChuLGZ1bmN0aW9uKGUpe2UucmVsZWFzZSgpfSksUkVNT1ZFX0lURU06YnQobixmdW5jdGlvbihyLG8saSxhKXt2YXIgcz1mdW5jdGlvbigpe3ZhciB0PXIuaWQ7UnQobi5pdGVtcyx0KS5hcmNoaXZlKCksZShcIkRJRF9SRU1PVkVfSVRFTVwiLHtlcnJvcjpudWxsLGlkOnQsaXRlbTpyfSksU3QoZSxuKSxvKFRlKHIpKX0sdT1uLm9wdGlvbnMuc2VydmVyO3Iub3JpZ2luPT09dmUuTE9DQUwmJnUmJlkodS5yZW1vdmUpJiYhMSE9PWEucmVtb3ZlPyhlKFwiRElEX1NUQVJUX0lURU1fUkVNT1ZFXCIse2lkOnIuaWR9KSx1LnJlbW92ZShyLnNvdXJjZSxmdW5jdGlvbigpe3JldHVybiBzKCl9LGZ1bmN0aW9uKHQpe2UoXCJESURfVEhST1dfSVRFTV9SRU1PVkVfRVJST1JcIix7aWQ6ci5pZCxlcnJvcjpvdChcImVycm9yXCIsMCx0LG51bGwpLHN0YXR1czp7bWFpbjpEdChuLm9wdGlvbnMubGFiZWxGaWxlUmVtb3ZlRXJyb3IpKHQpLHN1YjpuLm9wdGlvbnMubGFiZWxUYXBUb1JldHJ5fX0pfSkpOigoYS5yZXZlcnQmJnIub3JpZ2luIT09dmUuTE9DQUwmJm51bGwhPT1yLnNlcnZlcklkfHxuLm9wdGlvbnMuY2h1bmtVcGxvYWRzJiZyLmZpbGUuc2l6ZT5uLm9wdGlvbnMuY2h1bmtTaXplfHxuLm9wdGlvbnMuY2h1bmtVcGxvYWRzJiZuLm9wdGlvbnMuY2h1bmtGb3JjZSkmJnIucmV2ZXJ0KFR0KG4ub3B0aW9ucy5zZXJ2ZXIudXJsLG4ub3B0aW9ucy5zZXJ2ZXIucmV2ZXJ0KSx0KFwiR0VUX0ZPUkNFX1JFVkVSVFwiKSkscygpKX0pLEFCT1JUX0lURU1fTE9BRDpidChuLGZ1bmN0aW9uKGUpe2UuYWJvcnRMb2FkKCl9KSxBQk9SVF9JVEVNX1BST0NFU1NJTkc6YnQobixmdW5jdGlvbih0KXt0LnNlcnZlcklkP2UoXCJSRVZFUlRfSVRFTV9QUk9DRVNTSU5HXCIse2lkOnQuaWR9KTp0LmFib3J0UHJvY2Vzc2luZygpLnRoZW4oZnVuY3Rpb24oKXtuLm9wdGlvbnMuaW5zdGFudFVwbG9hZCYmZShcIlJFTU9WRV9JVEVNXCIse3F1ZXJ5OnQuaWR9KX0pfSksUkVRVUVTVF9SRVZFUlRfSVRFTV9QUk9DRVNTSU5HOmJ0KG4sZnVuY3Rpb24ocil7aWYobi5vcHRpb25zLmluc3RhbnRVcGxvYWQpe3ZhciBvPWZ1bmN0aW9uKHQpe3QmJmUoXCJSRVZFUlRfSVRFTV9QUk9DRVNTSU5HXCIse3F1ZXJ5OnJ9KX0saT10KFwiR0VUX0JFRk9SRV9SRU1PVkVfRklMRVwiKTtpZighaSlyZXR1cm4gbyghMCk7dmFyIGE9aShUZShyKSk7cmV0dXJuIG51bGw9PWE/byghMCk6XCJib29sZWFuXCI9PXR5cGVvZiBhP28oYSk6dm9pZChcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLnRoZW4mJmEudGhlbihvKSl9ZShcIlJFVkVSVF9JVEVNX1BST0NFU1NJTkdcIix7cXVlcnk6cn0pfSksUkVWRVJUX0lURU1fUFJPQ0VTU0lORzpidChuLGZ1bmN0aW9uKHIpe3IucmV2ZXJ0KFR0KG4ub3B0aW9ucy5zZXJ2ZXIudXJsLG4ub3B0aW9ucy5zZXJ2ZXIucmV2ZXJ0KSx0KFwiR0VUX0ZPUkNFX1JFVkVSVFwiKSkudGhlbihmdW5jdGlvbigpeyhuLm9wdGlvbnMuaW5zdGFudFVwbG9hZHx8ZnVuY3Rpb24oZSl7cmV0dXJuIWh0KGUuZmlsZSl9KHIpKSYmZShcIlJFTU9WRV9JVEVNXCIse3F1ZXJ5OnIuaWR9KX0pLmNhdGNoKGZ1bmN0aW9uKCl7fSl9KSxTRVRfT1BUSU9OUzpmdW5jdGlvbih0KXt2YXIgbj10Lm9wdGlvbnMscj1PYmplY3Qua2V5cyhuKSxvPU10LmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gci5pbmNsdWRlcyhlKX0pO1tdLmNvbmNhdCh1ZShvKSx1ZShPYmplY3Qua2V5cyhuKS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIW8uaW5jbHVkZXMoZSl9KSkpLmZvckVhY2goZnVuY3Rpb24odCl7ZShcIlNFVF9cIitaKHQsXCJfXCIpLnRvVXBwZXJDYXNlKCkse3ZhbHVlOm5bdF19KX0pfX19LE10PVtcInNlcnZlclwiXSx3dD1mdW5jdGlvbihlKXtyZXR1cm4gZX0sQ3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZSl9LE50PWZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5jaGlsZE5vZGVzWzBdO24/dCE9PW4ubm9kZVZhbHVlJiYobi5ub2RlVmFsdWU9dCk6KG49ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodCksZS5hcHBlbmRDaGlsZChuKSl9LEd0PWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPShyJTM2MC05MCkqTWF0aC5QSS8xODA7cmV0dXJue3g6ZStuKk1hdGguY29zKG8pLHk6dCtuKk1hdGguc2luKG8pfX0sVXQ9ZnVuY3Rpb24oZSx0LG4scixvKXt2YXIgaT0xO3JldHVybiBvPnImJm8tcjw9LjUmJihpPTApLHI+byYmci1vPj0uNSYmKGk9MCksZnVuY3Rpb24oZSx0LG4scixvLGkpe3ZhciBhPUd0KGUsdCxuLG8pLHM9R3QoZSx0LG4scik7cmV0dXJuW1wiTVwiLGEueCxhLnksXCJBXCIsbixuLDAsaSwwLHMueCxzLnldLmpvaW4oXCIgXCIpfShlLHQsbiwzNjAqTWF0aC5taW4oLjk5OTksciksMzYwKk1hdGgubWluKC45OTk5LG8pLGkpfSxCdD1TKHt0YWc6XCJkaXZcIixuYW1lOlwicHJvZ3Jlc3MtaW5kaWNhdG9yXCIsaWdub3JlUmVjdFVwZGF0ZTohMCxpZ25vcmVSZWN0OiEwLGNyZWF0ZTpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLnByb3BzO24uc3Bpbj0hMSxuLnByb2dyZXNzPTAsbi5vcGFjaXR5PTA7dmFyIHI9YShcInN2Z1wiKTt0LnJlZi5wYXRoPWEoXCJwYXRoXCIse1wic3Ryb2tlLXdpZHRoXCI6MixcInN0cm9rZS1saW5lY2FwXCI6XCJyb3VuZFwifSksci5hcHBlbmRDaGlsZCh0LnJlZi5wYXRoKSx0LnJlZi5zdmc9cix0LmFwcGVuZENoaWxkKHIpfSx3cml0ZTpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLnByb3BzO2lmKDAhPT1uLm9wYWNpdHkpe24uYWxpZ24mJih0LmVsZW1lbnQuZGF0YXNldC5hbGlnbj1uLmFsaWduKTt2YXIgbz1wYXJzZUludChyKHQucmVmLnBhdGgsXCJzdHJva2Utd2lkdGhcIiksMTApLGk9LjUqdC5yZWN0LmVsZW1lbnQud2lkdGgsYT0wLHM9MDtuLnNwaW4/KGE9MCxzPS41KTooYT0wLHM9bi5wcm9ncmVzcyk7dmFyIHU9VXQoaSxpLGktbyxhLHMpO3IodC5yZWYucGF0aCxcImRcIix1KSxyKHQucmVmLnBhdGgsXCJzdHJva2Utb3BhY2l0eVwiLG4uc3Bpbnx8bi5wcm9ncmVzcz4wPzE6MCl9fSxtaXhpbnM6e2FwaXM6W1wicHJvZ3Jlc3NcIixcInNwaW5cIixcImFsaWduXCJdLHN0eWxlczpbXCJvcGFjaXR5XCJdLGFuaW1hdGlvbnM6e29wYWNpdHk6e3R5cGU6XCJ0d2VlblwiLGR1cmF0aW9uOjUwMH0scHJvZ3Jlc3M6e3R5cGU6XCJzcHJpbmdcIixzdGlmZm5lc3M6Ljk1LGRhbXBpbmc6LjY1LG1hc3M6MTB9fX19KSxGdD1TKHt0YWc6XCJidXR0b25cIixhdHRyaWJ1dGVzOnt0eXBlOlwiYnV0dG9uXCJ9LGlnbm9yZVJlY3Q6ITAsaWdub3JlUmVjdFVwZGF0ZTohMCxuYW1lOlwiZmlsZS1hY3Rpb24tYnV0dG9uXCIsbWl4aW5zOnthcGlzOltcImxhYmVsXCJdLHN0eWxlczpbXCJ0cmFuc2xhdGVYXCIsXCJ0cmFuc2xhdGVZXCIsXCJzY2FsZVhcIixcInNjYWxlWVwiLFwib3BhY2l0eVwiXSxhbmltYXRpb25zOntzY2FsZVg6XCJzcHJpbmdcIixzY2FsZVk6XCJzcHJpbmdcIix0cmFuc2xhdGVYOlwic3ByaW5nXCIsdHJhbnNsYXRlWTpcInNwcmluZ1wiLG9wYWNpdHk6e3R5cGU6XCJ0d2VlblwiLGR1cmF0aW9uOjI1MH19LGxpc3RlbmVyczohMH0sY3JlYXRlOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUucHJvcHM7dC5lbGVtZW50LmlubmVySFRNTD0obi5pY29ufHxcIlwiKStcIjxzcGFuPlwiK24ubGFiZWwrXCI8L3NwYW4+XCIsbi5pc0Rpc2FibGVkPSExfSx3cml0ZTpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLnByb3BzLG89bi5pc0Rpc2FibGVkLGk9dC5xdWVyeShcIkdFVF9ESVNBQkxFRFwiKXx8MD09PW4ub3BhY2l0eTtpJiYhbz8obi5pc0Rpc2FibGVkPSEwLHIodC5lbGVtZW50LFwiZGlzYWJsZWRcIixcImRpc2FibGVkXCIpKTohaSYmbyYmKG4uaXNEaXNhYmxlZD0hMSx0LmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIikpfX0pLHF0PWZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpcIi5cIixuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXToxZTMscj1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106e30sbz1yLmxhYmVsQnl0ZXMsaT12b2lkIDA9PT1vP1wiYnl0ZXNcIjpvLGE9ci5sYWJlbEtpbG9ieXRlcyxzPXZvaWQgMD09PWE/XCJLQlwiOmEsdT1yLmxhYmVsTWVnYWJ5dGVzLGw9dm9pZCAwPT09dT9cIk1CXCI6dSxjPXIubGFiZWxHaWdhYnl0ZXMsZj12b2lkIDA9PT1jP1wiR0JcIjpjLGQ9bixwPW4qbixFPW4qbipuO3JldHVybihlPU1hdGgucm91bmQoTWF0aC5hYnMoZSkpKTxkP2UrXCIgXCIraTplPHA/TWF0aC5mbG9vcihlL2QpK1wiIFwiK3M6ZTxFP1Z0KGUvcCwxLHQpK1wiIFwiK2w6VnQoZS9FLDIsdCkrXCIgXCIrZn0sVnQ9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBlLnRvRml4ZWQodCkuc3BsaXQoXCIuXCIpLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm5cIjBcIiE9PWV9KS5qb2luKG4pfSx4dD1mdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLnByb3BzO050KHQucmVmLmZpbGVTaXplLHF0KHQucXVlcnkoXCJHRVRfSVRFTV9TSVpFXCIsbi5pZCksXCIuXCIsdC5xdWVyeShcIkdFVF9GSUxFX1NJWkVfQkFTRVwiKSx0LnF1ZXJ5KFwiR0VUX0ZJTEVfU0laRV9MQUJFTFNcIix0LnF1ZXJ5KSkpLE50KHQucmVmLmZpbGVOYW1lLHd0KHQucXVlcnkoXCJHRVRfSVRFTV9OQU1FXCIsbi5pZCkpKX0sWXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290LG49ZS5wcm9wcztWKHQucXVlcnkoXCJHRVRfSVRFTV9TSVpFXCIsbi5pZCkpP3h0KHtyb290OnQscHJvcHM6bn0pOk50KHQucmVmLmZpbGVTaXplLHQucXVlcnkoXCJHRVRfTEFCRUxfRklMRV9TSVpFX05PVF9BVkFJTEFCTEVcIikpfSxrdD1TKHtuYW1lOlwiZmlsZS1pbmZvXCIsaWdub3JlUmVjdDohMCxpZ25vcmVSZWN0VXBkYXRlOiEwLHdyaXRlOkEoe0RJRF9MT0FEX0lURU06eHQsRElEX1VQREFURV9JVEVNX01FVEE6eHQsRElEX1RIUk9XX0lURU1fTE9BRF9FUlJPUjpZdCxESURfVEhST1dfSVRFTV9JTlZBTElEOll0fSksZGlkQ3JlYXRlVmlldzpmdW5jdGlvbihlKXt5ZShcIkNSRUFURV9WSUVXXCIsT2JqZWN0LmFzc2lnbih7fSxlLHt2aWV3OmV9KSl9LGNyZWF0ZTpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLnByb3BzLG89Q3QoXCJzcGFuXCIpO28uY2xhc3NOYW1lPVwiZmlsZXBvbmQtLWZpbGUtaW5mby1tYWluXCIscihvLFwiYXJpYS1oaWRkZW5cIixcInRydWVcIiksdC5hcHBlbmRDaGlsZChvKSx0LnJlZi5maWxlTmFtZT1vO3ZhciBpPUN0KFwic3BhblwiKTtpLmNsYXNzTmFtZT1cImZpbGVwb25kLS1maWxlLWluZm8tc3ViXCIsdC5hcHBlbmRDaGlsZChpKSx0LnJlZi5maWxlU2l6ZT1pLE50KGksdC5xdWVyeShcIkdFVF9MQUJFTF9GSUxFX1dBSVRJTkdfRk9SX1NJWkVcIikpLE50KG8sd3QodC5xdWVyeShcIkdFVF9JVEVNX05BTUVcIixuLmlkKSkpfSxtaXhpbnM6e3N0eWxlczpbXCJ0cmFuc2xhdGVYXCIsXCJ0cmFuc2xhdGVZXCJdLGFuaW1hdGlvbnM6e3RyYW5zbGF0ZVg6XCJzcHJpbmdcIix0cmFuc2xhdGVZOlwic3ByaW5nXCJ9fX0pLGp0PWZ1bmN0aW9uKGUpe3JldHVybiBNYXRoLnJvdW5kKDEwMCplKX0sSHQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290LG49ZS5hY3Rpb24scj1udWxsPT09bi5wcm9ncmVzcz90LnF1ZXJ5KFwiR0VUX0xBQkVMX0ZJTEVfTE9BRElOR1wiKTp0LnF1ZXJ5KFwiR0VUX0xBQkVMX0ZJTEVfTE9BRElOR1wiKStcIiBcIitqdChuLnByb2dyZXNzKStcIiVcIjtOdCh0LnJlZi5tYWluLHIpLE50KHQucmVmLnN1Yix0LnF1ZXJ5KFwiR0VUX0xBQkVMX1RBUF9UT19DQU5DRUxcIikpfSxYdD1mdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Q7TnQodC5yZWYubWFpbixcIlwiKSxOdCh0LnJlZi5zdWIsXCJcIil9LFd0PWZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUuYWN0aW9uO050KHQucmVmLm1haW4sbi5zdGF0dXMubWFpbiksTnQodC5yZWYuc3ViLG4uc3RhdHVzLnN1Yil9LHp0PVMoe25hbWU6XCJmaWxlLXN0YXR1c1wiLGlnbm9yZVJlY3Q6ITAsaWdub3JlUmVjdFVwZGF0ZTohMCx3cml0ZTpBKHtESURfTE9BRF9JVEVNOlh0LERJRF9SRVZFUlRfSVRFTV9QUk9DRVNTSU5HOlh0LERJRF9SRVFVRVNUX0lURU1fUFJPQ0VTU0lORzpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Q7TnQodC5yZWYubWFpbix0LnF1ZXJ5KFwiR0VUX0xBQkVMX0ZJTEVfUFJPQ0VTU0lOR1wiKSksTnQodC5yZWYuc3ViLHQucXVlcnkoXCJHRVRfTEFCRUxfVEFQX1RPX0NBTkNFTFwiKSl9LERJRF9BQk9SVF9JVEVNX1BST0NFU1NJTkc6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290O050KHQucmVmLm1haW4sdC5xdWVyeShcIkdFVF9MQUJFTF9GSUxFX1BST0NFU1NJTkdfQUJPUlRFRFwiKSksTnQodC5yZWYuc3ViLHQucXVlcnkoXCJHRVRfTEFCRUxfVEFQX1RPX1JFVFJZXCIpKX0sRElEX0NPTVBMRVRFX0lURU1fUFJPQ0VTU0lORzpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Q7TnQodC5yZWYubWFpbix0LnF1ZXJ5KFwiR0VUX0xBQkVMX0ZJTEVfUFJPQ0VTU0lOR19DT01QTEVURVwiKSksTnQodC5yZWYuc3ViLHQucXVlcnkoXCJHRVRfTEFCRUxfVEFQX1RPX1VORE9cIikpfSxESURfVVBEQVRFX0lURU1fUFJPQ0VTU19QUk9HUkVTUzpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLmFjdGlvbixyPW51bGw9PT1uLnByb2dyZXNzP3QucXVlcnkoXCJHRVRfTEFCRUxfRklMRV9QUk9DRVNTSU5HXCIpOnQucXVlcnkoXCJHRVRfTEFCRUxfRklMRV9QUk9DRVNTSU5HXCIpK1wiIFwiK2p0KG4ucHJvZ3Jlc3MpK1wiJVwiO050KHQucmVmLm1haW4sciksTnQodC5yZWYuc3ViLHQucXVlcnkoXCJHRVRfTEFCRUxfVEFQX1RPX0NBTkNFTFwiKSl9LERJRF9VUERBVEVfSVRFTV9MT0FEX1BST0dSRVNTOkh0LERJRF9USFJPV19JVEVNX0xPQURfRVJST1I6V3QsRElEX1RIUk9XX0lURU1fSU5WQUxJRDpXdCxESURfVEhST1dfSVRFTV9QUk9DRVNTSU5HX0VSUk9SOld0LERJRF9USFJPV19JVEVNX1BST0NFU1NJTkdfUkVWRVJUX0VSUk9SOld0LERJRF9USFJPV19JVEVNX1JFTU9WRV9FUlJPUjpXdH0pLGRpZENyZWF0ZVZpZXc6ZnVuY3Rpb24oZSl7eWUoXCJDUkVBVEVfVklFV1wiLE9iamVjdC5hc3NpZ24oe30sZSx7dmlldzplfSkpfSxjcmVhdGU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290LG49Q3QoXCJzcGFuXCIpO24uY2xhc3NOYW1lPVwiZmlsZXBvbmQtLWZpbGUtc3RhdHVzLW1haW5cIix0LmFwcGVuZENoaWxkKG4pLHQucmVmLm1haW49bjt2YXIgcj1DdChcInNwYW5cIik7ci5jbGFzc05hbWU9XCJmaWxlcG9uZC0tZmlsZS1zdGF0dXMtc3ViXCIsdC5hcHBlbmRDaGlsZChyKSx0LnJlZi5zdWI9cixIdCh7cm9vdDp0LGFjdGlvbjp7cHJvZ3Jlc3M6bnVsbH19KX0sbWl4aW5zOntzdHlsZXM6W1widHJhbnNsYXRlWFwiLFwidHJhbnNsYXRlWVwiLFwib3BhY2l0eVwiXSxhbmltYXRpb25zOntvcGFjaXR5Ont0eXBlOlwidHdlZW5cIixkdXJhdGlvbjoyNTB9LHRyYW5zbGF0ZVg6XCJzcHJpbmdcIix0cmFuc2xhdGVZOlwic3ByaW5nXCJ9fX0pLFF0PXtBYm9ydEl0ZW1Mb2FkOntsYWJlbDpcIkdFVF9MQUJFTF9CVVRUT05fQUJPUlRfSVRFTV9MT0FEXCIsYWN0aW9uOlwiQUJPUlRfSVRFTV9MT0FEXCIsY2xhc3NOYW1lOlwiZmlsZXBvbmQtLWFjdGlvbi1hYm9ydC1pdGVtLWxvYWRcIixhbGlnbjpcIkxPQURfSU5ESUNBVE9SX1BPU0lUSU9OXCJ9LFJldHJ5SXRlbUxvYWQ6e2xhYmVsOlwiR0VUX0xBQkVMX0JVVFRPTl9SRVRSWV9JVEVNX0xPQURcIixhY3Rpb246XCJSRVRSWV9JVEVNX0xPQURcIixpY29uOlwiR0VUX0lDT05fUkVUUllcIixjbGFzc05hbWU6XCJmaWxlcG9uZC0tYWN0aW9uLXJldHJ5LWl0ZW0tbG9hZFwiLGFsaWduOlwiQlVUVE9OX1BST0NFU1NfSVRFTV9QT1NJVElPTlwifSxSZW1vdmVJdGVtOntsYWJlbDpcIkdFVF9MQUJFTF9CVVRUT05fUkVNT1ZFX0lURU1cIixhY3Rpb246XCJSRVFVRVNUX1JFTU9WRV9JVEVNXCIsaWNvbjpcIkdFVF9JQ09OX1JFTU9WRVwiLGNsYXNzTmFtZTpcImZpbGVwb25kLS1hY3Rpb24tcmVtb3ZlLWl0ZW1cIixhbGlnbjpcIkJVVFRPTl9SRU1PVkVfSVRFTV9QT1NJVElPTlwifSxQcm9jZXNzSXRlbTp7bGFiZWw6XCJHRVRfTEFCRUxfQlVUVE9OX1BST0NFU1NfSVRFTVwiLGFjdGlvbjpcIlJFUVVFU1RfSVRFTV9QUk9DRVNTSU5HXCIsaWNvbjpcIkdFVF9JQ09OX1BST0NFU1NcIixjbGFzc05hbWU6XCJmaWxlcG9uZC0tYWN0aW9uLXByb2Nlc3MtaXRlbVwiLGFsaWduOlwiQlVUVE9OX1BST0NFU1NfSVRFTV9QT1NJVElPTlwifSxBYm9ydEl0ZW1Qcm9jZXNzaW5nOntsYWJlbDpcIkdFVF9MQUJFTF9CVVRUT05fQUJPUlRfSVRFTV9QUk9DRVNTSU5HXCIsYWN0aW9uOlwiQUJPUlRfSVRFTV9QUk9DRVNTSU5HXCIsY2xhc3NOYW1lOlwiZmlsZXBvbmQtLWFjdGlvbi1hYm9ydC1pdGVtLXByb2Nlc3NpbmdcIixhbGlnbjpcIkJVVFRPTl9QUk9DRVNTX0lURU1fUE9TSVRJT05cIn0sUmV0cnlJdGVtUHJvY2Vzc2luZzp7bGFiZWw6XCJHRVRfTEFCRUxfQlVUVE9OX1JFVFJZX0lURU1fUFJPQ0VTU0lOR1wiLGFjdGlvbjpcIlJFVFJZX0lURU1fUFJPQ0VTU0lOR1wiLGljb246XCJHRVRfSUNPTl9SRVRSWVwiLGNsYXNzTmFtZTpcImZpbGVwb25kLS1hY3Rpb24tcmV0cnktaXRlbS1wcm9jZXNzaW5nXCIsYWxpZ246XCJCVVRUT05fUFJPQ0VTU19JVEVNX1BPU0lUSU9OXCJ9LFJldmVydEl0ZW1Qcm9jZXNzaW5nOntsYWJlbDpcIkdFVF9MQUJFTF9CVVRUT05fVU5ET19JVEVNX1BST0NFU1NJTkdcIixhY3Rpb246XCJSRVFVRVNUX1JFVkVSVF9JVEVNX1BST0NFU1NJTkdcIixpY29uOlwiR0VUX0lDT05fVU5ET1wiLGNsYXNzTmFtZTpcImZpbGVwb25kLS1hY3Rpb24tcmV2ZXJ0LWl0ZW0tcHJvY2Vzc2luZ1wiLGFsaWduOlwiQlVUVE9OX1BST0NFU1NfSVRFTV9QT1NJVElPTlwifX0sWnQ9W107dChRdCxmdW5jdGlvbihlKXtadC5wdXNoKGUpfSk7dmFyIEt0LCR0PWZ1bmN0aW9uKGUpe2lmKFwicmlnaHRcIj09PW5uKGUpKXJldHVybiAwO3ZhciB0PWUucmVmLmJ1dHRvblJlbW92ZUl0ZW0ucmVjdC5lbGVtZW50O3JldHVybiB0LmhpZGRlbj9udWxsOnQud2lkdGgrdC5sZWZ0fSxKdD1mdW5jdGlvbihlKXtyZXR1cm4gZS5yZWYuYnV0dG9uQWJvcnRJdGVtTG9hZC5yZWN0LmVsZW1lbnQud2lkdGh9LGVuPWZ1bmN0aW9uKGUpe3JldHVybiBNYXRoLmZsb29yKGUucmVmLmJ1dHRvblJlbW92ZUl0ZW0ucmVjdC5lbGVtZW50LmhlaWdodC80KX0sdG49ZnVuY3Rpb24oZSl7cmV0dXJuIE1hdGguZmxvb3IoZS5yZWYuYnV0dG9uUmVtb3ZlSXRlbS5yZWN0LmVsZW1lbnQubGVmdC8yKX0sbm49ZnVuY3Rpb24oZSl7cmV0dXJuIGUucXVlcnkoXCJHRVRfU1RZTEVfQlVUVE9OX1JFTU9WRV9JVEVNX1BPU0lUSU9OXCIpfSxybj17YnV0dG9uQWJvcnRJdGVtTG9hZDp7b3BhY2l0eTowfSxidXR0b25SZXRyeUl0ZW1Mb2FkOntvcGFjaXR5OjB9LGJ1dHRvblJlbW92ZUl0ZW06e29wYWNpdHk6MH0sYnV0dG9uUHJvY2Vzc0l0ZW06e29wYWNpdHk6MH0sYnV0dG9uQWJvcnRJdGVtUHJvY2Vzc2luZzp7b3BhY2l0eTowfSxidXR0b25SZXRyeUl0ZW1Qcm9jZXNzaW5nOntvcGFjaXR5OjB9LGJ1dHRvblJldmVydEl0ZW1Qcm9jZXNzaW5nOntvcGFjaXR5OjB9LGxvYWRQcm9ncmVzc0luZGljYXRvcjp7b3BhY2l0eTowLGFsaWduOmZ1bmN0aW9uKGUpe3JldHVybiBlLnF1ZXJ5KFwiR0VUX1NUWUxFX0xPQURfSU5ESUNBVE9SX1BPU0lUSU9OXCIpfX0scHJvY2Vzc1Byb2dyZXNzSW5kaWNhdG9yOntvcGFjaXR5OjAsYWxpZ246ZnVuY3Rpb24oZSl7cmV0dXJuIGUucXVlcnkoXCJHRVRfU1RZTEVfUFJPR1JFU1NfSU5ESUNBVE9SX1BPU0lUSU9OXCIpfX0scHJvY2Vzc2luZ0NvbXBsZXRlSW5kaWNhdG9yOntvcGFjaXR5OjAsc2NhbGVYOi43NSxzY2FsZVk6Ljc1fSxpbmZvOnt0cmFuc2xhdGVYOjAsdHJhbnNsYXRlWTowLG9wYWNpdHk6MH0sc3RhdHVzOnt0cmFuc2xhdGVYOjAsdHJhbnNsYXRlWTowLG9wYWNpdHk6MH19LG9uPXtidXR0b25SZW1vdmVJdGVtOntvcGFjaXR5OjF9LGJ1dHRvblByb2Nlc3NJdGVtOntvcGFjaXR5OjF9LGluZm86e3RyYW5zbGF0ZVg6JHR9LHN0YXR1czp7dHJhbnNsYXRlWDokdH19LGFuPXtidXR0b25BYm9ydEl0ZW1Qcm9jZXNzaW5nOntvcGFjaXR5OjF9LHByb2Nlc3NQcm9ncmVzc0luZGljYXRvcjp7b3BhY2l0eToxfSxzdGF0dXM6e29wYWNpdHk6MX19LHNuPXtESURfVEhST1dfSVRFTV9JTlZBTElEOntidXR0b25SZW1vdmVJdGVtOntvcGFjaXR5OjF9LGluZm86e3RyYW5zbGF0ZVg6JHR9LHN0YXR1czp7dHJhbnNsYXRlWDokdCxvcGFjaXR5OjF9fSxESURfU1RBUlRfSVRFTV9MT0FEOntidXR0b25BYm9ydEl0ZW1Mb2FkOntvcGFjaXR5OjF9LGxvYWRQcm9ncmVzc0luZGljYXRvcjp7b3BhY2l0eToxfSxzdGF0dXM6e29wYWNpdHk6MX19LERJRF9USFJPV19JVEVNX0xPQURfRVJST1I6e2J1dHRvblJldHJ5SXRlbUxvYWQ6e29wYWNpdHk6MX0sYnV0dG9uUmVtb3ZlSXRlbTp7b3BhY2l0eToxfSxpbmZvOnt0cmFuc2xhdGVYOiR0fSxzdGF0dXM6e29wYWNpdHk6MX19LERJRF9TVEFSVF9JVEVNX1JFTU9WRTp7cHJvY2Vzc1Byb2dyZXNzSW5kaWNhdG9yOntvcGFjaXR5OjEsYWxpZ246bm59LGluZm86e3RyYW5zbGF0ZVg6JHR9LHN0YXR1czp7b3BhY2l0eTowfX0sRElEX1RIUk9XX0lURU1fUkVNT1ZFX0VSUk9SOntwcm9jZXNzUHJvZ3Jlc3NJbmRpY2F0b3I6e29wYWNpdHk6MCxhbGlnbjpubn0sYnV0dG9uUmVtb3ZlSXRlbTp7b3BhY2l0eToxfSxpbmZvOnt0cmFuc2xhdGVYOiR0fSxzdGF0dXM6e29wYWNpdHk6MSx0cmFuc2xhdGVYOiR0fX0sRElEX0xPQURfSVRFTTpvbixESURfTE9BRF9MT0NBTF9JVEVNOntidXR0b25SZW1vdmVJdGVtOntvcGFjaXR5OjF9LGluZm86e3RyYW5zbGF0ZVg6JHR9LHN0YXR1czp7dHJhbnNsYXRlWDokdH19LERJRF9TVEFSVF9JVEVNX1BST0NFU1NJTkc6YW4sRElEX1JFUVVFU1RfSVRFTV9QUk9DRVNTSU5HOmFuLERJRF9VUERBVEVfSVRFTV9QUk9DRVNTX1BST0dSRVNTOmFuLERJRF9DT01QTEVURV9JVEVNX1BST0NFU1NJTkc6e2J1dHRvblJldmVydEl0ZW1Qcm9jZXNzaW5nOntvcGFjaXR5OjF9LGluZm86e29wYWNpdHk6MX0sc3RhdHVzOntvcGFjaXR5OjF9fSxESURfVEhST1dfSVRFTV9QUk9DRVNTSU5HX0VSUk9SOntidXR0b25SZW1vdmVJdGVtOntvcGFjaXR5OjF9LGJ1dHRvblJldHJ5SXRlbVByb2Nlc3Npbmc6e29wYWNpdHk6MX0sc3RhdHVzOntvcGFjaXR5OjF9LGluZm86e3RyYW5zbGF0ZVg6JHR9fSxESURfVEhST1dfSVRFTV9QUk9DRVNTSU5HX1JFVkVSVF9FUlJPUjp7YnV0dG9uUmV2ZXJ0SXRlbVByb2Nlc3Npbmc6e29wYWNpdHk6MX0sc3RhdHVzOntvcGFjaXR5OjF9LGluZm86e29wYWNpdHk6MX19LERJRF9BQk9SVF9JVEVNX1BST0NFU1NJTkc6e2J1dHRvblJlbW92ZUl0ZW06e29wYWNpdHk6MX0sYnV0dG9uUHJvY2Vzc0l0ZW06e29wYWNpdHk6MX0saW5mbzp7dHJhbnNsYXRlWDokdH0sc3RhdHVzOntvcGFjaXR5OjF9fSxESURfUkVWRVJUX0lURU1fUFJPQ0VTU0lORzpvbn0sdW49Uyh7Y3JlYXRlOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdDt0LmVsZW1lbnQuaW5uZXJIVE1MPXQucXVlcnkoXCJHRVRfSUNPTl9ET05FXCIpfSxuYW1lOlwicHJvY2Vzc2luZy1jb21wbGV0ZS1pbmRpY2F0b3JcIixpZ25vcmVSZWN0OiEwLG1peGluczp7c3R5bGVzOltcInNjYWxlWFwiLFwic2NhbGVZXCIsXCJvcGFjaXR5XCJdLGFuaW1hdGlvbnM6e3NjYWxlWDpcInNwcmluZ1wiLHNjYWxlWTpcInNwcmluZ1wiLG9wYWNpdHk6e3R5cGU6XCJ0d2VlblwiLGR1cmF0aW9uOjI1MH19fX0pLGxuPUEoe0RJRF9TRVRfTEFCRUxfQlVUVE9OX0FCT1JUX0lURU1fUFJPQ0VTU0lORzpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLmFjdGlvbjt0LnJlZi5idXR0b25BYm9ydEl0ZW1Qcm9jZXNzaW5nLmxhYmVsPW4udmFsdWV9LERJRF9TRVRfTEFCRUxfQlVUVE9OX0FCT1JUX0lURU1fTE9BRDpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLmFjdGlvbjt0LnJlZi5idXR0b25BYm9ydEl0ZW1Mb2FkLmxhYmVsPW4udmFsdWV9LERJRF9TRVRfTEFCRUxfQlVUVE9OX0FCT1JUX0lURU1fUkVNT1ZBTDpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLmFjdGlvbjt0LnJlZi5idXR0b25BYm9ydEl0ZW1SZW1vdmFsLmxhYmVsPW4udmFsdWV9LERJRF9SRVFVRVNUX0lURU1fUFJPQ0VTU0lORzpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Q7dC5yZWYucHJvY2Vzc1Byb2dyZXNzSW5kaWNhdG9yLnNwaW49ITAsdC5yZWYucHJvY2Vzc1Byb2dyZXNzSW5kaWNhdG9yLnByb2dyZXNzPTB9LERJRF9TVEFSVF9JVEVNX0xPQUQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290O3QucmVmLmxvYWRQcm9ncmVzc0luZGljYXRvci5zcGluPSEwLHQucmVmLmxvYWRQcm9ncmVzc0luZGljYXRvci5wcm9ncmVzcz0wfSxESURfU1RBUlRfSVRFTV9SRU1PVkU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290O3QucmVmLnByb2Nlc3NQcm9ncmVzc0luZGljYXRvci5zcGluPSEwLHQucmVmLnByb2Nlc3NQcm9ncmVzc0luZGljYXRvci5wcm9ncmVzcz0wfSxESURfVVBEQVRFX0lURU1fTE9BRF9QUk9HUkVTUzpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLmFjdGlvbjt0LnJlZi5sb2FkUHJvZ3Jlc3NJbmRpY2F0b3Iuc3Bpbj0hMSx0LnJlZi5sb2FkUHJvZ3Jlc3NJbmRpY2F0b3IucHJvZ3Jlc3M9bi5wcm9ncmVzc30sRElEX1VQREFURV9JVEVNX1BST0NFU1NfUFJPR1JFU1M6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290LG49ZS5hY3Rpb247dC5yZWYucHJvY2Vzc1Byb2dyZXNzSW5kaWNhdG9yLnNwaW49ITEsdC5yZWYucHJvY2Vzc1Byb2dyZXNzSW5kaWNhdG9yLnByb2dyZXNzPW4ucHJvZ3Jlc3N9fSksY249Uyh7Y3JlYXRlOmZ1bmN0aW9uKGUpe3ZhciBuLHI9ZS5yb290LG89ZS5wcm9wcyxpPU9iamVjdC5rZXlzKFF0KS5yZWR1Y2UoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZVt0XT1PYmplY3QuYXNzaWduKHt9LFF0W3RdKSxlfSx7fSksYT1vLmlkLHM9ci5xdWVyeShcIkdFVF9BTExPV19SRVZFUlRcIiksdT1yLnF1ZXJ5KFwiR0VUX0FMTE9XX1JFTU9WRVwiKSxsPXIucXVlcnkoXCJHRVRfQUxMT1dfUFJPQ0VTU1wiKSxjPXIucXVlcnkoXCJHRVRfSU5TVEFOVF9VUExPQURcIiksZj1yLnF1ZXJ5KFwiSVNfQVNZTkNcIiksZD1yLnF1ZXJ5KFwiR0VUX1NUWUxFX0JVVFRPTl9SRU1PVkVfSVRFTV9BTElHTlwiKTtmP2wmJiFzP249ZnVuY3Rpb24oZSl7cmV0dXJuIS9SZXZlcnRJdGVtUHJvY2Vzc2luZy8udGVzdChlKX06IWwmJnM/bj1mdW5jdGlvbihlKXtyZXR1cm4hL1Byb2Nlc3NJdGVtfFJldHJ5SXRlbVByb2Nlc3Npbmd8QWJvcnRJdGVtUHJvY2Vzc2luZy8udGVzdChlKX06bHx8c3x8KG49ZnVuY3Rpb24oZSl7cmV0dXJuIS9Qcm9jZXNzLy50ZXN0KGUpfSk6bj1mdW5jdGlvbihlKXtyZXR1cm4hL1Byb2Nlc3MvLnRlc3QoZSl9O3ZhciBwPW4/WnQuZmlsdGVyKG4pOlp0LmNvbmNhdCgpO2lmKGMmJnMmJihpLlJldmVydEl0ZW1Qcm9jZXNzaW5nLmxhYmVsPVwiR0VUX0xBQkVMX0JVVFRPTl9SRU1PVkVfSVRFTVwiLGkuUmV2ZXJ0SXRlbVByb2Nlc3NpbmcuaWNvbj1cIkdFVF9JQ09OX1JFTU9WRVwiKSxmJiYhcyl7dmFyIEU9c24uRElEX0NPTVBMRVRFX0lURU1fUFJPQ0VTU0lORztFLmluZm8udHJhbnNsYXRlWD10bixFLmluZm8udHJhbnNsYXRlWT1lbixFLnN0YXR1cy50cmFuc2xhdGVZPWVuLEUucHJvY2Vzc2luZ0NvbXBsZXRlSW5kaWNhdG9yPXtvcGFjaXR5OjEsc2NhbGVYOjEsc2NhbGVZOjF9fWlmKGYmJiFsJiYoW1wiRElEX1NUQVJUX0lURU1fUFJPQ0VTU0lOR1wiLFwiRElEX1JFUVVFU1RfSVRFTV9QUk9DRVNTSU5HXCIsXCJESURfVVBEQVRFX0lURU1fUFJPQ0VTU19QUk9HUkVTU1wiLFwiRElEX1RIUk9XX0lURU1fUFJPQ0VTU0lOR19FUlJPUlwiXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3NuW2VdLnN0YXR1cy50cmFuc2xhdGVZPWVufSksc24uRElEX1RIUk9XX0lURU1fUFJPQ0VTU0lOR19FUlJPUi5zdGF0dXMudHJhbnNsYXRlWD1KdCksZCYmcyl7aS5SZXZlcnRJdGVtUHJvY2Vzc2luZy5hbGlnbj1cIkJVVFRPTl9SRU1PVkVfSVRFTV9QT1NJVElPTlwiO3ZhciBfPXNuLkRJRF9DT01QTEVURV9JVEVNX1BST0NFU1NJTkc7Xy5pbmZvLnRyYW5zbGF0ZVg9JHQsXy5zdGF0dXMudHJhbnNsYXRlWT1lbixfLnByb2Nlc3NpbmdDb21wbGV0ZUluZGljYXRvcj17b3BhY2l0eToxLHNjYWxlWDoxLHNjYWxlWToxfX11fHwoaS5SZW1vdmVJdGVtLmRpc2FibGVkPSEwKSx0KGksZnVuY3Rpb24oZSx0KXt2YXIgbj1yLmNyZWF0ZUNoaWxkVmlldyhGdCx7bGFiZWw6ci5xdWVyeSh0LmxhYmVsKSxpY29uOnIucXVlcnkodC5pY29uKSxvcGFjaXR5OjB9KTtwLmluY2x1ZGVzKGUpJiZyLmFwcGVuZENoaWxkVmlldyhuKSx0LmRpc2FibGVkJiYobi5lbGVtZW50LnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsXCJkaXNhYmxlZFwiKSxuLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaGlkZGVuXCIsXCJoaWRkZW5cIikpLG4uZWxlbWVudC5kYXRhc2V0LmFsaWduPXIucXVlcnkoXCJHRVRfU1RZTEVfXCIrdC5hbGlnbiksbi5lbGVtZW50LmNsYXNzTGlzdC5hZGQodC5jbGFzc05hbWUpLG4ub24oXCJjbGlja1wiLGZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCksdC5kaXNhYmxlZHx8ci5kaXNwYXRjaCh0LmFjdGlvbix7cXVlcnk6YX0pfSksci5yZWZbXCJidXR0b25cIitlXT1ufSksci5yZWYucHJvY2Vzc2luZ0NvbXBsZXRlSW5kaWNhdG9yPXIuYXBwZW5kQ2hpbGRWaWV3KHIuY3JlYXRlQ2hpbGRWaWV3KHVuKSksci5yZWYucHJvY2Vzc2luZ0NvbXBsZXRlSW5kaWNhdG9yLmVsZW1lbnQuZGF0YXNldC5hbGlnbj1yLnF1ZXJ5KFwiR0VUX1NUWUxFX0JVVFRPTl9QUk9DRVNTX0lURU1fUE9TSVRJT05cIiksci5yZWYuaW5mbz1yLmFwcGVuZENoaWxkVmlldyhyLmNyZWF0ZUNoaWxkVmlldyhrdCx7aWQ6YX0pKSxyLnJlZi5zdGF0dXM9ci5hcHBlbmRDaGlsZFZpZXcoci5jcmVhdGVDaGlsZFZpZXcoenQse2lkOmF9KSk7dmFyIFQ9ci5hcHBlbmRDaGlsZFZpZXcoci5jcmVhdGVDaGlsZFZpZXcoQnQse29wYWNpdHk6MCxhbGlnbjpyLnF1ZXJ5KFwiR0VUX1NUWUxFX0xPQURfSU5ESUNBVE9SX1BPU0lUSU9OXCIpfSkpO1QuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZmlsZXBvbmQtLWxvYWQtaW5kaWNhdG9yXCIpLHIucmVmLmxvYWRQcm9ncmVzc0luZGljYXRvcj1UO3ZhciBJPXIuYXBwZW5kQ2hpbGRWaWV3KHIuY3JlYXRlQ2hpbGRWaWV3KEJ0LHtvcGFjaXR5OjAsYWxpZ246ci5xdWVyeShcIkdFVF9TVFlMRV9QUk9HUkVTU19JTkRJQ0FUT1JfUE9TSVRJT05cIil9KSk7SS5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJmaWxlcG9uZC0tcHJvY2Vzcy1pbmRpY2F0b3JcIiksci5yZWYucHJvY2Vzc1Byb2dyZXNzSW5kaWNhdG9yPUksci5yZWYuYWN0aXZlU3R5bGVzPVtdfSx3cml0ZTpmdW5jdGlvbihlKXt2YXIgbj1lLnJvb3Qscj1lLmFjdGlvbnMsbz1lLnByb3BzO2xuKHtyb290Om4sYWN0aW9uczpyLHByb3BzOm99KTt2YXIgaT1yLmNvbmNhdCgpLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4vXkRJRF8vLnRlc3QoZS50eXBlKX0pLnJldmVyc2UoKS5maW5kKGZ1bmN0aW9uKGUpe3JldHVybiBzbltlLnR5cGVdfSk7aWYoaSl7bi5yZWYuYWN0aXZlU3R5bGVzPVtdO3ZhciBhPXNuW2kudHlwZV07dChybixmdW5jdGlvbihlLHIpe3ZhciBvPW4ucmVmW2VdO3QocixmdW5jdGlvbih0LHIpe3ZhciBpPWFbZV0mJnZvaWQgMCE9PWFbZV1bdF0/YVtlXVt0XTpyO24ucmVmLmFjdGl2ZVN0eWxlcy5wdXNoKHtjb250cm9sOm8sa2V5OnQsdmFsdWU6aX0pfSl9KX1uLnJlZi5hY3RpdmVTdHlsZXMuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1lLmNvbnRyb2wscj1lLmtleSxvPWUudmFsdWU7dFtyXT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBvP28obik6b30pfSxkaWRDcmVhdGVWaWV3OmZ1bmN0aW9uKGUpe3llKFwiQ1JFQVRFX1ZJRVdcIixPYmplY3QuYXNzaWduKHt9LGUse3ZpZXc6ZX0pKX0sbmFtZTpcImZpbGVcIn0pLGZuPVMoe2NyZWF0ZTpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLnByb3BzO3QucmVmLmZpbGVOYW1lPUN0KFwibGVnZW5kXCIpLHQuYXBwZW5kQ2hpbGQodC5yZWYuZmlsZU5hbWUpLHQucmVmLmZpbGU9dC5hcHBlbmRDaGlsZFZpZXcodC5jcmVhdGVDaGlsZFZpZXcoY24se2lkOm4uaWR9KSksdC5yZWYuZGF0YT0hMX0saWdub3JlUmVjdDohMCx3cml0ZTpBKHtESURfTE9BRF9JVEVNOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUucHJvcHM7TnQodC5yZWYuZmlsZU5hbWUsd3QodC5xdWVyeShcIkdFVF9JVEVNX05BTUVcIixuLmlkKSkpfX0pLGRpZENyZWF0ZVZpZXc6ZnVuY3Rpb24oZSl7eWUoXCJDUkVBVEVfVklFV1wiLE9iamVjdC5hc3NpZ24oe30sZSx7dmlldzplfSkpfSx0YWc6XCJmaWVsZHNldFwiLG5hbWU6XCJmaWxlLXdyYXBwZXJcIn0pLGRuPXt0eXBlOlwic3ByaW5nXCIsZGFtcGluZzouNixtYXNzOjd9LHBuPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1TKHtuYW1lOlwicGFuZWwtXCIrdC5uYW1lK1wiIGZpbGVwb25kLS1cIituLG1peGluczp0Lm1peGlucyxpZ25vcmVSZWN0VXBkYXRlOiEwfSksbz1lLmNyZWF0ZUNoaWxkVmlldyhyLHQucHJvcHMpO2UucmVmW3QubmFtZV09ZS5hcHBlbmRDaGlsZFZpZXcobyl9LEVuPVMoe25hbWU6XCJwYW5lbFwiLHJlYWQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290O3JldHVybiBlLnByb3BzLmhlaWdodEN1cnJlbnQ9dC5yZWYuYm90dG9tLnRyYW5zbGF0ZVl9LHdyaXRlOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUucHJvcHM7aWYobnVsbCE9PXQucmVmLnNjYWxhYmxlJiZuLnNjYWxhYmxlPT09dC5yZWYuc2NhbGFibGV8fCh0LnJlZi5zY2FsYWJsZT0hTihuLnNjYWxhYmxlKXx8bi5zY2FsYWJsZSx0LmVsZW1lbnQuZGF0YXNldC5zY2FsYWJsZT10LnJlZi5zY2FsYWJsZSksbi5oZWlnaHQpe3ZhciByPXQucmVmLnRvcC5yZWN0LmVsZW1lbnQsbz10LnJlZi5ib3R0b20ucmVjdC5lbGVtZW50LGk9TWF0aC5tYXgoci5oZWlnaHQrby5oZWlnaHQsbi5oZWlnaHQpO3QucmVmLmNlbnRlci50cmFuc2xhdGVZPXIuaGVpZ2h0LHQucmVmLmNlbnRlci5zY2FsZVk9KGktci5oZWlnaHQtby5oZWlnaHQpLzEwMCx0LnJlZi5ib3R0b20udHJhbnNsYXRlWT1pLW8uaGVpZ2h0fX0sY3JlYXRlOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUucHJvcHM7W3tuYW1lOlwidG9wXCJ9LHtuYW1lOlwiY2VudGVyXCIscHJvcHM6e3RyYW5zbGF0ZVk6bnVsbCxzY2FsZVk6bnVsbH0sbWl4aW5zOnthbmltYXRpb25zOntzY2FsZVk6ZG59LHN0eWxlczpbXCJ0cmFuc2xhdGVZXCIsXCJzY2FsZVlcIl19fSx7bmFtZTpcImJvdHRvbVwiLHByb3BzOnt0cmFuc2xhdGVZOm51bGx9LG1peGluczp7YW5pbWF0aW9uczp7dHJhbnNsYXRlWTpkbn0sc3R5bGVzOltcInRyYW5zbGF0ZVlcIl19fV0uZm9yRWFjaChmdW5jdGlvbihlKXtwbih0LGUsbi5uYW1lKX0pLHQuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZmlsZXBvbmQtLVwiK24ubmFtZSksdC5yZWYuc2NhbGFibGU9bnVsbH0saWdub3JlUmVjdDohMCxtaXhpbnM6e2FwaXM6W1wiaGVpZ2h0XCIsXCJoZWlnaHRDdXJyZW50XCIsXCJzY2FsYWJsZVwiXX19KSxfbj17dHlwZTpcInNwcmluZ1wiLHN0aWZmbmVzczouNzUsZGFtcGluZzouNDUsbWFzczoxMH0sVG49e0RJRF9TVEFSVF9JVEVNX0xPQUQ6XCJidXN5XCIsRElEX1VQREFURV9JVEVNX0xPQURfUFJPR1JFU1M6XCJsb2FkaW5nXCIsRElEX1RIUk9XX0lURU1fSU5WQUxJRDpcImxvYWQtaW52YWxpZFwiLERJRF9USFJPV19JVEVNX0xPQURfRVJST1I6XCJsb2FkLWVycm9yXCIsRElEX0xPQURfSVRFTTpcImlkbGVcIixESURfVEhST1dfSVRFTV9SRU1PVkVfRVJST1I6XCJyZW1vdmUtZXJyb3JcIixESURfU1RBUlRfSVRFTV9SRU1PVkU6XCJidXN5XCIsRElEX1NUQVJUX0lURU1fUFJPQ0VTU0lORzpcImJ1c3kgcHJvY2Vzc2luZ1wiLERJRF9SRVFVRVNUX0lURU1fUFJPQ0VTU0lORzpcImJ1c3kgcHJvY2Vzc2luZ1wiLERJRF9VUERBVEVfSVRFTV9QUk9DRVNTX1BST0dSRVNTOlwicHJvY2Vzc2luZ1wiLERJRF9DT01QTEVURV9JVEVNX1BST0NFU1NJTkc6XCJwcm9jZXNzaW5nLWNvbXBsZXRlXCIsRElEX1RIUk9XX0lURU1fUFJPQ0VTU0lOR19FUlJPUjpcInByb2Nlc3NpbmctZXJyb3JcIixESURfVEhST1dfSVRFTV9QUk9DRVNTSU5HX1JFVkVSVF9FUlJPUjpcInByb2Nlc3NpbmctcmV2ZXJ0LWVycm9yXCIsRElEX0FCT1JUX0lURU1fUFJPQ0VTU0lORzpcImNhbmNlbGxlZFwiLERJRF9SRVZFUlRfSVRFTV9QUk9DRVNTSU5HOlwiaWRsZVwifSxJbj1BKHtESURfVVBEQVRFX1BBTkVMX0hFSUdIVDpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLmFjdGlvbjt0LmhlaWdodD1uLmhlaWdodH19KSx2bj1BKHtESURfR1JBQl9JVEVNOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdDtlLnByb3BzLmRyYWdPcmlnaW49e3g6dC50cmFuc2xhdGVYLHk6dC50cmFuc2xhdGVZfX0sRElEX0RSQUdfSVRFTTpmdW5jdGlvbihlKXtlLnJvb3QuZWxlbWVudC5kYXRhc2V0LmRyYWdTdGF0ZT1cImRyYWdcIn0sRElEX0RST1BfSVRFTTpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLnByb3BzO24uZHJhZ09mZnNldD1udWxsLG4uZHJhZ09yaWdpbj1udWxsLHQuZWxlbWVudC5kYXRhc2V0LmRyYWdTdGF0ZT1cImRyb3BcIn19LGZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUuYWN0aW9ucyxyPWUucHJvcHMsbz1lLnNob3VsZE9wdGltaXplO1wiZHJvcFwiPT09dC5lbGVtZW50LmRhdGFzZXQuZHJhZ1N0YXRlJiZ0LnNjYWxlWDw9MSYmKHQuZWxlbWVudC5kYXRhc2V0LmRyYWdTdGF0ZT1cImlkbGVcIik7dmFyIGk9bi5jb25jYXQoKS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuL15ESURfLy50ZXN0KGUudHlwZSl9KS5yZXZlcnNlKCkuZmluZChmdW5jdGlvbihlKXtyZXR1cm4gVG5bZS50eXBlXX0pO2kmJmkudHlwZSE9PXIuY3VycmVudFN0YXRlJiYoci5jdXJyZW50U3RhdGU9aS50eXBlLHQuZWxlbWVudC5kYXRhc2V0LmZpbGVwb25kSXRlbVN0YXRlPVRuW3IuY3VycmVudFN0YXRlXXx8XCJcIik7dmFyIGE9dC5xdWVyeShcIkdFVF9JVEVNX1BBTkVMX0FTUEVDVF9SQVRJT1wiKXx8dC5xdWVyeShcIkdFVF9QQU5FTF9BU1BFQ1RfUkFUSU9cIik7YT9vfHwodC5oZWlnaHQ9dC5yZWN0LmVsZW1lbnQud2lkdGgqYSk6KEluKHtyb290OnQsYWN0aW9uczpuLHByb3BzOnJ9KSwhdC5oZWlnaHQmJnQucmVmLmNvbnRhaW5lci5yZWN0LmVsZW1lbnQuaGVpZ2h0PjAmJih0LmhlaWdodD10LnJlZi5jb250YWluZXIucmVjdC5lbGVtZW50LmhlaWdodCkpLG8mJih0LnJlZi5wYW5lbC5oZWlnaHQ9bnVsbCksdC5yZWYucGFuZWwuaGVpZ2h0PXQuaGVpZ2h0fSksbW49Uyh7Y3JlYXRlOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUucHJvcHM7dC5yZWYuaGFuZGxlQ2xpY2s9ZnVuY3Rpb24oZSl7cmV0dXJuIHQuZGlzcGF0Y2goXCJESURfQUNUSVZBVEVfSVRFTVwiLHtpZDpuLmlkfSl9LHQuZWxlbWVudC5pZD1cImZpbGVwb25kLS1pdGVtLVwiK24uaWQsdC5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHQucmVmLmhhbmRsZUNsaWNrKSx0LnJlZi5jb250YWluZXI9dC5hcHBlbmRDaGlsZFZpZXcodC5jcmVhdGVDaGlsZFZpZXcoZm4se2lkOm4uaWR9KSksdC5yZWYucGFuZWw9dC5hcHBlbmRDaGlsZFZpZXcodC5jcmVhdGVDaGlsZFZpZXcoRW4se25hbWU6XCJpdGVtLXBhbmVsXCJ9KSksdC5yZWYucGFuZWwuaGVpZ2h0PW51bGwsbi5tYXJrZWRGb3JSZW1vdmFsPSExLHQucXVlcnkoXCJHRVRfQUxMT1dfUkVPUkRFUlwiKSYmKHQuZWxlbWVudC5kYXRhc2V0LmRyYWdTdGF0ZT1cImlkbGVcIix0LmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsZnVuY3Rpb24oZSl7aWYoZS5pc1ByaW1hcnkpe3ZhciByPSExLG89ZS5wYWdlWCxpPWUucGFnZVk7bi5kcmFnT3JpZ2luPXt4OnQudHJhbnNsYXRlWCx5OnQudHJhbnNsYXRlWX0sbi5kcmFnQ2VudGVyPXt4OmUub2Zmc2V0WCx5OmUub2Zmc2V0WX07dmFyIGEscyx1LGw9KGE9dC5xdWVyeShcIkdFVF9BQ1RJVkVfSVRFTVNcIikscz1hLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5pZH0pLHU9dm9pZCAwLHtzZXRJbmRleDpmdW5jdGlvbihlKXt1PWV9LGdldEluZGV4OmZ1bmN0aW9uKCl7cmV0dXJuIHV9LGdldEl0ZW1JbmRleDpmdW5jdGlvbihlKXtyZXR1cm4gcy5pbmRleE9mKGUuaWQpfX0pO3QuZGlzcGF0Y2goXCJESURfR1JBQl9JVEVNXCIse2lkOm4uaWQsZHJhZ1N0YXRlOmx9KTt2YXIgYz1mdW5jdGlvbihlKXtlLmlzUHJpbWFyeSYmKGUuc3RvcFByb3BhZ2F0aW9uKCksZS5wcmV2ZW50RGVmYXVsdCgpLG4uZHJhZ09mZnNldD17eDplLnBhZ2VYLW8seTplLnBhZ2VZLWl9LG4uZHJhZ09mZnNldC54Km4uZHJhZ09mZnNldC54K24uZHJhZ09mZnNldC55Km4uZHJhZ09mZnNldC55PjE2JiYhciYmKHI9ITAsdC5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHQucmVmLmhhbmRsZUNsaWNrKSksdC5kaXNwYXRjaChcIkRJRF9EUkFHX0lURU1cIix7aWQ6bi5pZCxkcmFnU3RhdGU6bH0pKX07ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJtb3ZlXCIsYyksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLGZ1bmN0aW9uIGUoYSl7YS5pc1ByaW1hcnkmJihkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIixjKSxkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsZSksbi5kcmFnT2Zmc2V0PXt4OmEucGFnZVgtbyx5OmEucGFnZVktaX0sdC5kaXNwYXRjaChcIkRJRF9EUk9QX0lURU1cIix7aWQ6bi5pZCxkcmFnU3RhdGU6bH0pLHImJnNldFRpbWVvdXQoZnVuY3Rpb24oKXtyZXR1cm4gdC5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHQucmVmLmhhbmRsZUNsaWNrKX0sMCkpfSl9fSkpfSx3cml0ZTp2bixkZXN0cm95OmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUucHJvcHM7dC5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHQucmVmLmhhbmRsZUNsaWNrKSx0LmRpc3BhdGNoKFwiUkVMRUFTRV9JVEVNXCIse3F1ZXJ5Om4uaWR9KX0sdGFnOlwibGlcIixuYW1lOlwiaXRlbVwiLG1peGluczp7YXBpczpbXCJpZFwiLFwiaW50ZXJhY3Rpb25NZXRob2RcIixcIm1hcmtlZEZvclJlbW92YWxcIixcInNwYXduRGF0ZVwiLFwiZHJhZ0NlbnRlclwiLFwiZHJhZ09yaWdpblwiLFwiZHJhZ09mZnNldFwiXSxzdHlsZXM6W1widHJhbnNsYXRlWFwiLFwidHJhbnNsYXRlWVwiLFwic2NhbGVYXCIsXCJzY2FsZVlcIixcIm9wYWNpdHlcIixcImhlaWdodFwiXSxhbmltYXRpb25zOntzY2FsZVg6XCJzcHJpbmdcIixzY2FsZVk6XCJzcHJpbmdcIix0cmFuc2xhdGVYOl9uLHRyYW5zbGF0ZVk6X24sb3BhY2l0eTp7dHlwZTpcInR3ZWVuXCIsZHVyYXRpb246MTUwfX19fSksaG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4gTWF0aC5tYXgoMSxNYXRoLmZsb29yKChlKzEpL3QpKX0sZ249ZnVuY3Rpb24oZSx0LG4pe2lmKG4pe3ZhciByPWUucmVjdC5lbGVtZW50LndpZHRoLG89dC5sZW5ndGgsaT1udWxsO2lmKDA9PT1vfHxuLnRvcDx0WzBdLnJlY3QuZWxlbWVudC50b3ApcmV0dXJuLTE7dmFyIGE9dFswXS5yZWN0LmVsZW1lbnQscz1hLm1hcmdpbkxlZnQrYS5tYXJnaW5SaWdodCx1PWEud2lkdGgrcyxsPWhuKHIsdSk7aWYoMT09PWwpe2Zvcih2YXIgYz0wO2M8bztjKyspe3ZhciBmPXRbY10sZD1mLnJlY3Qub3V0ZXIudG9wKy41KmYucmVjdC5lbGVtZW50LmhlaWdodDtpZihuLnRvcDxkKXJldHVybiBjfXJldHVybiBvfWZvcih2YXIgcD1hLm1hcmdpblRvcCthLm1hcmdpbkJvdHRvbSxFPWEuaGVpZ2h0K3AsXz0wO188bztfKyspe3ZhciBUPV8lbCp1LEk9TWF0aC5mbG9vcihfL2wpKkUsdj1JLWEubWFyZ2luVG9wLG09VCt1LGg9SStFK2EubWFyZ2luQm90dG9tO2lmKG4udG9wPGgmJm4udG9wPnYpe2lmKG4ubGVmdDxtKXJldHVybiBfO2k9XyE9PW8tMT9fOm51bGx9fXJldHVybiBudWxsIT09aT9pOm99fSxSbj17aGVpZ2h0OjAsd2lkdGg6MCxnZXQgZ2V0SGVpZ2h0KCl7cmV0dXJuIHRoaXMuaGVpZ2h0fSxzZXQgc2V0SGVpZ2h0KGUpezAhPT10aGlzLmhlaWdodCYmMCE9PWV8fCh0aGlzLmhlaWdodD1lKX0sZ2V0IGdldFdpZHRoKCl7cmV0dXJuIHRoaXMud2lkdGh9LHNldCBzZXRXaWR0aChlKXswIT09dGhpcy53aWR0aCYmMCE9PWV8fCh0aGlzLndpZHRoPWUpfSxzZXREaW1lbnNpb25zOmZ1bmN0aW9uKGUsdCl7MCE9PXRoaXMuaGVpZ2h0JiYwIT09ZXx8KHRoaXMuaGVpZ2h0PWUpLDAhPT10aGlzLndpZHRoJiYwIT09dHx8KHRoaXMud2lkdGg9dCl9fSxPbj1mdW5jdGlvbihlLHQsbil7dmFyIHI9YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOjAsbz1hcmd1bWVudHMubGVuZ3RoPjQmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06MTtlLmRyYWdPZmZzZXQ/KGUudHJhbnNsYXRlWD1udWxsLGUudHJhbnNsYXRlWT1udWxsLGUudHJhbnNsYXRlWD1lLmRyYWdPcmlnaW4ueCtlLmRyYWdPZmZzZXQueCxlLnRyYW5zbGF0ZVk9ZS5kcmFnT3JpZ2luLnkrZS5kcmFnT2Zmc2V0LnksZS5zY2FsZVg9MS4wMjUsZS5zY2FsZVk9MS4wMjUpOihlLnRyYW5zbGF0ZVg9dCxlLnRyYW5zbGF0ZVk9bixEYXRlLm5vdygpPmUuc3Bhd25EYXRlJiYoMD09PWUub3BhY2l0eSYmeW4oZSx0LG4scixvKSxlLnNjYWxlWD0xLGUuc2NhbGVZPTEsZS5vcGFjaXR5PTEpKX0seW49ZnVuY3Rpb24oZSx0LG4scixvKXtlLmludGVyYWN0aW9uTWV0aG9kPT09cmU/KGUudHJhbnNsYXRlWD1udWxsLGUudHJhbnNsYXRlWD10LGUudHJhbnNsYXRlWT1udWxsLGUudHJhbnNsYXRlWT1uKTplLmludGVyYWN0aW9uTWV0aG9kPT09ZWU/KGUudHJhbnNsYXRlWD1udWxsLGUudHJhbnNsYXRlWD10LTIwKnIsZS50cmFuc2xhdGVZPW51bGwsZS50cmFuc2xhdGVZPW4tMTAqbyxlLnNjYWxlWD0uOCxlLnNjYWxlWT0uOCk6ZS5pbnRlcmFjdGlvbk1ldGhvZD09PXRlPyhlLnRyYW5zbGF0ZVk9bnVsbCxlLnRyYW5zbGF0ZVk9bi0zMCk6ZS5pbnRlcmFjdGlvbk1ldGhvZD09PUomJihlLnRyYW5zbGF0ZVg9bnVsbCxlLnRyYW5zbGF0ZVg9dC0zMCxlLnRyYW5zbGF0ZVk9bnVsbCl9LERuPWZ1bmN0aW9uKGUpe3JldHVybiBlLnJlY3QuZWxlbWVudC5oZWlnaHQrLjUqZS5yZWN0LmVsZW1lbnQubWFyZ2luQm90dG9tKy41KmUucmVjdC5lbGVtZW50Lm1hcmdpblRvcH0sU249QSh7RElEX0FERF9JVEVNOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUuYWN0aW9uLHI9bi5pZCxvPW4uaW5kZXgsaT1uLmludGVyYWN0aW9uTWV0aG9kO3QucmVmLmFkZEluZGV4PW87dmFyIGE9RGF0ZS5ub3coKSxzPWEsdT0xO2lmKGkhPT1yZSl7dT0wO3ZhciBsPXQucXVlcnkoXCJHRVRfSVRFTV9JTlNFUlRfSU5URVJWQUxcIiksYz1hLXQucmVmLmxhc3RJdGVtU3BhbndEYXRlO3M9YzxsP2ErKGwtYyk6YX10LnJlZi5sYXN0SXRlbVNwYW53RGF0ZT1zLHQuYXBwZW5kQ2hpbGRWaWV3KHQuY3JlYXRlQ2hpbGRWaWV3KG1uLHtzcGF3bkRhdGU6cyxpZDpyLG9wYWNpdHk6dSxpbnRlcmFjdGlvbk1ldGhvZDppfSksbyl9LERJRF9SRU1PVkVfSVRFTTpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLmFjdGlvbi5pZCxyPXQuY2hpbGRWaWV3cy5maW5kKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlkPT09bn0pO3ImJihyLnNjYWxlWD0uOSxyLnNjYWxlWT0uOSxyLm9wYWNpdHk9MCxyLm1hcmtlZEZvclJlbW92YWw9ITApfSxESURfRFJBR19JVEVNOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUuYWN0aW9uLHI9bi5pZCxvPW4uZHJhZ1N0YXRlLGk9dC5xdWVyeShcIkdFVF9JVEVNXCIse2lkOnJ9KSxhPXQuY2hpbGRWaWV3cy5maW5kKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlkPT09cn0pLHM9dC5jaGlsZFZpZXdzLmxlbmd0aCx1PW8uZ2V0SXRlbUluZGV4KGkpO2lmKGEpe3ZhciBsLGM9YS5kcmFnT3JpZ2luLngrYS5kcmFnT2Zmc2V0LngrYS5kcmFnQ2VudGVyLngsZj1hLmRyYWdPcmlnaW4ueSthLmRyYWdPZmZzZXQueSthLmRyYWdDZW50ZXIueSxkPURuKGEpLHA9KGw9YSkucmVjdC5lbGVtZW50LndpZHRoKy41KmwucmVjdC5lbGVtZW50Lm1hcmdpbkxlZnQrLjUqbC5yZWN0LmVsZW1lbnQubWFyZ2luUmlnaHQsRT1NYXRoLmZsb29yKHQucmVjdC5vdXRlci53aWR0aC9wKTtFPnMmJihFPXMpO3ZhciBfPU1hdGguZmxvb3Iocy9FKzEpO1JuLnNldEhlaWdodD1kKl8sUm4uc2V0V2lkdGg9cCpFO3ZhciBUPXt5Ok1hdGguZmxvb3IoZi9kKSx4Ok1hdGguZmxvb3IoYy9wKSxnZXRHcmlkSW5kZXg6ZnVuY3Rpb24oKXtyZXR1cm4gZj5Sbi5nZXRIZWlnaHR8fGY8MHx8Yz5Sbi5nZXRXaWR0aHx8YzwwP3U6dGhpcy55KkUrdGhpcy54fSxnZXRDb2xJbmRleDpmdW5jdGlvbigpe2Zvcih2YXIgZT10LnF1ZXJ5KFwiR0VUX0FDVElWRV9JVEVNU1wiKSxuPXQuY2hpbGRWaWV3cy5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVjdC5lbGVtZW50LmhlaWdodH0pLHI9ZS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIG4uZmluZChmdW5jdGlvbih0KXtyZXR1cm4gdC5pZD09PWUuaWR9KX0pLG89ci5maW5kSW5kZXgoZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT1hfSksaT1EbihhKSxzPXIubGVuZ3RoLHU9cyxsPTAsYz0wLGQ9MCxwPTA7cDxzO3ArKylpZihsPURuKHJbcF0pLGY8KGM9KGQ9YykrbCkpe2lmKG8+cCl7aWYoZjxkK2kpe3U9cDticmVha31jb250aW51ZX11PXA7YnJlYWt9cmV0dXJuIHV9fSxJPUU+MT9ULmdldEdyaWRJbmRleCgpOlQuZ2V0Q29sSW5kZXgoKTt0LmRpc3BhdGNoKFwiTU9WRV9JVEVNXCIse3F1ZXJ5OmEsaW5kZXg6SX0pO3ZhciB2PW8uZ2V0SW5kZXgoKTtpZih2b2lkIDA9PT12fHx2IT09SSl7aWYoby5zZXRJbmRleChJKSx2b2lkIDA9PT12KXJldHVybjt0LmRpc3BhdGNoKFwiRElEX1JFT1JERVJfSVRFTVNcIix7aXRlbXM6dC5xdWVyeShcIkdFVF9BQ1RJVkVfSVRFTVNcIiksb3JpZ2luOnUsdGFyZ2V0Okl9KX19fX0pLEFuPVMoe2NyZWF0ZTpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Q7cih0LmVsZW1lbnQsXCJyb2xlXCIsXCJsaXN0XCIpLHQucmVmLmxhc3RJdGVtU3BhbndEYXRlPURhdGUubm93KCl9LHdyaXRlOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUucHJvcHMscj1lLmFjdGlvbnMsbz1lLnNob3VsZE9wdGltaXplO1NuKHtyb290OnQscHJvcHM6bixhY3Rpb25zOnJ9KTt2YXIgaT1uLmRyYWdDb29yZGluYXRlcyxhPXQucmVjdC5lbGVtZW50LndpZHRoLHM9dC5jaGlsZFZpZXdzLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5yZWN0LmVsZW1lbnQuaGVpZ2h0fSksdT10LnF1ZXJ5KFwiR0VUX0FDVElWRV9JVEVNU1wiKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHMuZmluZChmdW5jdGlvbih0KXtyZXR1cm4gdC5pZD09PWUuaWR9KX0pLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZX0pLGw9aT9nbih0LHUsaSk6bnVsbCxjPXQucmVmLmFkZEluZGV4fHxudWxsO3QucmVmLmFkZEluZGV4PW51bGw7dmFyIGY9MCxkPTAscD0wO2lmKDAhPT11Lmxlbmd0aCl7dmFyIEU9dVswXS5yZWN0LmVsZW1lbnQsXz1FLm1hcmdpblRvcCtFLm1hcmdpbkJvdHRvbSxUPUUubWFyZ2luTGVmdCtFLm1hcmdpblJpZ2h0LEk9RS53aWR0aCtULHY9RS5oZWlnaHQrXyxtPWhuKGEsSSk7aWYoMT09PW0pe3ZhciBoPTAsZz0wO3UuZm9yRWFjaChmdW5jdGlvbihlLHQpe2lmKGwpe3ZhciBuPXQtbDtnPS0yPT09bj8uMjUqLV86LTE9PT1uPy43NSotXzowPT09bj8uNzUqXzoxPT09bj8uMjUqXzowfW8mJihlLnRyYW5zbGF0ZVg9bnVsbCxlLnRyYW5zbGF0ZVk9bnVsbCksZS5tYXJrZWRGb3JSZW1vdmFsfHxPbihlLDAsaCtnKTt2YXIgcj0oZS5yZWN0LmVsZW1lbnQuaGVpZ2h0K18pKihlLm1hcmtlZEZvclJlbW92YWw/ZS5vcGFjaXR5OjEpO2grPXJ9KX1lbHNle3ZhciBSPTAsTz0wO3UuZm9yRWFjaChmdW5jdGlvbihlLHQpe3Q9PT1sJiYoZj0xKSx0PT09YyYmKHArPTEpLGUubWFya2VkRm9yUmVtb3ZhbCYmZS5vcGFjaXR5PC41JiYoZC09MSk7dmFyIG49dCtwK2YrZCxyPW4lbSxpPU1hdGguZmxvb3Iobi9tKSxhPXIqSSxzPWkqdix1PU1hdGguc2lnbihhLVIpLEU9TWF0aC5zaWduKHMtTyk7Uj1hLE89cyxlLm1hcmtlZEZvclJlbW92YWx8fChvJiYoZS50cmFuc2xhdGVYPW51bGwsZS50cmFuc2xhdGVZPW51bGwpLE9uKGUsYSxzLHUsRSkpfSl9fX0sdGFnOlwidWxcIixuYW1lOlwibGlzdFwiLGRpZFdyaXRlVmlldzpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Q7dC5jaGlsZFZpZXdzLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5tYXJrZWRGb3JSZW1vdmFsJiYwPT09ZS5vcGFjaXR5JiZlLnJlc3Rpbmd9KS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UuX2Rlc3Ryb3koKSx0LnJlbW92ZUNoaWxkVmlldyhlKX0pfSxmaWx0ZXJGcmFtZUFjdGlvbnNGb3JDaGlsZDpmdW5jdGlvbihlLHQpe3JldHVybiB0LmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4hdC5kYXRhfHwhdC5kYXRhLmlkfHxlLmlkPT09dC5kYXRhLmlkfSl9LG1peGluczp7YXBpczpbXCJkcmFnQ29vcmRpbmF0ZXNcIl19fSksTG49QSh7RElEX0RSQUc6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290LG49ZS5wcm9wcyxyPWUuYWN0aW9uO3QucXVlcnkoXCJHRVRfSVRFTV9JTlNFUlRfTE9DQVRJT05fRlJFRURPTVwiKSYmKG4uZHJhZ0Nvb3JkaW5hdGVzPXtsZWZ0OnIucG9zaXRpb24uc2NvcGVMZWZ0LXQucmVmLmxpc3QucmVjdC5lbGVtZW50LmxlZnQsdG9wOnIucG9zaXRpb24uc2NvcGVUb3AtKHQucmVjdC5vdXRlci50b3ArdC5yZWN0LmVsZW1lbnQubWFyZ2luVG9wK3QucmVjdC5lbGVtZW50LnNjcm9sbFRvcCl9KX0sRElEX0VORF9EUkFHOmZ1bmN0aW9uKGUpe2UucHJvcHMuZHJhZ0Nvb3JkaW5hdGVzPW51bGx9fSksYm49Uyh7Y3JlYXRlOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUucHJvcHM7dC5yZWYubGlzdD10LmFwcGVuZENoaWxkVmlldyh0LmNyZWF0ZUNoaWxkVmlldyhBbikpLG4uZHJhZ0Nvb3JkaW5hdGVzPW51bGwsbi5vdmVyZmxvd2luZz0hMX0sd3JpdGU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290LG49ZS5wcm9wcyxyPWUuYWN0aW9ucztpZihMbih7cm9vdDp0LHByb3BzOm4sYWN0aW9uczpyfSksdC5yZWYubGlzdC5kcmFnQ29vcmRpbmF0ZXM9bi5kcmFnQ29vcmRpbmF0ZXMsbi5vdmVyZmxvd2luZyYmIW4ub3ZlcmZsb3cmJihuLm92ZXJmbG93aW5nPSExLHQuZWxlbWVudC5kYXRhc2V0LnN0YXRlPVwiXCIsdC5oZWlnaHQ9bnVsbCksbi5vdmVyZmxvdyl7dmFyIG89TWF0aC5yb3VuZChuLm92ZXJmbG93KTtvIT09dC5oZWlnaHQmJihuLm92ZXJmbG93aW5nPSEwLHQuZWxlbWVudC5kYXRhc2V0LnN0YXRlPVwib3ZlcmZsb3dcIix0LmhlaWdodD1vKX19LG5hbWU6XCJsaXN0LXNjcm9sbGVyXCIsbWl4aW5zOnthcGlzOltcIm92ZXJmbG93XCIsXCJkcmFnQ29vcmRpbmF0ZXNcIl0sc3R5bGVzOltcImhlaWdodFwiLFwidHJhbnNsYXRlWVwiXSxhbmltYXRpb25zOnt0cmFuc2xhdGVZOlwic3ByaW5nXCJ9fX0pLFBuPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbz1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106XCJcIjtuP3IoZSx0LG8pOmUucmVtb3ZlQXR0cmlidXRlKHQpfSxNbj1mdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLmFjdGlvbjt0LnF1ZXJ5KFwiR0VUX0FMTE9XX1NZTkNfQUNDRVBUX0FUVFJJQlVURVwiKSYmUG4odC5lbGVtZW50LFwiYWNjZXB0XCIsISFuLnZhbHVlLG4udmFsdWU/bi52YWx1ZS5qb2luKFwiLFwiKTpcIlwiKX0sd249ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290LG49ZS5hY3Rpb247UG4odC5lbGVtZW50LFwibXVsdGlwbGVcIixuLnZhbHVlKX0sQ249ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290LG49ZS5hY3Rpb247UG4odC5lbGVtZW50LFwid2Via2l0ZGlyZWN0b3J5XCIsbi52YWx1ZSl9LE5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPXQucXVlcnkoXCJHRVRfRElTQUJMRURcIikscj10LnF1ZXJ5KFwiR0VUX0FMTE9XX0JST1dTRVwiKSxvPW58fCFyO1BuKHQuZWxlbWVudCxcImRpc2FibGVkXCIsbyl9LEduPWZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdDtlLmFjdGlvbi52YWx1ZT8wPT09dC5xdWVyeShcIkdFVF9UT1RBTF9JVEVNU1wiKSYmUG4odC5lbGVtZW50LFwicmVxdWlyZWRcIiwhMCk6UG4odC5lbGVtZW50LFwicmVxdWlyZWRcIiwhMSl9LFVuPWZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUuYWN0aW9uO1BuKHQuZWxlbWVudCxcImNhcHR1cmVcIiwhIW4udmFsdWUsITA9PT1uLnZhbHVlP1wiXCI6bi52YWx1ZSl9LEJuPWZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPXQuZWxlbWVudDt0LnF1ZXJ5KFwiR0VUX1RPVEFMX0lURU1TXCIpPjA/KFBuKG4sXCJyZXF1aXJlZFwiLCExKSxQbihuLFwibmFtZVwiLCExKSk6KFBuKG4sXCJuYW1lXCIsITAsdC5xdWVyeShcIkdFVF9OQU1FXCIpKSx0LnF1ZXJ5KFwiR0VUX0NIRUNLX1ZBTElESVRZXCIpJiZuLnNldEN1c3RvbVZhbGlkaXR5KFwiXCIpLHQucXVlcnkoXCJHRVRfUkVRVUlSRURcIikmJlBuKG4sXCJyZXF1aXJlZFwiLCEwKSl9LEZuPVMoe3RhZzpcImlucHV0XCIsbmFtZTpcImJyb3dzZXJcIixpZ25vcmVSZWN0OiEwLGlnbm9yZVJlY3RVcGRhdGU6ITAsYXR0cmlidXRlczp7dHlwZTpcImZpbGVcIn0sY3JlYXRlOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUucHJvcHM7dC5lbGVtZW50LmlkPVwiZmlsZXBvbmQtLWJyb3dzZXItXCIrbi5pZCxyKHQuZWxlbWVudCxcIm5hbWVcIix0LnF1ZXJ5KFwiR0VUX05BTUVcIikpLHIodC5lbGVtZW50LFwiYXJpYS1jb250cm9sc1wiLFwiZmlsZXBvbmQtLWFzc2lzdGFudC1cIituLmlkKSxyKHQuZWxlbWVudCxcImFyaWEtbGFiZWxsZWRieVwiLFwiZmlsZXBvbmQtLWRyb3AtbGFiZWwtXCIrbi5pZCksTW4oe3Jvb3Q6dCxhY3Rpb246e3ZhbHVlOnQucXVlcnkoXCJHRVRfQUNDRVBURURfRklMRV9UWVBFU1wiKX19KSx3bih7cm9vdDp0LGFjdGlvbjp7dmFsdWU6dC5xdWVyeShcIkdFVF9BTExPV19NVUxUSVBMRVwiKX19KSxDbih7cm9vdDp0LGFjdGlvbjp7dmFsdWU6dC5xdWVyeShcIkdFVF9BTExPV19ESVJFQ1RPUklFU19PTkxZXCIpfX0pLE5uKHtyb290OnR9KSxHbih7cm9vdDp0LGFjdGlvbjp7dmFsdWU6dC5xdWVyeShcIkdFVF9SRVFVSVJFRFwiKX19KSxVbih7cm9vdDp0LGFjdGlvbjp7dmFsdWU6dC5xdWVyeShcIkdFVF9DQVBUVVJFX01FVEhPRFwiKX19KSx0LnJlZi5oYW5kbGVDaGFuZ2U9ZnVuY3Rpb24oZSl7aWYodC5lbGVtZW50LnZhbHVlKXt2YXIgcj1BcnJheS5mcm9tKHQuZWxlbWVudC5maWxlcykubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLl9yZWxhdGl2ZVBhdGg9ZS53ZWJraXRSZWxhdGl2ZVBhdGgsZX0pO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtuLm9ubG9hZChyKSxmdW5jdGlvbihlKXtpZihlJiZcIlwiIT09ZS52YWx1ZSl7dHJ5e2UudmFsdWU9XCJcIn1jYXRjaChlKXt9aWYoZS52YWx1ZSl7dmFyIHQ9Q3QoXCJmb3JtXCIpLG49ZS5wYXJlbnROb2RlLHI9ZS5uZXh0U2libGluZzt0LmFwcGVuZENoaWxkKGUpLHQucmVzZXQoKSxyP24uaW5zZXJ0QmVmb3JlKGUscik6bi5hcHBlbmRDaGlsZChlKX19fSh0LmVsZW1lbnQpfSwyNTApfX0sdC5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIix0LnJlZi5oYW5kbGVDaGFuZ2UpfSxkZXN0cm95OmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdDt0LmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLHQucmVmLmhhbmRsZUNoYW5nZSl9LHdyaXRlOkEoe0RJRF9MT0FEX0lURU06Qm4sRElEX1JFTU9WRV9JVEVNOkJuLERJRF9USFJPV19JVEVNX0lOVkFMSUQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290O3QucXVlcnkoXCJHRVRfQ0hFQ0tfVkFMSURJVFlcIikmJnQuZWxlbWVudC5zZXRDdXN0b21WYWxpZGl0eSh0LnF1ZXJ5KFwiR0VUX0xBQkVMX0lOVkFMSURfRklFTERcIikpfSxESURfU0VUX0RJU0FCTEVEOk5uLERJRF9TRVRfQUxMT1dfQlJPV1NFOk5uLERJRF9TRVRfQUxMT1dfRElSRUNUT1JJRVNfT05MWTpDbixESURfU0VUX0FMTE9XX01VTFRJUExFOnduLERJRF9TRVRfQUNDRVBURURfRklMRV9UWVBFUzpNbixESURfU0VUX0NBUFRVUkVfTUVUSE9EOlVuLERJRF9TRVRfUkVRVUlSRUQ6R259KX0pLHFuPTEzLFZuPTMyLHhuPWZ1bmN0aW9uKGUsdCl7ZS5pbm5lckhUTUw9dDt2YXIgbj1lLnF1ZXJ5U2VsZWN0b3IoXCIuZmlsZXBvbmQtLWxhYmVsLWFjdGlvblwiKTtyZXR1cm4gbiYmcihuLFwidGFiaW5kZXhcIixcIjBcIiksdH0sWW49Uyh7bmFtZTpcImRyb3AtbGFiZWxcIixpZ25vcmVSZWN0OiEwLGNyZWF0ZTpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLnByb3BzLG89Q3QoXCJsYWJlbFwiKTtyKG8sXCJmb3JcIixcImZpbGVwb25kLS1icm93c2VyLVwiK24uaWQpLHIobyxcImlkXCIsXCJmaWxlcG9uZC0tZHJvcC1sYWJlbC1cIituLmlkKSxyKG8sXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKSx0LnJlZi5oYW5kbGVLZXlEb3duPWZ1bmN0aW9uKGUpeyhlLmtleUNvZGU9PT1xbnx8ZS5rZXlDb2RlPT09Vm4pJiYoZS5wcmV2ZW50RGVmYXVsdCgpLHQucmVmLmxhYmVsLmNsaWNrKCkpfSx0LnJlZi5oYW5kbGVDbGljaz1mdW5jdGlvbihlKXtlLnRhcmdldD09PW98fG8uY29udGFpbnMoZS50YXJnZXQpfHx0LnJlZi5sYWJlbC5jbGljaygpfSxvLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsdC5yZWYuaGFuZGxlS2V5RG93biksdC5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHQucmVmLmhhbmRsZUNsaWNrKSx4bihvLG4uY2FwdGlvbiksdC5hcHBlbmRDaGlsZChvKSx0LnJlZi5sYWJlbD1vfSxkZXN0cm95OmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdDt0LnJlZi5sYWJlbC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLHQucmVmLmhhbmRsZUtleURvd24pLHQuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0LnJlZi5oYW5kbGVDbGljayl9LHdyaXRlOkEoe0RJRF9TRVRfTEFCRUxfSURMRTpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLmFjdGlvbjt4bih0LnJlZi5sYWJlbCxuLnZhbHVlKX19KSxtaXhpbnM6e3N0eWxlczpbXCJvcGFjaXR5XCIsXCJ0cmFuc2xhdGVYXCIsXCJ0cmFuc2xhdGVZXCJdLGFuaW1hdGlvbnM6e29wYWNpdHk6e3R5cGU6XCJ0d2VlblwiLGR1cmF0aW9uOjE1MH0sdHJhbnNsYXRlWDpcInNwcmluZ1wiLHRyYW5zbGF0ZVk6XCJzcHJpbmdcIn19fSksa249Uyh7bmFtZTpcImRyaXAtYmxvYlwiLGlnbm9yZVJlY3Q6ITAsbWl4aW5zOntzdHlsZXM6W1widHJhbnNsYXRlWFwiLFwidHJhbnNsYXRlWVwiLFwic2NhbGVYXCIsXCJzY2FsZVlcIixcIm9wYWNpdHlcIl0sYW5pbWF0aW9uczp7c2NhbGVYOlwic3ByaW5nXCIsc2NhbGVZOlwic3ByaW5nXCIsdHJhbnNsYXRlWDpcInNwcmluZ1wiLHRyYW5zbGF0ZVk6XCJzcHJpbmdcIixvcGFjaXR5Ont0eXBlOlwidHdlZW5cIixkdXJhdGlvbjoyNTB9fX19KSxqbj1BKHtESURfRFJBRzpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLmFjdGlvbjt0LnJlZi5ibG9iPyh0LnJlZi5ibG9iLnRyYW5zbGF0ZVg9bi5wb3NpdGlvbi5zY29wZUxlZnQsdC5yZWYuYmxvYi50cmFuc2xhdGVZPW4ucG9zaXRpb24uc2NvcGVUb3AsdC5yZWYuYmxvYi5zY2FsZVg9MSx0LnJlZi5ibG9iLnNjYWxlWT0xLHQucmVmLmJsb2Iub3BhY2l0eT0xKTpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj0uNSp0LnJlY3QuZWxlbWVudC53aWR0aCxyPS41KnQucmVjdC5lbGVtZW50LmhlaWdodDt0LnJlZi5ibG9iPXQuYXBwZW5kQ2hpbGRWaWV3KHQuY3JlYXRlQ2hpbGRWaWV3KGtuLHtvcGFjaXR5OjAsc2NhbGVYOjIuNSxzY2FsZVk6Mi41LHRyYW5zbGF0ZVg6bix0cmFuc2xhdGVZOnJ9KSl9KHtyb290OnR9KX0sRElEX0RST1A6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290O3QucmVmLmJsb2ImJih0LnJlZi5ibG9iLnNjYWxlWD0yLjUsdC5yZWYuYmxvYi5zY2FsZVk9Mi41LHQucmVmLmJsb2Iub3BhY2l0eT0wKX0sRElEX0VORF9EUkFHOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdDt0LnJlZi5ibG9iJiYodC5yZWYuYmxvYi5vcGFjaXR5PTApfX0pLEhuPVMoe2lnbm9yZVJlY3Q6ITAsaWdub3JlUmVjdFVwZGF0ZTohMCxuYW1lOlwiZHJpcFwiLHdyaXRlOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUucHJvcHMscj1lLmFjdGlvbnM7am4oe3Jvb3Q6dCxwcm9wczpuLGFjdGlvbnM6cn0pO3ZhciBvPXQucmVmLmJsb2I7MD09PXIubGVuZ3RoJiZvJiYwPT09by5vcGFjaXR5JiYodC5yZW1vdmVDaGlsZFZpZXcobyksdC5yZWYuYmxvYj1udWxsKX19KSxYbj1mdW5jdGlvbihlLHQpe3RyeXt2YXIgbj1uZXcgRGF0YVRyYW5zZmVyO3QuZm9yRWFjaChmdW5jdGlvbihlKXtlIGluc3RhbmNlb2YgRmlsZT9uLml0ZW1zLmFkZChlKTpuLml0ZW1zLmFkZChuZXcgRmlsZShbZV0sZS5uYW1lLHt0eXBlOmUudHlwZX0pKX0pLGUuZmlsZXM9bi5maWxlc31jYXRjaChlKXtyZXR1cm4hMX1yZXR1cm4hMH0sV249ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5yZWYuZmllbGRzW3RdfSx6bj1mdW5jdGlvbihlKXtlLnF1ZXJ5KFwiR0VUX0FDVElWRV9JVEVNU1wiKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2UucmVmLmZpZWxkc1t0LmlkXSYmZS5lbGVtZW50LmFwcGVuZENoaWxkKGUucmVmLmZpZWxkc1t0LmlkXSl9KX0sUW49ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290O3JldHVybiB6bih0KX0sWm49QSh7RElEX1NFVF9ESVNBQkxFRDpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Q7dC5lbGVtZW50LmRpc2FibGVkPXQucXVlcnkoXCJHRVRfRElTQUJMRURcIil9LERJRF9BRERfSVRFTTpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLmFjdGlvbixyPSEodC5xdWVyeShcIkdFVF9JVEVNXCIsbi5pZCkub3JpZ2luPT09dmUuTE9DQUwpJiZ0LnF1ZXJ5KFwiU0hPVUxEX1VQREFURV9GSUxFX0lOUFVUXCIpLG89Q3QoXCJpbnB1dFwiKTtvLnR5cGU9cj9cImZpbGVcIjpcImhpZGRlblwiLG8ubmFtZT10LnF1ZXJ5KFwiR0VUX05BTUVcIiksby5kaXNhYmxlZD10LnF1ZXJ5KFwiR0VUX0RJU0FCTEVEXCIpLHQucmVmLmZpZWxkc1tuLmlkXT1vLHpuKHQpfSxESURfTE9BRF9JVEVNOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUuYWN0aW9uLHI9V24odCxuLmlkKTtpZihyJiYobnVsbCE9PW4uc2VydmVyRmlsZVJlZmVyZW5jZSYmKHIudmFsdWU9bi5zZXJ2ZXJGaWxlUmVmZXJlbmNlKSx0LnF1ZXJ5KFwiU0hPVUxEX1VQREFURV9GSUxFX0lOUFVUXCIpKSl7dmFyIG89dC5xdWVyeShcIkdFVF9JVEVNXCIsbi5pZCk7WG4ocixbby5maWxlXSl9fSxESURfUkVNT1ZFX0lURU06ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290LG49ZS5hY3Rpb24scj1Xbih0LG4uaWQpO3ImJihyLnBhcmVudE5vZGUmJnIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyKSxkZWxldGUgdC5yZWYuZmllbGRzW24uaWRdKX0sRElEX0RFRklORV9WQUxVRTpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLmFjdGlvbixyPVduKHQsbi5pZCk7ciYmKG51bGw9PT1uLnZhbHVlP3IucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik6ci52YWx1ZT1uLnZhbHVlLHpuKHQpKX0sRElEX1BSRVBBUkVfT1VUUFVUOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUuYWN0aW9uO3QucXVlcnkoXCJTSE9VTERfVVBEQVRFX0ZJTEVfSU5QVVRcIikmJnNldFRpbWVvdXQoZnVuY3Rpb24oKXt2YXIgZT1Xbih0LG4uaWQpO2UmJlhuKGUsW24uZmlsZV0pfSwwKX0sRElEX1JFT1JERVJfSVRFTVM6UW4sRElEX1NPUlRfSVRFTVM6UW59KSxLbj1TKHt0YWc6XCJmaWVsZHNldFwiLG5hbWU6XCJkYXRhXCIsY3JlYXRlOmZ1bmN0aW9uKGUpe3JldHVybiBlLnJvb3QucmVmLmZpZWxkcz17fX0sd3JpdGU6Wm4saWdub3JlUmVjdDohMH0pLCRuPVtcImpwZ1wiLFwianBlZ1wiLFwicG5nXCIsXCJnaWZcIixcImJtcFwiLFwid2VicFwiLFwic3ZnXCIsXCJ0aWZmXCJdLEpuPVtcImNzc1wiLFwiY3N2XCIsXCJodG1sXCIsXCJ0eHRcIl0sZXI9e3ppcDpcInppcHxjb21wcmVzc2VkXCIsZXB1YjpcImFwcGxpY2F0aW9uL2VwdWIremlwXCJ9LHRyPWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOlwiXCI7cmV0dXJuIGU9ZS50b0xvd2VyQ2FzZSgpLCRuLmluY2x1ZGVzKGUpP1wiaW1hZ2UvXCIrKFwianBnXCI9PT1lP1wianBlZ1wiOlwic3ZnXCI9PT1lP1wic3ZnK3htbFwiOmUpOkpuLmluY2x1ZGVzKGUpP1widGV4dC9cIitlOmVyW2VdfHxcIlwifSxucj1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24odCxuKXt2YXIgcj1kcihlKTtpZihyLmxlbmd0aCYmIXJyKGUpKXJldHVybiB0KHIpO29yKGUpLnRoZW4odCl9KX0scnI9ZnVuY3Rpb24oZSl7cmV0dXJuISFlLmZpbGVzJiZlLmZpbGVzLmxlbmd0aD4wfSxvcj1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24odCxuKXt2YXIgcj0oZS5pdGVtcz9BcnJheS5mcm9tKGUuaXRlbXMpOltdKS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGlyKGUpfSkubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBhcihlKX0pO3IubGVuZ3RoP1Byb21pc2UuYWxsKHIpLnRoZW4oZnVuY3Rpb24oZSl7dmFyIG49W107ZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe24ucHVzaC5hcHBseShuLGUpfSksdChuLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZX0pLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5fcmVsYXRpdmVQYXRofHwoZS5fcmVsYXRpdmVQYXRoPWUud2Via2l0UmVsYXRpdmVQYXRoKSxlfSkpfSkuY2F0Y2goY29uc29sZS5lcnJvcik6dChlLmZpbGVzP0FycmF5LmZyb20oZS5maWxlcyk6W10pfSl9LGlyPWZ1bmN0aW9uKGUpe2lmKGNyKGUpKXt2YXIgdD1mcihlKTtpZih0KXJldHVybiB0LmlzRmlsZXx8dC5pc0RpcmVjdG9yeX1yZXR1cm5cImZpbGVcIj09PWUua2luZH0sYXI9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHQsbil7bHIoZSk/c3IoZnIoZSkpLnRoZW4odCkuY2F0Y2gobik6dChbZS5nZXRBc0ZpbGUoKV0pfSl9LHNyPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbih0LG4pe3ZhciByPVtdLG89MCxpPTAsYT1mdW5jdGlvbigpezA9PT1pJiYwPT09byYmdChyKX07IWZ1bmN0aW9uIGUodCl7bysrO3ZhciBzPXQuY3JlYXRlUmVhZGVyKCk7IWZ1bmN0aW9uIHQoKXtzLnJlYWRFbnRyaWVzKGZ1bmN0aW9uKG4pe2lmKDA9PT1uLmxlbmd0aClyZXR1cm4gby0tLHZvaWQgYSgpO24uZm9yRWFjaChmdW5jdGlvbih0KXt0LmlzRGlyZWN0b3J5P2UodCk6KGkrKyx0LmZpbGUoZnVuY3Rpb24oZSl7dmFyIG49dXIoZSk7dC5mdWxsUGF0aCYmKG4uX3JlbGF0aXZlUGF0aD10LmZ1bGxQYXRoKSxyLnB1c2gobiksaS0tLGEoKX0pKX0pLHQoKX0sbil9KCl9KGUpfSl9LHVyPWZ1bmN0aW9uKGUpe2lmKGUudHlwZS5sZW5ndGgpcmV0dXJuIGU7dmFyIHQ9ZS5sYXN0TW9kaWZpZWREYXRlLG49ZS5uYW1lLHI9dHIoamUoZS5uYW1lKSk7cmV0dXJuIHIubGVuZ3RoPygoZT1lLnNsaWNlKDAsZS5zaXplLHIpKS5uYW1lPW4sZS5sYXN0TW9kaWZpZWREYXRlPXQsZSk6ZX0sbHI9ZnVuY3Rpb24oZSl7cmV0dXJuIGNyKGUpJiYoZnIoZSl8fHt9KS5pc0RpcmVjdG9yeX0sY3I9ZnVuY3Rpb24oZSl7cmV0dXJuXCJ3ZWJraXRHZXRBc0VudHJ5XCJpbiBlfSxmcj1mdW5jdGlvbihlKXtyZXR1cm4gZS53ZWJraXRHZXRBc0VudHJ5KCl9LGRyPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO3RyeXtpZigodD1FcihlKSkubGVuZ3RoKXJldHVybiB0O3Q9cHIoZSl9Y2F0Y2goZSl7fXJldHVybiB0fSxwcj1mdW5jdGlvbihlKXt2YXIgdD1lLmdldERhdGEoXCJ1cmxcIik7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQmJnQubGVuZ3RoP1t0XTpbXX0sRXI9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5nZXREYXRhKFwidGV4dC9odG1sXCIpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0JiZ0Lmxlbmd0aCl7dmFyIG49dC5tYXRjaCgvc3JjXFxzKj1cXHMqXCIoLis/KVwiLyk7aWYobilyZXR1cm5bblsxXV19cmV0dXJuW119LF9yPVtdLFRyPWZ1bmN0aW9uKGUpe3JldHVybntwYWdlTGVmdDplLnBhZ2VYLHBhZ2VUb3A6ZS5wYWdlWSxzY29wZUxlZnQ6ZS5vZmZzZXRYfHxlLmxheWVyWCxzY29wZVRvcDplLm9mZnNldFl8fGUubGF5ZXJZfX0sSXI9ZnVuY3Rpb24oZSl7dmFyIHQ9X3IuZmluZChmdW5jdGlvbih0KXtyZXR1cm4gdC5lbGVtZW50PT09ZX0pO2lmKHQpcmV0dXJuIHQ7dmFyIG49dnIoZSk7cmV0dXJuIF9yLnB1c2gobiksbn0sdnI9ZnVuY3Rpb24oZSl7dmFyIG49W10scj17ZHJhZ2VudGVyOlJyLGRyYWdvdmVyOk9yLGRyYWdsZWF2ZTpEcixkcm9wOnlyfSxvPXt9O3QocixmdW5jdGlvbih0LHIpe29bdF09cihlLG4pLGUuYWRkRXZlbnRMaXN0ZW5lcih0LG9bdF0sITEpfSk7dmFyIGk9e2VsZW1lbnQ6ZSxhZGRMaXN0ZW5lcjpmdW5jdGlvbihhKXtyZXR1cm4gbi5wdXNoKGEpLGZ1bmN0aW9uKCl7bi5zcGxpY2Uobi5pbmRleE9mKGEpLDEpLDA9PT1uLmxlbmd0aCYmKF9yLnNwbGljZShfci5pbmRleE9mKGkpLDEpLHQocixmdW5jdGlvbih0KXtlLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxvW3RdLCExKX0pKX19fTtyZXR1cm4gaX0sbXI9ZnVuY3Rpb24oZSx0KXt2YXIgbixyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJlbGVtZW50RnJvbVBvaW50XCJpbiBlfHwoZT1kb2N1bWVudCksZS5lbGVtZW50RnJvbVBvaW50KHQueCx0LnkpfShcImdldFJvb3ROb2RlXCJpbihuPXQpP24uZ2V0Um9vdE5vZGUoKTpkb2N1bWVudCx7eDplLnBhZ2VYLXdpbmRvdy5wYWdlWE9mZnNldCx5OmUucGFnZVktd2luZG93LnBhZ2VZT2Zmc2V0fSk7cmV0dXJuIHI9PT10fHx0LmNvbnRhaW5zKHIpfSxocj1udWxsLGdyPWZ1bmN0aW9uKGUsdCl7dHJ5e2UuZHJvcEVmZmVjdD10fWNhdGNoKGUpe319LFJyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSxocj1lLnRhcmdldCx0LmZvckVhY2goZnVuY3Rpb24odCl7dmFyIG49dC5lbGVtZW50LHI9dC5vbmVudGVyO21yKGUsbikmJih0LnN0YXRlPVwiZW50ZXJcIixyKFRyKGUpKSl9KX19LE9yPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKTt2YXIgbj1lLmRhdGFUcmFuc2ZlcjtucihuKS50aGVuKGZ1bmN0aW9uKHIpe3ZhciBvPSExO3Quc29tZShmdW5jdGlvbih0KXt2YXIgaT10LmZpbHRlckVsZW1lbnQsYT10LmVsZW1lbnQscz10Lm9uZW50ZXIsdT10Lm9uZXhpdCxsPXQub25kcmFnLGM9dC5hbGxvd2Ryb3A7Z3IobixcImNvcHlcIik7dmFyIGY9YyhyKTtpZihmKWlmKG1yKGUsYSkpe2lmKG89ITAsbnVsbD09PXQuc3RhdGUpcmV0dXJuIHQuc3RhdGU9XCJlbnRlclwiLHZvaWQgcyhUcihlKSk7aWYodC5zdGF0ZT1cIm92ZXJcIixpJiYhZilyZXR1cm4gdm9pZCBncihuLFwibm9uZVwiKTtsKFRyKGUpKX1lbHNlIGkmJiFvJiZncihuLFwibm9uZVwiKSx0LnN0YXRlJiYodC5zdGF0ZT1udWxsLHUoVHIoZSkpKTtlbHNlIGdyKG4sXCJub25lXCIpfSl9KX19LHlyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKTt2YXIgbj1lLmRhdGFUcmFuc2ZlcjtucihuKS50aGVuKGZ1bmN0aW9uKG4pe3QuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgcj10LmZpbHRlckVsZW1lbnQsbz10LmVsZW1lbnQsaT10Lm9uZHJvcCxhPXQub25leGl0LHM9dC5hbGxvd2Ryb3A7aWYodC5zdGF0ZT1udWxsLCFyfHxtcihlLG8pKXJldHVybiBzKG4pP3ZvaWQgaShUcihlKSxuKTphKFRyKGUpKX0pfSl9fSxEcj1mdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbihlKXtocj09PWUudGFyZ2V0JiZ0LmZvckVhY2goZnVuY3Rpb24odCl7dmFyIG49dC5vbmV4aXQ7dC5zdGF0ZT1udWxsLG4oVHIoZSkpfSl9fSxTcj1mdW5jdGlvbihlLHQsbil7ZS5jbGFzc0xpc3QuYWRkKFwiZmlsZXBvbmQtLWhvcHBlclwiKTt2YXIgcj1uLmNhdGNoZXNEcm9wc09uUGFnZSxvPW4ucmVxdWlyZXNEcm9wT25FbGVtZW50LGk9bi5maWx0ZXJJdGVtcyxhPXZvaWQgMD09PWk/ZnVuY3Rpb24oZSl7cmV0dXJuIGV9Omkscz1mdW5jdGlvbihlLHQsbil7dmFyIHI9SXIodCksbz17ZWxlbWVudDplLGZpbHRlckVsZW1lbnQ6bixzdGF0ZTpudWxsLG9uZHJvcDpmdW5jdGlvbigpe30sb25lbnRlcjpmdW5jdGlvbigpe30sb25kcmFnOmZ1bmN0aW9uKCl7fSxvbmV4aXQ6ZnVuY3Rpb24oKXt9LG9ubG9hZDpmdW5jdGlvbigpe30sYWxsb3dkcm9wOmZ1bmN0aW9uKCl7fX07cmV0dXJuIG8uZGVzdHJveT1yLmFkZExpc3RlbmVyKG8pLG99KGUscj9kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ6ZSxvKSx1PVwiXCIsbD1cIlwiO3MuYWxsb3dkcm9wPWZ1bmN0aW9uKGUpe3JldHVybiB0KGEoZSkpfSxzLm9uZHJvcD1mdW5jdGlvbihlLG4pe3ZhciByPWEobik7dChyKT8obD1cImRyYWctZHJvcFwiLGMub25sb2FkKHIsZSkpOmMub25kcmFnZW5kKGUpfSxzLm9uZHJhZz1mdW5jdGlvbihlKXtjLm9uZHJhZyhlKX0scy5vbmVudGVyPWZ1bmN0aW9uKGUpe2w9XCJkcmFnLW92ZXJcIixjLm9uZHJhZ3N0YXJ0KGUpfSxzLm9uZXhpdD1mdW5jdGlvbihlKXtsPVwiZHJhZy1leGl0XCIsYy5vbmRyYWdlbmQoZSl9O3ZhciBjPXt1cGRhdGVIb3BwZXJTdGF0ZTpmdW5jdGlvbigpe3UhPT1sJiYoZS5kYXRhc2V0LmhvcHBlclN0YXRlPWwsdT1sKX0sb25sb2FkOmZ1bmN0aW9uKCl7fSxvbmRyYWdzdGFydDpmdW5jdGlvbigpe30sb25kcmFnOmZ1bmN0aW9uKCl7fSxvbmRyYWdlbmQ6ZnVuY3Rpb24oKXt9LGRlc3Ryb3k6ZnVuY3Rpb24oKXtzLmRlc3Ryb3koKX19O3JldHVybiBjfSxBcj0hMSxMcj1bXSxicj1mdW5jdGlvbihlKXt2YXIgdD1kb2N1bWVudC5hY3RpdmVFbGVtZW50O2lmKHQmJi90ZXh0YXJlYXxpbnB1dC9pLnRlc3QodC5ub2RlTmFtZSkpe2Zvcih2YXIgbj0hMSxyPXQ7ciE9PWRvY3VtZW50LmJvZHk7KXtpZihyLmNsYXNzTGlzdC5jb250YWlucyhcImZpbGVwb25kLS1yb290XCIpKXtuPSEwO2JyZWFrfXI9ci5wYXJlbnROb2RlfWlmKCFuKXJldHVybn1ucihlLmNsaXBib2FyZERhdGEpLnRoZW4oZnVuY3Rpb24oZSl7ZS5sZW5ndGgmJkxyLmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIHQoZSl9KX0pfSxQcj1mdW5jdGlvbigpe3ZhciBlPWZ1bmN0aW9uKGUpe3Qub25sb2FkKGUpfSx0PXtkZXN0cm95OmZ1bmN0aW9uKCl7dmFyIHQ7dD1lLGRlKExyLExyLmluZGV4T2YodCkpLDA9PT1Mci5sZW5ndGgmJihkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicGFzdGVcIixiciksQXI9ITEpfSxvbmxvYWQ6ZnVuY3Rpb24oKXt9fTtyZXR1cm4gZnVuY3Rpb24oZSl7THIuaW5jbHVkZXMoZSl8fChMci5wdXNoKGUpLEFyfHwoQXI9ITAsZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBhc3RlXCIsYnIpKSl9KGUpLHR9LE1yPW51bGwsd3I9bnVsbCxDcj1bXSxOcj1mdW5jdGlvbihlLHQpe2UuZWxlbWVudC50ZXh0Q29udGVudD10fSxHcj1mdW5jdGlvbihlLHQsbil7dmFyIHI9ZS5xdWVyeShcIkdFVF9UT1RBTF9JVEVNU1wiKTtOcihlLG4rXCIgXCIrdCtcIiwgXCIrcitcIiBcIisoMT09PXI/ZS5xdWVyeShcIkdFVF9MQUJFTF9GSUxFX0NPVU5UX1NJTkdVTEFSXCIpOmUucXVlcnkoXCJHRVRfTEFCRUxfRklMRV9DT1VOVF9QTFVSQUxcIikpKSxjbGVhclRpbWVvdXQod3IpLHdyPXNldFRpbWVvdXQoZnVuY3Rpb24oKXshZnVuY3Rpb24oZSl7ZS5lbGVtZW50LnRleHRDb250ZW50PVwiXCJ9KGUpfSwxNTAwKX0sVXI9ZnVuY3Rpb24oZSl7cmV0dXJuIGUuZWxlbWVudC5wYXJlbnROb2RlLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpfSxCcj1mdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLmFjdGlvbixyPXQucXVlcnkoXCJHRVRfSVRFTVwiLG4uaWQpLmZpbGVuYW1lLG89dC5xdWVyeShcIkdFVF9MQUJFTF9GSUxFX1BST0NFU1NJTkdfQUJPUlRFRFwiKTtOcih0LHIrXCIgXCIrbyl9LEZyPWZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUuYWN0aW9uLHI9dC5xdWVyeShcIkdFVF9JVEVNXCIsbi5pZCkuZmlsZW5hbWU7TnIodCxuLnN0YXR1cy5tYWluK1wiIFwiK3IrXCIgXCIrbi5zdGF0dXMuc3ViKX0scXI9Uyh7Y3JlYXRlOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUucHJvcHM7dC5lbGVtZW50LmlkPVwiZmlsZXBvbmQtLWFzc2lzdGFudC1cIituLmlkLHIodC5lbGVtZW50LFwicm9sZVwiLFwic3RhdHVzXCIpLHIodC5lbGVtZW50LFwiYXJpYS1saXZlXCIsXCJwb2xpdGVcIikscih0LmVsZW1lbnQsXCJhcmlhLXJlbGV2YW50XCIsXCJhZGRpdGlvbnNcIil9LGlnbm9yZVJlY3Q6ITAsaWdub3JlUmVjdFVwZGF0ZTohMCx3cml0ZTpBKHtESURfTE9BRF9JVEVNOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdCxuPWUuYWN0aW9uO2lmKFVyKHQpKXt0LmVsZW1lbnQudGV4dENvbnRlbnQ9XCJcIjt2YXIgcj10LnF1ZXJ5KFwiR0VUX0lURU1cIixuLmlkKTtDci5wdXNoKHIuZmlsZW5hbWUpLGNsZWFyVGltZW91dChNciksTXI9c2V0VGltZW91dChmdW5jdGlvbigpe0dyKHQsQ3Iuam9pbihcIiwgXCIpLHQucXVlcnkoXCJHRVRfTEFCRUxfRklMRV9BRERFRFwiKSksQ3IubGVuZ3RoPTB9LDc1MCl9fSxESURfUkVNT1ZFX0lURU06ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290LG49ZS5hY3Rpb247aWYoVXIodCkpe3ZhciByPW4uaXRlbTtHcih0LHIuZmlsZW5hbWUsdC5xdWVyeShcIkdFVF9MQUJFTF9GSUxFX1JFTU9WRURcIikpfX0sRElEX0NPTVBMRVRFX0lURU1fUFJPQ0VTU0lORzpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLmFjdGlvbixyPXQucXVlcnkoXCJHRVRfSVRFTVwiLG4uaWQpLmZpbGVuYW1lLG89dC5xdWVyeShcIkdFVF9MQUJFTF9GSUxFX1BST0NFU1NJTkdfQ09NUExFVEVcIik7TnIodCxyK1wiIFwiK28pfSxESURfQUJPUlRfSVRFTV9QUk9DRVNTSU5HOkJyLERJRF9SRVZFUlRfSVRFTV9QUk9DRVNTSU5HOkJyLERJRF9USFJPV19JVEVNX1JFTU9WRV9FUlJPUjpGcixESURfVEhST1dfSVRFTV9MT0FEX0VSUk9SOkZyLERJRF9USFJPV19JVEVNX0lOVkFMSUQ6RnIsRElEX1RIUk9XX0lURU1fUFJPQ0VTU0lOR19FUlJPUjpGcn0pLHRhZzpcInNwYW5cIixuYW1lOlwiYXNzaXN0YW50XCJ9KSxWcj1mdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06XCItXCI7cmV0dXJuIGUucmVwbGFjZShuZXcgUmVnRXhwKHQrXCIuXCIsXCJnXCIpLGZ1bmN0aW9uKGUpe3JldHVybiBlLmNoYXJBdCgxKS50b1VwcGVyQ2FzZSgpfSl9LHhyPWZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXToxNixuPSEoYXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0pfHxhcmd1bWVudHNbMl0scj1EYXRlLm5vdygpLG89bnVsbDtyZXR1cm4gZnVuY3Rpb24oKXtmb3IodmFyIGk9YXJndW1lbnRzLmxlbmd0aCxhPW5ldyBBcnJheShpKSxzPTA7czxpO3MrKylhW3NdPWFyZ3VtZW50c1tzXTtjbGVhclRpbWVvdXQobyk7dmFyIHU9RGF0ZS5ub3coKS1yLGw9ZnVuY3Rpb24oKXtyPURhdGUubm93KCksZS5hcHBseSh2b2lkIDAsYSl9O3U8dD9ufHwobz1zZXRUaW1lb3V0KGwsdC11KSk6bCgpfX0sWXI9ZnVuY3Rpb24oZSl7cmV0dXJuIGUucHJldmVudERlZmF1bHQoKX0sa3I9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZWYubGlzdC5jaGlsZFZpZXdzWzBdLmNoaWxkVmlld3NbMF07cmV0dXJuIHQ/e3RvcDp0LnJlY3QuZWxlbWVudC5tYXJnaW5Ub3AsYm90dG9tOnQucmVjdC5lbGVtZW50Lm1hcmdpbkJvdHRvbX06e3RvcDowLGJvdHRvbTowfX0sanI9ZnVuY3Rpb24oZSl7dmFyIHQ9MCxuPTAscj1lLnJlZi5saXN0LG89ci5jaGlsZFZpZXdzWzBdLGk9by5jaGlsZFZpZXdzLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5yZWN0LmVsZW1lbnQuaGVpZ2h0fSksYT1lLnF1ZXJ5KFwiR0VUX0FDVElWRV9JVEVNU1wiKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGkuZmluZChmdW5jdGlvbih0KXtyZXR1cm4gdC5pZD09PWUuaWR9KX0pLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZX0pO2lmKDA9PT1hLmxlbmd0aClyZXR1cm57dmlzdWFsOnQsYm91bmRzOm59O3ZhciBzPW8ucmVjdC5lbGVtZW50LndpZHRoLHU9Z24obyxhLHIuZHJhZ0Nvb3JkaW5hdGVzKSxsPWFbMF0ucmVjdC5lbGVtZW50LGM9bC5tYXJnaW5Ub3ArbC5tYXJnaW5Cb3R0b20sZj1sLm1hcmdpbkxlZnQrbC5tYXJnaW5SaWdodCxkPWwud2lkdGgrZixwPWwuaGVpZ2h0K2MsRT12b2lkIDAhPT11JiZ1Pj0wPzE6MCxfPWEuZmluZChmdW5jdGlvbihlKXtyZXR1cm4gZS5tYXJrZWRGb3JSZW1vdmFsJiZlLm9wYWNpdHk8LjQ1fSk/LTE6MCxUPWEubGVuZ3RoK0UrXyxJPWhuKHMsZCk7cmV0dXJuIDE9PT1JP2EuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgcj1lLnJlY3QuZWxlbWVudC5oZWlnaHQrYztuKz1yLHQrPXIqZS5vcGFjaXR5fSk6KG49TWF0aC5jZWlsKFQvSSkqcCx0PW4pLHt2aXN1YWw6dCxib3VuZHM6bn19LEhyPWZ1bmN0aW9uKGUpe3ZhciB0PWUucmVmLm1lYXN1cmVIZWlnaHR8fG51bGw7cmV0dXJue2NhcHBlZEhlaWdodDpwYXJzZUludChlLnN0eWxlLm1heEhlaWdodCwxMCl8fG51bGwsZml4ZWRIZWlnaHQ6MD09PXQ/bnVsbDp0fX0sWHI9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLnF1ZXJ5KFwiR0VUX0FMTE9XX1JFUExBQ0VcIikscj1lLnF1ZXJ5KFwiR0VUX0FMTE9XX01VTFRJUExFXCIpLG89ZS5xdWVyeShcIkdFVF9UT1RBTF9JVEVNU1wiKSxpPWUucXVlcnkoXCJHRVRfTUFYX0ZJTEVTXCIpLGE9dC5sZW5ndGg7cmV0dXJuIXImJmE+MXx8ISEoVihpPXI/aTpuP2k6MSkmJm8rYT5pKSYmKGUuZGlzcGF0Y2goXCJESURfVEhST1dfTUFYX0ZJTEVTXCIse3NvdXJjZTp0LGVycm9yOm90KFwid2FybmluZ1wiLDAsXCJNYXggZmlsZXNcIil9KSwhMCl9LFdyPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1lLmNoaWxkVmlld3NbMF07cmV0dXJuIGduKHIsdCx7bGVmdDpuLnNjb3BlTGVmdC1yLnJlY3QuZWxlbWVudC5sZWZ0LHRvcDpuLnNjb3BlVG9wLShlLnJlY3Qub3V0ZXIudG9wK2UucmVjdC5lbGVtZW50Lm1hcmdpblRvcCtlLnJlY3QuZWxlbWVudC5zY3JvbGxUb3ApfSl9LHpyPWZ1bmN0aW9uKGUpe3ZhciB0PWUucXVlcnkoXCJHRVRfQUxMT1dfRFJPUFwiKSxuPWUucXVlcnkoXCJHRVRfRElTQUJMRURcIikscj10JiYhbjtpZihyJiYhZS5yZWYuaG9wcGVyKXt2YXIgbz1TcihlLmVsZW1lbnQsZnVuY3Rpb24odCl7dmFyIG49ZS5xdWVyeShcIkdFVF9CRUZPUkVfRFJPUF9GSUxFXCIpfHxmdW5jdGlvbigpe3JldHVybiEwfTtyZXR1cm4hZS5xdWVyeShcIkdFVF9EUk9QX1ZBTElEQVRJT05cIil8fHQuZXZlcnkoZnVuY3Rpb24odCl7cmV0dXJuIHllKFwiQUxMT1dfSE9QUEVSX0lURU1cIix0LHtxdWVyeTplLnF1ZXJ5fSkuZXZlcnkoZnVuY3Rpb24oZSl7cmV0dXJuITA9PT1lfSkmJm4odCl9KX0se2ZpbHRlckl0ZW1zOmZ1bmN0aW9uKHQpe3ZhciBuPWUucXVlcnkoXCJHRVRfSUdOT1JFRF9GSUxFU1wiKTtyZXR1cm4gdC5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIWh0KGUpfHwhbi5pbmNsdWRlcyhlLm5hbWUudG9Mb3dlckNhc2UoKSl9KX0sY2F0Y2hlc0Ryb3BzT25QYWdlOmUucXVlcnkoXCJHRVRfRFJPUF9PTl9QQUdFXCIpLHJlcXVpcmVzRHJvcE9uRWxlbWVudDplLnF1ZXJ5KFwiR0VUX0RST1BfT05fRUxFTUVOVFwiKX0pO28ub25sb2FkPWZ1bmN0aW9uKHQsbil7dmFyIHI9ZS5yZWYubGlzdC5jaGlsZFZpZXdzWzBdLmNoaWxkVmlld3MuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLnJlY3QuZWxlbWVudC5oZWlnaHR9KSxvPWUucXVlcnkoXCJHRVRfQUNUSVZFX0lURU1TXCIpLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gci5maW5kKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlkPT09ZS5pZH0pfSkuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlfSk7T2UoXCJBRERfSVRFTVNcIix0LHtkaXNwYXRjaDplLmRpc3BhdGNofSkudGhlbihmdW5jdGlvbih0KXtpZihYcihlLHQpKXJldHVybiExO2UuZGlzcGF0Y2goXCJBRERfSVRFTVNcIix7aXRlbXM6dCxpbmRleDpXcihlLnJlZi5saXN0LG8sbiksaW50ZXJhY3Rpb25NZXRob2Q6ZWV9KX0pLGUuZGlzcGF0Y2goXCJESURfRFJPUFwiLHtwb3NpdGlvbjpufSksZS5kaXNwYXRjaChcIkRJRF9FTkRfRFJBR1wiLHtwb3NpdGlvbjpufSl9LG8ub25kcmFnc3RhcnQ9ZnVuY3Rpb24odCl7ZS5kaXNwYXRjaChcIkRJRF9TVEFSVF9EUkFHXCIse3Bvc2l0aW9uOnR9KX0sby5vbmRyYWc9eHIoZnVuY3Rpb24odCl7ZS5kaXNwYXRjaChcIkRJRF9EUkFHXCIse3Bvc2l0aW9uOnR9KX0pLG8ub25kcmFnZW5kPWZ1bmN0aW9uKHQpe2UuZGlzcGF0Y2goXCJESURfRU5EX0RSQUdcIix7cG9zaXRpb246dH0pfSxlLnJlZi5ob3BwZXI9byxlLnJlZi5kcmlwPWUuYXBwZW5kQ2hpbGRWaWV3KGUuY3JlYXRlQ2hpbGRWaWV3KEhuKSl9ZWxzZSFyJiZlLnJlZi5ob3BwZXImJihlLnJlZi5ob3BwZXIuZGVzdHJveSgpLGUucmVmLmhvcHBlcj1udWxsLGUucmVtb3ZlQ2hpbGRWaWV3KGUucmVmLmRyaXApKX0sUXI9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLnF1ZXJ5KFwiR0VUX0FMTE9XX0JST1dTRVwiKSxyPWUucXVlcnkoXCJHRVRfRElTQUJMRURcIiksbz1uJiYhcjtvJiYhZS5yZWYuYnJvd3Nlcj9lLnJlZi5icm93c2VyPWUuYXBwZW5kQ2hpbGRWaWV3KGUuY3JlYXRlQ2hpbGRWaWV3KEZuLE9iamVjdC5hc3NpZ24oe30sdCx7b25sb2FkOmZ1bmN0aW9uKHQpe09lKFwiQUREX0lURU1TXCIsdCx7ZGlzcGF0Y2g6ZS5kaXNwYXRjaH0pLnRoZW4oZnVuY3Rpb24odCl7aWYoWHIoZSx0KSlyZXR1cm4hMTtlLmRpc3BhdGNoKFwiQUREX0lURU1TXCIse2l0ZW1zOnQsaW5kZXg6LTEsaW50ZXJhY3Rpb25NZXRob2Q6dGV9KX0pfX0pKSwwKTohbyYmZS5yZWYuYnJvd3NlciYmKGUucmVtb3ZlQ2hpbGRWaWV3KGUucmVmLmJyb3dzZXIpLGUucmVmLmJyb3dzZXI9bnVsbCl9LFpyPWZ1bmN0aW9uKGUpe3ZhciB0PWUucXVlcnkoXCJHRVRfQUxMT1dfUEFTVEVcIiksbj1lLnF1ZXJ5KFwiR0VUX0RJU0FCTEVEXCIpLHI9dCYmIW47ciYmIWUucmVmLnBhc3Rlcj8oZS5yZWYucGFzdGVyPVByKCksZS5yZWYucGFzdGVyLm9ubG9hZD1mdW5jdGlvbih0KXtPZShcIkFERF9JVEVNU1wiLHQse2Rpc3BhdGNoOmUuZGlzcGF0Y2h9KS50aGVuKGZ1bmN0aW9uKHQpe2lmKFhyKGUsdCkpcmV0dXJuITE7ZS5kaXNwYXRjaChcIkFERF9JVEVNU1wiLHtpdGVtczp0LGluZGV4Oi0xLGludGVyYWN0aW9uTWV0aG9kOm5lfSl9KX0pOiFyJiZlLnJlZi5wYXN0ZXImJihlLnJlZi5wYXN0ZXIuZGVzdHJveSgpLGUucmVmLnBhc3Rlcj1udWxsKX0sS3I9QSh7RElEX1NFVF9BTExPV19CUk9XU0U6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290LG49ZS5wcm9wcztRcih0LG4pfSxESURfU0VUX0FMTE9XX0RST1A6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290O3pyKHQpfSxESURfU0VUX0FMTE9XX1BBU1RFOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdDtacih0KX0sRElEX1NFVF9ESVNBQkxFRDpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLnByb3BzO3pyKHQpLFpyKHQpLFFyKHQsbiksdC5xdWVyeShcIkdFVF9ESVNBQkxFRFwiKT90LmVsZW1lbnQuZGF0YXNldC5kaXNhYmxlZD1cImRpc2FibGVkXCI6dC5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtZGlzYWJsZWRcIil9fSksJHI9Uyh7bmFtZTpcInJvb3RcIixyZWFkOmZ1bmN0aW9uKGUpe3ZhciB0PWUucm9vdDt0LnJlZi5tZWFzdXJlJiYodC5yZWYubWVhc3VyZUhlaWdodD10LnJlZi5tZWFzdXJlLm9mZnNldEhlaWdodCl9LGNyZWF0ZTpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Qsbj1lLnByb3BzLHI9dC5xdWVyeShcIkdFVF9JRFwiKTtyJiYodC5lbGVtZW50LmlkPXIpO3ZhciBvPXQucXVlcnkoXCJHRVRfQ0xBU1NfTkFNRVwiKTtvJiZvLnNwbGl0KFwiIFwiKS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUubGVuZ3RofSkuZm9yRWFjaChmdW5jdGlvbihlKXt0LmVsZW1lbnQuY2xhc3NMaXN0LmFkZChlKX0pLHQucmVmLmxhYmVsPXQuYXBwZW5kQ2hpbGRWaWV3KHQuY3JlYXRlQ2hpbGRWaWV3KFluLE9iamVjdC5hc3NpZ24oe30sbix7dHJhbnNsYXRlWTpudWxsLGNhcHRpb246dC5xdWVyeShcIkdFVF9MQUJFTF9JRExFXCIpfSkpKSx0LnJlZi5saXN0PXQuYXBwZW5kQ2hpbGRWaWV3KHQuY3JlYXRlQ2hpbGRWaWV3KGJuLHt0cmFuc2xhdGVZOm51bGx9KSksdC5yZWYucGFuZWw9dC5hcHBlbmRDaGlsZFZpZXcodC5jcmVhdGVDaGlsZFZpZXcoRW4se25hbWU6XCJwYW5lbC1yb290XCJ9KSksdC5yZWYuYXNzaXN0YW50PXQuYXBwZW5kQ2hpbGRWaWV3KHQuY3JlYXRlQ2hpbGRWaWV3KHFyLE9iamVjdC5hc3NpZ24oe30sbikpKSx0LnJlZi5kYXRhPXQuYXBwZW5kQ2hpbGRWaWV3KHQuY3JlYXRlQ2hpbGRWaWV3KEtuLE9iamVjdC5hc3NpZ24oe30sbikpKSx0LnJlZi5tZWFzdXJlPUN0KFwiZGl2XCIpLHQucmVmLm1lYXN1cmUuc3R5bGUuaGVpZ2h0PVwiMTAwJVwiLHQuZWxlbWVudC5hcHBlbmRDaGlsZCh0LnJlZi5tZWFzdXJlKSx0LnJlZi5ib3VuZHM9bnVsbCx0LnF1ZXJ5KFwiR0VUX1NUWUxFU1wiKS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIU0oZS52YWx1ZSl9KS5tYXAoZnVuY3Rpb24oZSl7dmFyIG49ZS5uYW1lLHI9ZS52YWx1ZTt0LmVsZW1lbnQuZGF0YXNldFtuXT1yfSksdC5yZWYud2lkdGhQcmV2aW91cz1udWxsLHQucmVmLndpZHRoVXBkYXRlZD14cihmdW5jdGlvbigpe3QucmVmLnVwZGF0ZUhpc3Rvcnk9W10sdC5kaXNwYXRjaChcIkRJRF9SRVNJWkVfUk9PVFwiKX0sMjUwKSx0LnJlZi5wcmV2aW91c0FzcGVjdFJhdGlvPW51bGwsdC5yZWYudXBkYXRlSGlzdG9yeT1bXTt2YXIgaT13aW5kb3cubWF0Y2hNZWRpYShcIihwb2ludGVyOiBmaW5lKSBhbmQgKGhvdmVyOiBob3ZlcilcIikubWF0Y2hlcyxhPVwiUG9pbnRlckV2ZW50XCJpbiB3aW5kb3c7dC5xdWVyeShcIkdFVF9BTExPV19SRU9SREVSXCIpJiZhJiYhaSYmKHQuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsWXIse3Bhc3NpdmU6ITF9KSx0LmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImdlc3R1cmVzdGFydFwiLFlyKSk7dmFyIHM9dC5xdWVyeShcIkdFVF9DUkVESVRTXCIpO2lmKDI9PT1zLmxlbmd0aCl7dmFyIHU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7dS5jbGFzc05hbWU9XCJmaWxlcG9uZC0tY3JlZGl0c1wiLHUuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIixcInRydWVcIiksdS5ocmVmPXNbMF0sdS50YWJpbmRleD0tMSx1LnRhcmdldD1cIl9ibGFua1wiLHUucmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiLHUudGV4dENvbnRlbnQ9c1sxXSx0LmVsZW1lbnQuYXBwZW5kQ2hpbGQodSksdC5yZWYuY3JlZGl0cz11fX0sd3JpdGU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yb290LG49ZS5wcm9wcyxyPWUuYWN0aW9ucztpZihLcih7cm9vdDp0LHByb3BzOm4sYWN0aW9uczpyfSksci5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuL15ESURfU0VUX1NUWUxFXy8udGVzdChlLnR5cGUpfSkuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiFNKGUuZGF0YS52YWx1ZSl9KS5tYXAoZnVuY3Rpb24oZSl7dmFyIG49ZS50eXBlLHI9ZS5kYXRhLG89VnIobi5zdWJzdHIoOCkudG9Mb3dlckNhc2UoKSxcIl9cIik7dC5lbGVtZW50LmRhdGFzZXRbb109ci52YWx1ZSx0LmludmFsaWRhdGVMYXlvdXQoKX0pLCF0LnJlY3QuZWxlbWVudC5oaWRkZW4pe3QucmVjdC5lbGVtZW50LndpZHRoIT09dC5yZWYud2lkdGhQcmV2aW91cyYmKHQucmVmLndpZHRoUHJldmlvdXM9dC5yZWN0LmVsZW1lbnQud2lkdGgsdC5yZWYud2lkdGhVcGRhdGVkKCkpO3ZhciBvPXQucmVmLmJvdW5kcztvfHwobz10LnJlZi5ib3VuZHM9SHIodCksdC5lbGVtZW50LnJlbW92ZUNoaWxkKHQucmVmLm1lYXN1cmUpLHQucmVmLm1lYXN1cmU9bnVsbCk7dmFyIGk9dC5yZWYsYT1pLmhvcHBlcixzPWkubGFiZWwsdT1pLmxpc3QsbD1pLnBhbmVsO2EmJmEudXBkYXRlSG9wcGVyU3RhdGUoKTt2YXIgYz10LnF1ZXJ5KFwiR0VUX1BBTkVMX0FTUEVDVF9SQVRJT1wiKSxmPXQucXVlcnkoXCJHRVRfQUxMT1dfTVVMVElQTEVcIiksZD10LnF1ZXJ5KFwiR0VUX1RPVEFMX0lURU1TXCIpLHA9ZD09PShmP3QucXVlcnkoXCJHRVRfTUFYX0ZJTEVTXCIpfHwxZTY6MSksRT1yLmZpbmQoZnVuY3Rpb24oZSl7cmV0dXJuXCJESURfQUREX0lURU1cIj09PWUudHlwZX0pO2lmKHAmJkUpe3ZhciBfPUUuZGF0YS5pbnRlcmFjdGlvbk1ldGhvZDtzLm9wYWNpdHk9MCxmP3MudHJhbnNsYXRlWT0tNDA6Xz09PUo/cy50cmFuc2xhdGVYPTQwOnMudHJhbnNsYXRlWT1fPT09dGU/NDA6MzB9ZWxzZSBwfHwocy5vcGFjaXR5PTEscy50cmFuc2xhdGVYPTAscy50cmFuc2xhdGVZPTApO3ZhciBUPWtyKHQpLEk9anIodCksdj1zLnJlY3QuZWxlbWVudC5oZWlnaHQsbT0hZnx8cD8wOnYsaD1wP3UucmVjdC5lbGVtZW50Lm1hcmdpblRvcDowLGc9MD09PWQ/MDp1LnJlY3QuZWxlbWVudC5tYXJnaW5Cb3R0b20sUj1tK2grSS52aXN1YWwrZyxPPW0raCtJLmJvdW5kcytnO2lmKHUudHJhbnNsYXRlWT1NYXRoLm1heCgwLG0tdS5yZWN0LmVsZW1lbnQubWFyZ2luVG9wKS1ULnRvcCxjKXt2YXIgeT10LnJlY3QuZWxlbWVudC53aWR0aCxEPXkqYztjIT09dC5yZWYucHJldmlvdXNBc3BlY3RSYXRpbyYmKHQucmVmLnByZXZpb3VzQXNwZWN0UmF0aW89Yyx0LnJlZi51cGRhdGVIaXN0b3J5PVtdKTt2YXIgUz10LnJlZi51cGRhdGVIaXN0b3J5O2lmKFMucHVzaCh5KSxTLmxlbmd0aD40KWZvcih2YXIgQT1TLmxlbmd0aCxMPUEtMTAsYj0wLFA9QTtQPj1MO1AtLSlpZihTW1BdPT09U1tQLTJdJiZiKyssYj49MilyZXR1cm47bC5zY2FsYWJsZT0hMSxsLmhlaWdodD1EO3ZhciB3PUQtbS0oZy1ULmJvdHRvbSktKHA/aDowKTtJLnZpc3VhbD53P3Uub3ZlcmZsb3c9dzp1Lm92ZXJmbG93PW51bGwsdC5oZWlnaHQ9RH1lbHNlIGlmKG8uZml4ZWRIZWlnaHQpe2wuc2NhbGFibGU9ITE7dmFyIEM9by5maXhlZEhlaWdodC1tLShnLVQuYm90dG9tKS0ocD9oOjApO0kudmlzdWFsPkM/dS5vdmVyZmxvdz1DOnUub3ZlcmZsb3c9bnVsbH1lbHNlIGlmKG8uY2FwcGVkSGVpZ2h0KXt2YXIgTj1SPj1vLmNhcHBlZEhlaWdodCxHPU1hdGgubWluKG8uY2FwcGVkSGVpZ2h0LFIpO2wuc2NhbGFibGU9ITAsbC5oZWlnaHQ9Tj9HOkctVC50b3AtVC5ib3R0b207dmFyIFU9Ry1tLShnLVQuYm90dG9tKS0ocD9oOjApO1I+by5jYXBwZWRIZWlnaHQmJkkudmlzdWFsPlU/dS5vdmVyZmxvdz1VOnUub3ZlcmZsb3c9bnVsbCx0LmhlaWdodD1NYXRoLm1pbihvLmNhcHBlZEhlaWdodCxPLVQudG9wLVQuYm90dG9tKX1lbHNle3ZhciBCPWQ+MD9ULnRvcCtULmJvdHRvbTowO2wuc2NhbGFibGU9ITAsbC5oZWlnaHQ9TWF0aC5tYXgodixSLUIpLHQuaGVpZ2h0PU1hdGgubWF4KHYsTy1CKX10LnJlZi5jcmVkaXRzJiZsLmhlaWdodEN1cnJlbnQmJih0LnJlZi5jcmVkaXRzLnN0eWxlLnRyYW5zZm9ybT1cInRyYW5zbGF0ZVkoXCIrbC5oZWlnaHRDdXJyZW50K1wicHgpXCIpfX0sZGVzdHJveTpmdW5jdGlvbihlKXt2YXIgdD1lLnJvb3Q7dC5yZWYucGFzdGVyJiZ0LnJlZi5wYXN0ZXIuZGVzdHJveSgpLHQucmVmLmhvcHBlciYmdC5yZWYuaG9wcGVyLmRlc3Ryb3koKSx0LmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLFlyKSx0LmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImdlc3R1cmVzdGFydFwiLFlyKX0sbWl4aW5zOntzdHlsZXM6W1wiaGVpZ2h0XCJdfX0pLEpyPWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LHI9bnVsbCxvPVNlKCksaT1mdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06W10sbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06W10scj1PYmplY3QuYXNzaWduKHt9LGUpLG89W10saT1bXSxhPWZ1bmN0aW9uKGUsdCxuKXshbnx8ZG9jdW1lbnQuaGlkZGVuPyhjW2VdJiZjW2VdKHQpLG8ucHVzaCh7dHlwZTplLGRhdGE6dH0pKTppLnB1c2goe3R5cGU6ZSxkYXRhOnR9KX0scz1mdW5jdGlvbihlKXtmb3IodmFyIHQsbj1hcmd1bWVudHMubGVuZ3RoLHI9bmV3IEFycmF5KG4+MT9uLTE6MCksbz0xO288bjtvKyspcltvLTFdPWFyZ3VtZW50c1tvXTtyZXR1cm4gbFtlXT8odD1sKVtlXS5hcHBseSh0LHIpOm51bGx9LHU9e2dldFN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5hc3NpZ24oe30scil9LHByb2Nlc3NBY3Rpb25RdWV1ZTpmdW5jdGlvbigpe3ZhciBlPVtdLmNvbmNhdChvKTtyZXR1cm4gby5sZW5ndGg9MCxlfSxwcm9jZXNzRGlzcGF0Y2hRdWV1ZTpmdW5jdGlvbigpe3ZhciBlPVtdLmNvbmNhdChpKTtpLmxlbmd0aD0wLGUuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1lLnR5cGUsbj1lLmRhdGE7YSh0LG4pfSl9LGRpc3BhdGNoOmEscXVlcnk6c30sbD17fTt0LmZvckVhY2goZnVuY3Rpb24oZSl7bD1PYmplY3QuYXNzaWduKHt9LGUocikse30sbCl9KTt2YXIgYz17fTtyZXR1cm4gbi5mb3JFYWNoKGZ1bmN0aW9uKGUpe2M9T2JqZWN0LmFzc2lnbih7fSxlKGEscyxyKSx7fSxjKX0pLHV9KHtpdGVtczpbXSxsaXN0VXBkYXRlVGltZW91dDpudWxsLGl0ZW1VcGRhdGVUaW1lb3V0Om51bGwscHJvY2Vzc2luZ1F1ZXVlOltdLG9wdGlvbnM6UShvKX0sW1ZlLCQobyldLFtQdCxLKG8pXSk7aS5kaXNwYXRjaChcIlNFVF9PUFRJT05TXCIse29wdGlvbnM6ZX0pO3ZhciBhPWZ1bmN0aW9uKCl7ZG9jdW1lbnQuaGlkZGVufHxpLmRpc3BhdGNoKFwiS0lDS1wiKX07ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIixhKTt2YXIgcz1udWxsLHU9ITEsbD0hMSxjPW51bGwsZj1udWxsLGQ9ZnVuY3Rpb24oKXt1fHwodT0hMCksY2xlYXJUaW1lb3V0KHMpLHM9c2V0VGltZW91dChmdW5jdGlvbigpe3U9ITEsYz1udWxsLGY9bnVsbCxsJiYobD0hMSxpLmRpc3BhdGNoKFwiRElEX1NUT1BfUkVTSVpFXCIpKX0sNTAwKX07d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixkKTt2YXIgcD0kcihpLHtpZDpvZSgpfSksRT0hMSxUPSExLEk9e19yZWFkOmZ1bmN0aW9uKCl7dSYmKGY9d2luZG93LmlubmVyV2lkdGgsY3x8KGM9ZiksbHx8Zj09PWN8fChpLmRpc3BhdGNoKFwiRElEX1NUQVJUX1JFU0laRVwiKSxsPSEwKSksVCYmRSYmKEU9bnVsbD09PXAuZWxlbWVudC5vZmZzZXRQYXJlbnQpLEV8fChwLl9yZWFkKCksVD1wLnJlY3QuZWxlbWVudC5oaWRkZW4pfSxfd3JpdGU6ZnVuY3Rpb24oZSl7dmFyIHQsbj1pLnByb2Nlc3NBY3Rpb25RdWV1ZSgpLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4hL15TRVRfLy50ZXN0KGUudHlwZSl9KTtFJiYhbi5sZW5ndGh8fChnKG4pLEU9cC5fd3JpdGUoZSxuLGwpLCh0PWkucXVlcnkoXCJHRVRfSVRFTVNcIikpLmZvckVhY2goZnVuY3Rpb24oZSxuKXtlLnJlbGVhc2VkJiZkZSh0LG4pfSksRSYmaS5wcm9jZXNzRGlzcGF0Y2hRdWV1ZSgpKX19LHY9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBuPXt0eXBlOmV9O2lmKCF0KXJldHVybiBuO2lmKHQuaGFzT3duUHJvcGVydHkoXCJlcnJvclwiKSYmKG4uZXJyb3I9dC5lcnJvcj9PYmplY3QuYXNzaWduKHt9LHQuZXJyb3IpOm51bGwpLHQuc3RhdHVzJiYobi5zdGF0dXM9T2JqZWN0LmFzc2lnbih7fSx0LnN0YXR1cykpLHQuZmlsZSYmKG4ub3V0cHV0PXQuZmlsZSksdC5zb3VyY2Upbi5maWxlPXQuc291cmNlO2Vsc2UgaWYodC5pdGVtfHx0LmlkKXt2YXIgcj10Lml0ZW0/dC5pdGVtOmkucXVlcnkoXCJHRVRfSVRFTVwiLHQuaWQpO24uZmlsZT1yP1RlKHIpOm51bGx9cmV0dXJuIHQuaXRlbXMmJihuLml0ZW1zPXQuaXRlbXMubWFwKFRlKSksL3Byb2dyZXNzLy50ZXN0KGUpJiYobi5wcm9ncmVzcz10LnByb2dyZXNzKSx0Lmhhc093blByb3BlcnR5KFwib3JpZ2luXCIpJiZ0Lmhhc093blByb3BlcnR5KFwidGFyZ2V0XCIpJiYobi5vcmlnaW49dC5vcmlnaW4sbi50YXJnZXQ9dC50YXJnZXQpLG59fSxtPXtESURfREVTVFJPWTp2KFwiZGVzdHJveVwiKSxESURfSU5JVDp2KFwiaW5pdFwiKSxESURfVEhST1dfTUFYX0ZJTEVTOnYoXCJ3YXJuaW5nXCIpLERJRF9JTklUX0lURU06dihcImluaXRmaWxlXCIpLERJRF9TVEFSVF9JVEVNX0xPQUQ6dihcImFkZGZpbGVzdGFydFwiKSxESURfVVBEQVRFX0lURU1fTE9BRF9QUk9HUkVTUzp2KFwiYWRkZmlsZXByb2dyZXNzXCIpLERJRF9MT0FEX0lURU06dihcImFkZGZpbGVcIiksRElEX1RIUk9XX0lURU1fSU5WQUxJRDpbdihcImVycm9yXCIpLHYoXCJhZGRmaWxlXCIpXSxESURfVEhST1dfSVRFTV9MT0FEX0VSUk9SOlt2KFwiZXJyb3JcIiksdihcImFkZGZpbGVcIildLERJRF9USFJPV19JVEVNX1JFTU9WRV9FUlJPUjpbdihcImVycm9yXCIpLHYoXCJyZW1vdmVmaWxlXCIpXSxESURfUFJFUEFSRV9PVVRQVVQ6dihcInByZXBhcmVmaWxlXCIpLERJRF9TVEFSVF9JVEVNX1BST0NFU1NJTkc6dihcInByb2Nlc3NmaWxlc3RhcnRcIiksRElEX1VQREFURV9JVEVNX1BST0NFU1NfUFJPR1JFU1M6dihcInByb2Nlc3NmaWxlcHJvZ3Jlc3NcIiksRElEX0FCT1JUX0lURU1fUFJPQ0VTU0lORzp2KFwicHJvY2Vzc2ZpbGVhYm9ydFwiKSxESURfQ09NUExFVEVfSVRFTV9QUk9DRVNTSU5HOnYoXCJwcm9jZXNzZmlsZVwiKSxESURfQ09NUExFVEVfSVRFTV9QUk9DRVNTSU5HX0FMTDp2KFwicHJvY2Vzc2ZpbGVzXCIpLERJRF9SRVZFUlRfSVRFTV9QUk9DRVNTSU5HOnYoXCJwcm9jZXNzZmlsZXJldmVydFwiKSxESURfVEhST1dfSVRFTV9QUk9DRVNTSU5HX0VSUk9SOlt2KFwiZXJyb3JcIiksdihcInByb2Nlc3NmaWxlXCIpXSxESURfUkVNT1ZFX0lURU06dihcInJlbW92ZWZpbGVcIiksRElEX1VQREFURV9JVEVNUzp2KFwidXBkYXRlZmlsZXNcIiksRElEX0FDVElWQVRFX0lURU06dihcImFjdGl2YXRlZmlsZVwiKSxESURfUkVPUkRFUl9JVEVNUzp2KFwicmVvcmRlcmZpbGVzXCIpfSxoPWZ1bmN0aW9uKGUpe3ZhciB0PU9iamVjdC5hc3NpZ24oe3BvbmQ6QX0sZSk7ZGVsZXRlIHQudHlwZSxwLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJGaWxlUG9uZDpcIitlLnR5cGUse2RldGFpbDp0LGJ1YmJsZXM6ITAsY2FuY2VsYWJsZTohMCxjb21wb3NlZDohMH0pKTt2YXIgbj1bXTtlLmhhc093blByb3BlcnR5KFwiZXJyb3JcIikmJm4ucHVzaChlLmVycm9yKSxlLmhhc093blByb3BlcnR5KFwiZmlsZVwiKSYmbi5wdXNoKGUuZmlsZSk7dmFyIHI9W1widHlwZVwiLFwiZXJyb3JcIixcImZpbGVcIl07T2JqZWN0LmtleXMoZSkuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiFyLmluY2x1ZGVzKGUpfSkuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gbi5wdXNoKGVbdF0pfSksQS5maXJlLmFwcGx5KEEsW2UudHlwZV0uY29uY2F0KG4pKTt2YXIgbz1pLnF1ZXJ5KFwiR0VUX09OXCIrZS50eXBlLnRvVXBwZXJDYXNlKCkpO28mJm8uYXBwbHkodm9pZCAwLG4pfSxnPWZ1bmN0aW9uKGUpe2UubGVuZ3RoJiZlLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gbVtlLnR5cGVdfSkuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1tW2UudHlwZV07KEFycmF5LmlzQXJyYXkodCk/dDpbdF0pLmZvckVhY2goZnVuY3Rpb24odCl7XCJESURfSU5JVF9JVEVNXCI9PT1lLnR5cGU/aCh0KGUuZGF0YSkpOnNldFRpbWVvdXQoZnVuY3Rpb24oKXtoKHQoZS5kYXRhKSl9LDApfSl9KX0sUj1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24odCxuKXtpLmRpc3BhdGNoKFwiUkVRVUVTVF9JVEVNX1BSRVBBUkVcIix7cXVlcnk6ZSxzdWNjZXNzOmZ1bmN0aW9uKGUpe3QoZSl9LGZhaWx1cmU6ZnVuY3Rpb24oZSl7bihlKX19KX0pfSxPPWZ1bmN0aW9uKGUsdCl7dmFyIG47cmV0dXJuXCJvYmplY3RcIiE9dHlwZW9mIGV8fChuPWUpLmZpbGUmJm4uaWR8fHR8fCh0PWUsZT12b2lkIDApLGkuZGlzcGF0Y2goXCJSRU1PVkVfSVRFTVwiLE9iamVjdC5hc3NpZ24oe30sdCx7cXVlcnk6ZX0pKSxudWxsPT09aS5xdWVyeShcIkdFVF9BQ1RJVkVfSVRFTVwiLGUpfSx5PWZ1bmN0aW9uKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1uZXcgQXJyYXkoZSksbj0wO248ZTtuKyspdFtuXT1hcmd1bWVudHNbbl07cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGUsbil7dmFyIHI9W10sbz17fTtpZihQKHRbMF0pKXIucHVzaC5hcHBseShyLHRbMF0pLE9iamVjdC5hc3NpZ24obyx0WzFdfHx7fSk7ZWxzZXt2YXIgYT10W3QubGVuZ3RoLTFdO1wib2JqZWN0XCIhPXR5cGVvZiBhfHxhIGluc3RhbmNlb2YgQmxvYnx8T2JqZWN0LmFzc2lnbihvLHQucG9wKCkpLHIucHVzaC5hcHBseShyLHQpfWkuZGlzcGF0Y2goXCJBRERfSVRFTVNcIix7aXRlbXM6cixpbmRleDpvLmluZGV4LGludGVyYWN0aW9uTWV0aG9kOkosc3VjY2VzczplLGZhaWx1cmU6bn0pfSl9LEQ9ZnVuY3Rpb24oKXtyZXR1cm4gaS5xdWVyeShcIkdFVF9BQ1RJVkVfSVRFTVNcIil9LFM9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHQsbil7aS5kaXNwYXRjaChcIlJFUVVFU1RfSVRFTV9QUk9DRVNTSU5HXCIse3F1ZXJ5OmUsc3VjY2VzczpmdW5jdGlvbihlKXt0KGUpfSxmYWlsdXJlOmZ1bmN0aW9uKGUpe24oZSl9fSl9KX0sQT1PYmplY3QuYXNzaWduKHt9LHBlKCkse30sSSx7fSxmdW5jdGlvbihlLG4pe3ZhciByPXt9O3JldHVybiB0KG4sZnVuY3Rpb24odCl7clt0XT17Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuZ2V0U3RhdGUoKS5vcHRpb25zW3RdfSxzZXQ6ZnVuY3Rpb24obil7ZS5kaXNwYXRjaChcIlNFVF9cIitaKHQsXCJfXCIpLnRvVXBwZXJDYXNlKCkse3ZhbHVlOm59KX19fSkscn0oaSxvKSx7c2V0T3B0aW9uczpmdW5jdGlvbihlKXtyZXR1cm4gaS5kaXNwYXRjaChcIlNFVF9PUFRJT05TXCIse29wdGlvbnM6ZX0pfSxhZGRGaWxlOmZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24obixyKXt5KFt7c291cmNlOmUsb3B0aW9uczp0fV0se2luZGV4OnQuaW5kZXh9KS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBuKGUmJmVbMF0pfSkuY2F0Y2gocil9KX0sYWRkRmlsZXM6eSxnZXRGaWxlOmZ1bmN0aW9uKGUpe3JldHVybiBpLnF1ZXJ5KFwiR0VUX0FDVElWRV9JVEVNXCIsZSl9LHByb2Nlc3NGaWxlOlMscHJlcGFyZUZpbGU6UixyZW1vdmVGaWxlOk8sbW92ZUZpbGU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gaS5kaXNwYXRjaChcIk1PVkVfSVRFTVwiLHtxdWVyeTplLGluZGV4OnR9KX0sZ2V0RmlsZXM6RCxwcm9jZXNzRmlsZXM6ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxuPTA7bjxlO24rKyl0W25dPWFyZ3VtZW50c1tuXTt2YXIgcj1BcnJheS5pc0FycmF5KHRbMF0pP3RbMF06dDtpZighci5sZW5ndGgpe3ZhciBvPUQoKS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIShlLnN0YXR1cz09PUllLklETEUmJmUub3JpZ2luPT09dmUuTE9DQUwpJiZlLnN0YXR1cyE9PUllLlBST0NFU1NJTkcmJmUuc3RhdHVzIT09SWUuUFJPQ0VTU0lOR19DT01QTEVURSYmZS5zdGF0dXMhPT1JZS5QUk9DRVNTSU5HX1JFVkVSVF9FUlJPUn0pO3JldHVybiBQcm9taXNlLmFsbChvLm1hcChTKSl9cmV0dXJuIFByb21pc2UuYWxsKHIubWFwKFMpKX0scmVtb3ZlRmlsZXM6ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxuPTA7bjxlO24rKyl0W25dPWFyZ3VtZW50c1tuXTt2YXIgcixvPUFycmF5LmlzQXJyYXkodFswXSk/dFswXTp0O1wib2JqZWN0XCI9PXR5cGVvZiBvW28ubGVuZ3RoLTFdP3I9by5wb3AoKTpBcnJheS5pc0FycmF5KHRbMF0pJiYocj10WzFdKTt2YXIgaT1EKCk7cmV0dXJuIG8ubGVuZ3RoP28ubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBfKGUpP2lbZV0/aVtlXS5pZDpudWxsOmV9KS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGV9KS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIE8oZSxyKX0pOlByb21pc2UuYWxsKGkubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBPKGUscil9KSl9LHByZXBhcmVGaWxlczpmdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLG49MDtuPGU7bisrKXRbbl09YXJndW1lbnRzW25dO3ZhciByPUFycmF5LmlzQXJyYXkodFswXSk/dFswXTp0LG89ci5sZW5ndGg/cjpEKCk7cmV0dXJuIFByb21pc2UuYWxsKG8ubWFwKFIpKX0sc29ydDpmdW5jdGlvbihlKXtyZXR1cm4gaS5kaXNwYXRjaChcIlNPUlRcIix7Y29tcGFyZTplfSl9LGJyb3dzZTpmdW5jdGlvbigpe3ZhciBlPXAuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRbdHlwZT1maWxlXVwiKTtlJiZlLmNsaWNrKCl9LGRlc3Ryb3k6ZnVuY3Rpb24oKXtBLmZpcmUoXCJkZXN0cm95XCIscC5lbGVtZW50KSxpLmRpc3BhdGNoKFwiQUJPUlRfQUxMXCIpLHAuX2Rlc3Ryb3koKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLGQpLGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsYSksaS5kaXNwYXRjaChcIkRJRF9ERVNUUk9ZXCIpfSxpbnNlcnRCZWZvcmU6ZnVuY3Rpb24oZSl7cmV0dXJuIEwocC5lbGVtZW50LGUpfSxpbnNlcnRBZnRlcjpmdW5jdGlvbihlKXtyZXR1cm4gYihwLmVsZW1lbnQsZSl9LGFwcGVuZFRvOmZ1bmN0aW9uKGUpe3JldHVybiBlLmFwcGVuZENoaWxkKHAuZWxlbWVudCl9LHJlcGxhY2VFbGVtZW50OmZ1bmN0aW9uKGUpe0wocC5lbGVtZW50LGUpLGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKSxyPWV9LHJlc3RvcmVFbGVtZW50OmZ1bmN0aW9uKCl7ciYmKGIocixwLmVsZW1lbnQpLHAuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHAuZWxlbWVudCkscj1udWxsKX0saXNBdHRhY2hlZFRvOmZ1bmN0aW9uKGUpe3JldHVybiBwLmVsZW1lbnQ9PT1lfHxyPT09ZX0sZWxlbWVudDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHAuZWxlbWVudH19LHN0YXR1czp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGkucXVlcnkoXCJHRVRfU1RBVFVTXCIpfX19KTtyZXR1cm4gaS5kaXNwYXRjaChcIkRJRF9JTklUXCIpLG4oQSl9LGVvPWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LG49e307cmV0dXJuIHQoU2UoKSxmdW5jdGlvbihlLHQpe25bZV09dFswXX0pLEpyKE9iamVjdC5hc3NpZ24oe30sbix7fSxlKSl9LHRvPWZ1bmN0aW9uKGUpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fSxvPVtdO3QoZS5hdHRyaWJ1dGVzLGZ1bmN0aW9uKHQpe28ucHVzaChlLmF0dHJpYnV0ZXNbdF0pfSk7dmFyIGk9by5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUubmFtZX0pLnJlZHVjZShmdW5jdGlvbih0LG4pe3ZhciBvLGk9cihlLG4ubmFtZSk7cmV0dXJuIHRbKG89bi5uYW1lLFZyKG8ucmVwbGFjZSgvXmRhdGEtLyxcIlwiKSkpXT1pPT09bi5uYW1lfHxpLHR9LHt9KTtyZXR1cm4gZnVuY3Rpb24gZShuLHIpe3QocixmdW5jdGlvbihyLG8pe3QobixmdW5jdGlvbihlLHQpe3ZhciBpPW5ldyBSZWdFeHAocik7aWYoaS50ZXN0KGUpJiYoZGVsZXRlIG5bZV0sITEhPT1vKSlpZihVKG8pKW5bb109dDtlbHNle3ZhciBhLHM9by5ncm91cDtIKG8pJiYhbltzXSYmKG5bc109e30pLG5bc11bKGE9ZS5yZXBsYWNlKGksXCJcIiksYS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSthLnNsaWNlKDEpKV09dH19KSxvLm1hcHBpbmcmJmUobltvLmdyb3VwXSxvLm1hcHBpbmcpfSl9KGksbiksaX0sbm89ZnVuY3Rpb24oKXtyZXR1cm4oYXJndW1lbnRzLmxlbmd0aDw9MD92b2lkIDA6YXJndW1lbnRzWzBdKWluc3RhbmNlb2YgSFRNTEVsZW1lbnQ/ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9LG49e1wiXmNsYXNzJFwiOlwiY2xhc3NOYW1lXCIsXCJebXVsdGlwbGUkXCI6XCJhbGxvd011bHRpcGxlXCIsXCJeY2FwdHVyZSRcIjpcImNhcHR1cmVNZXRob2RcIixcIl53ZWJraXRkaXJlY3RvcnkkXCI6XCJhbGxvd0RpcmVjdG9yaWVzT25seVwiLFwiXnNlcnZlclwiOntncm91cDpcInNlcnZlclwiLG1hcHBpbmc6e1wiXnByb2Nlc3NcIjp7Z3JvdXA6XCJwcm9jZXNzXCJ9LFwiXnJldmVydFwiOntncm91cDpcInJldmVydFwifSxcIl5mZXRjaFwiOntncm91cDpcImZldGNoXCJ9LFwiXnJlc3RvcmVcIjp7Z3JvdXA6XCJyZXN0b3JlXCJ9LFwiXmxvYWRcIjp7Z3JvdXA6XCJsb2FkXCJ9fX0sXCJedHlwZSRcIjohMSxcIl5maWxlcyRcIjohMX07eWUoXCJTRVRfQVRUUklCVVRFX1RPX09QVElPTl9NQVBcIixuKTt2YXIgcj1PYmplY3QuYXNzaWduKHt9LHQpLG89dG8oXCJGSUVMRFNFVFwiPT09ZS5ub2RlTmFtZT9lLnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFt0eXBlPWZpbGVdXCIpOmUsbik7T2JqZWN0LmtleXMobykuZm9yRWFjaChmdW5jdGlvbihlKXtIKG9bZV0pPyhIKHJbZV0pfHwocltlXT17fSksT2JqZWN0LmFzc2lnbihyW2VdLG9bZV0pKTpyW2VdPW9bZV19KSxyLmZpbGVzPSh0LmZpbGVzfHxbXSkuY29uY2F0KEFycmF5LmZyb20oZS5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXQ6bm90KFt0eXBlPWZpbGVdKVwiKSkubWFwKGZ1bmN0aW9uKGUpe3JldHVybntzb3VyY2U6ZS52YWx1ZSxvcHRpb25zOnt0eXBlOmUuZGF0YXNldC50eXBlfX19KSk7dmFyIGk9ZW8ocik7cmV0dXJuIGUuZmlsZXMmJkFycmF5LmZyb20oZS5maWxlcykuZm9yRWFjaChmdW5jdGlvbihlKXtpLmFkZEZpbGUoZSl9KSxpLnJlcGxhY2VFbGVtZW50KGUpLGl9LmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpOmVvLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSxybz1bXCJmaXJlXCIsXCJfcmVhZFwiLFwiX3dyaXRlXCJdLG9vPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O3JldHVybiBFZShlLHQscm8pLHR9LGlvPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUucmVwbGFjZSgvKD86eyhbYS16QS1aXSspfSkvZyxmdW5jdGlvbihlLG4pe3JldHVybiB0W25dfSl9LGFvPWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBCbG9iKFtcIihcIixlLnRvU3RyaW5nKCksXCIpKClcIl0se3R5cGU6XCJhcHBsaWNhdGlvbi9qYXZhc2NyaXB0XCJ9KSxuPVVSTC5jcmVhdGVPYmplY3RVUkwodCkscj1uZXcgV29ya2VyKG4pO3JldHVybnt0cmFuc2ZlcjpmdW5jdGlvbihlLHQpe30scG9zdDpmdW5jdGlvbihlLHQsbil7dmFyIG89b2UoKTtyLm9ubWVzc2FnZT1mdW5jdGlvbihlKXtlLmRhdGEuaWQ9PT1vJiZ0KGUuZGF0YS5tZXNzYWdlKX0sci5wb3N0TWVzc2FnZSh7aWQ6byxtZXNzYWdlOmV9LG4pfSx0ZXJtaW5hdGU6ZnVuY3Rpb24oKXtyLnRlcm1pbmF0ZSgpLFVSTC5yZXZva2VPYmplY3RVUkwobil9fX0sc289ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHQsbil7dmFyIHI9bmV3IEltYWdlO3Iub25sb2FkPWZ1bmN0aW9uKCl7dChyKX0sci5vbmVycm9yPWZ1bmN0aW9uKGUpe24oZSl9LHIuc3JjPWV9KX0sdW89ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLnNsaWNlKDAsZS5zaXplLGUudHlwZSk7cmV0dXJuIG4ubGFzdE1vZGlmaWVkRGF0ZT1lLmxhc3RNb2RpZmllZERhdGUsbi5uYW1lPXQsbn0sbG89ZnVuY3Rpb24oZSl7cmV0dXJuIHVvKGUsZS5uYW1lKX0sY289W10sZm89ZnVuY3Rpb24oZSl7aWYoIWNvLmluY2x1ZGVzKGUpKXtjby5wdXNoKGUpO3ZhciBuLHI9ZSh7YWRkRmlsdGVyOkRlLHV0aWxzOntUeXBlOmdlLGZvcmluOnQsaXNTdHJpbmc6VSxpc0ZpbGU6aHQsdG9OYXR1cmFsRmlsZVNpemU6cXQscmVwbGFjZUluU3RyaW5nOmlvLGdldEV4dGVuc2lvbkZyb21GaWxlbmFtZTpqZSxnZXRGaWxlbmFtZVdpdGhvdXRFeHRlbnNpb246bXQsZ3Vlc3N0aW1hdGVNaW1lVHlwZTp0cixnZXRGaWxlRnJvbUJsb2I6V2UsZ2V0RmlsZW5hbWVGcm9tVVJMOmtlLGNyZWF0ZVJvdXRlOkEsY3JlYXRlV29ya2VyOmFvLGNyZWF0ZVZpZXc6UyxjcmVhdGVJdGVtQVBJOlRlLGxvYWRJbWFnZTpzbyxjb3B5RmlsZTpsbyxyZW5hbWVGaWxlOnVvLGNyZWF0ZUJsb2I6emUsYXBwbHlGaWx0ZXJDaGFpbjpPZSx0ZXh0Ok50LGdldE51bWVyaWNBc3BlY3RSYXRpb0Zyb21TdHJpbmc6YmV9LHZpZXdzOntmaWxlQWN0aW9uQnV0dG9uOkZ0fX0pO249ci5vcHRpb25zLE9iamVjdC5hc3NpZ24oQWUsbil9fSxwbz0oS3Q9YygpJiYhKFwiW29iamVjdCBPcGVyYU1pbmldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2luZG93Lm9wZXJhbWluaSkpJiZcInZpc2liaWxpdHlTdGF0ZVwiaW4gZG9jdW1lbnQmJlwiUHJvbWlzZVwiaW4gd2luZG93JiZcInNsaWNlXCJpbiBCbG9iLnByb3RvdHlwZSYmXCJVUkxcImluIHdpbmRvdyYmXCJjcmVhdGVPYmplY3RVUkxcImluIHdpbmRvdy5VUkwmJlwicGVyZm9ybWFuY2VcImluIHdpbmRvdyYmKFwic3VwcG9ydHNcImluKHdpbmRvdy5DU1N8fHt9KXx8L01TSUV8VHJpZGVudC8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkpLGZ1bmN0aW9uKCl7cmV0dXJuIEt0fSksRW89e2FwcHM6W119LF9vPWZ1bmN0aW9uKCl7fTtpZihlLlN0YXR1cz17fSxlLkZpbGVTdGF0dXM9e30sZS5GaWxlT3JpZ2luPXt9LGUuT3B0aW9uVHlwZXM9e30sZS5jcmVhdGU9X28sZS5kZXN0cm95PV9vLGUucGFyc2U9X28sZS5maW5kPV9vLGUucmVnaXN0ZXJQbHVnaW49X28sZS5nZXRPcHRpb25zPV9vLGUuc2V0T3B0aW9ucz1fbyxwbygpKXshZnVuY3Rpb24oZSx0KXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06NjAscj1cIl9fZnJhbWVQYWludGVyXCI7aWYod2luZG93W3JdKXJldHVybiB3aW5kb3dbcl0ucmVhZGVycy5wdXNoKGUpLHZvaWQgd2luZG93W3JdLndyaXRlcnMucHVzaCh0KTt3aW5kb3dbcl09e3JlYWRlcnM6W2VdLHdyaXRlcnM6W3RdfTt2YXIgbz13aW5kb3dbcl0saT0xZTMvbixhPW51bGwscz1udWxsLHU9bnVsbCxsPW51bGwsYz1mdW5jdGlvbigpe2RvY3VtZW50LmhpZGRlbj8odT1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe3JldHVybiBmKHBlcmZvcm1hbmNlLm5vdygpKX0saSl9LGw9ZnVuY3Rpb24oKXtyZXR1cm4gd2luZG93LmNsZWFyVGltZW91dChzKX0pOih1PWZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZil9LGw9ZnVuY3Rpb24oKXtyZXR1cm4gd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHMpfSl9O2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsZnVuY3Rpb24oKXtsJiZsKCksYygpLGYocGVyZm9ybWFuY2Uubm93KCkpfSk7dmFyIGY9ZnVuY3Rpb24gZSh0KXtzPXUoZSksYXx8KGE9dCk7dmFyIG49dC1hO248PWl8fChhPXQtbiVpLG8ucmVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBlKCl9KSxvLndyaXRlcnMuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZSh0KX0pKX07YygpLGYocGVyZm9ybWFuY2Uubm93KCkpfShmdW5jdGlvbigpe0VvLmFwcHMuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS5fcmVhZCgpfSl9LGZ1bmN0aW9uKGUpe0VvLmFwcHMuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gdC5fd3JpdGUoZSl9KX0pO3ZhciBUbz1mdW5jdGlvbiB0KCl7ZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJGaWxlUG9uZDpsb2FkZWRcIix7ZGV0YWlsOntzdXBwb3J0ZWQ6cG8sY3JlYXRlOmUuY3JlYXRlLGRlc3Ryb3k6ZS5kZXN0cm95LHBhcnNlOmUucGFyc2UsZmluZDplLmZpbmQscmVnaXN0ZXJQbHVnaW46ZS5yZWdpc3RlclBsdWdpbixzZXRPcHRpb25zOmUuc2V0T3B0aW9uc319KSksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIix0KX07XCJsb2FkaW5nXCIhPT1kb2N1bWVudC5yZWFkeVN0YXRlP3NldFRpbWVvdXQoZnVuY3Rpb24oKXtyZXR1cm4gVG8oKX0sMCk6ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixUbyk7dmFyIElvPWZ1bmN0aW9uKCl7cmV0dXJuIHQoU2UoKSxmdW5jdGlvbih0LG4pe2UuT3B0aW9uVHlwZXNbdF09blsxXX0pfTtlLlN0YXR1cz1PYmplY3QuYXNzaWduKHt9LE1lKSxlLkZpbGVPcmlnaW49T2JqZWN0LmFzc2lnbih7fSx2ZSksZS5GaWxlU3RhdHVzPU9iamVjdC5hc3NpZ24oe30sSWUpLGUuT3B0aW9uVHlwZXM9e30sSW8oKSxlLmNyZWF0ZT1mdW5jdGlvbigpe3ZhciB0PW5vLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpO3JldHVybiB0Lm9uKFwiZGVzdHJveVwiLGUuZGVzdHJveSksRW8uYXBwcy5wdXNoKHQpLG9vKHQpfSxlLmRlc3Ryb3k9ZnVuY3Rpb24oZSl7dmFyIHQ9RW8uYXBwcy5maW5kSW5kZXgoZnVuY3Rpb24odCl7cmV0dXJuIHQuaXNBdHRhY2hlZFRvKGUpfSk7cmV0dXJuIHQ+PTAmJihFby5hcHBzLnNwbGljZSh0LDEpWzBdLnJlc3RvcmVFbGVtZW50KCksITApfSxlLnBhcnNlPWZ1bmN0aW9uKHQpe3JldHVybiBBcnJheS5mcm9tKHQucXVlcnlTZWxlY3RvckFsbChcIi5maWxlcG9uZFwiKSkuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiFFby5hcHBzLmZpbmQoZnVuY3Rpb24odCl7cmV0dXJuIHQuaXNBdHRhY2hlZFRvKGUpfSl9KS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIGUuY3JlYXRlKHQpfSl9LGUuZmluZD1mdW5jdGlvbihlKXt2YXIgdD1Fby5hcHBzLmZpbmQoZnVuY3Rpb24odCl7cmV0dXJuIHQuaXNBdHRhY2hlZFRvKGUpfSk7cmV0dXJuIHQ/b28odCk6bnVsbH0sZS5yZWdpc3RlclBsdWdpbj1mdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLG49MDtuPGU7bisrKXRbbl09YXJndW1lbnRzW25dO3QuZm9yRWFjaChmbyksSW8oKX0sZS5nZXRPcHRpb25zPWZ1bmN0aW9uKCl7dmFyIGU9e307cmV0dXJuIHQoU2UoKSxmdW5jdGlvbih0LG4pe2VbdF09blswXX0pLGV9LGUuc2V0T3B0aW9ucz1mdW5jdGlvbihuKXtyZXR1cm4gSChuKSYmKEVvLmFwcHMuZm9yRWFjaChmdW5jdGlvbihlKXtlLnNldE9wdGlvbnMobil9KSxmdW5jdGlvbihlKXt0KGUsZnVuY3Rpb24oZSx0KXtBZVtlXSYmKEFlW2VdWzBdPXoodCxBZVtlXVswXSxBZVtlXVsxXSkpfSl9KG4pKSxlLmdldE9wdGlvbnMoKX19ZS5zdXBwb3J0ZWQ9cG8sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9KTsiXSwibmFtZXMiOlsiZSIsInQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsIkZpbGVQb25kIiwibiIsImhhc093blByb3BlcnR5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJhc3NpZ24iLCJyIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZ2V0QXR0cmlidXRlIiwiaGFzQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwibyIsImkiLCJpbmNsdWRlcyIsImEiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJzIiwic3BsaWNlIiwicHVzaCIsInUiLCJpbmRleE9mIiwiZWxlbWVudCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImwiLCJ3aW5kb3ciLCJjIiwiZiIsImNoaWxkcmVuIiwiY2hpbGROb2RlcyIsImQiLCJsZWZ0IiwidG9wIiwid2lkdGgiLCJoZWlnaHQiLCJpbm5lciIsInJpZ2h0IiwiYm90dG9tIiwib3V0ZXIiLCJmaWx0ZXIiLCJpc1JlY3RJZ25vcmVkIiwibWFwIiwicmVjdCIsImZvckVhY2giLCJwIiwiRSIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblJpZ2h0IiwiXyIsIlQiLCJJIiwic3ByaW5nIiwic3RpZmZuZXNzIiwiZGFtcGluZyIsIm1hc3MiLCJpbnRlcnBvbGF0ZSIsIk1hdGgiLCJhYnMiLCJvbnVwZGF0ZSIsIm9uY29tcGxldGUiLCJ0YXJnZXQiLCJzZXQiLCJnZXQiLCJyZXN0aW5nIiwidHdlZW4iLCJkdXJhdGlvbiIsImVhc2luZyIsImRlbGF5IiwidiIsInR5cGUiLCJtIiwiQXJyYXkiLCJpc0FycmF5Iiwia2V5IiwiZ2V0dGVyIiwic2V0dGVyIiwiaCIsImciLCJvcGFjaXR5Iiwic2NhbGVYIiwic2NhbGVZIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJyb3RhdGVYIiwicm90YXRlWSIsInJvdGF0ZVoiLCJvcmlnaW5YIiwib3JpZ2luWSIsIlIiLCJrZXlzIiwiTyIsInBlcnNwZWN0aXZlIiwiZWxlbWVudEN1cnJlbnRTdHlsZSIsInN0eWxlIiwiY3NzVGV4dCIsInkiLCJzdHlsZXMiLCJtaXhpbkNvbmZpZyIsInZpZXdQcm9wcyIsInZpZXdJbnRlcm5hbEFQSSIsInZpZXdFeHRlcm5hbEFQSSIsInZpZXciLCJjaGlsZFZpZXdzIiwid3JpdGUiLCJkZXN0cm95IiwibGlzdGVuZXJzIiwidmlld1N0YXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvbiIsImZuIiwib2ZmIiwiZmluZEluZGV4IiwiYW5pbWF0aW9ucyIsImhpZGRlbiIsImFwaXMiLCJEIiwibGF5b3V0Q2FsY3VsYXRlZCIsInBhZGRpbmdUb3AiLCJwYXJzZUludCIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJzY3JvbGxUb3AiLCJvZmZzZXRQYXJlbnQiLCJTIiwidGFnIiwibmFtZSIsImF0dHJpYnV0ZXMiLCJyZWFkIiwiY3JlYXRlIiwiZmlsdGVyRnJhbWVBY3Rpb25zRm9yQ2hpbGQiLCJkaWRDcmVhdGVWaWV3IiwiQSIsImRpZFdyaXRlVmlldyIsIkwiLCJiIiwiaWdub3JlUmVjdCIsIlAiLCJNIiwiaWdub3JlUmVjdFVwZGF0ZSIsInciLCJDIiwibWl4aW5zIiwiTiIsImdldENvbXB1dGVkU3R5bGUiLCJHIiwiVSIsIkIiLCJjb25jYXQiLCJGIiwicSIsIlYiLCJyZWYiLCJpcyIsImFwcGVuZENoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiY3JlYXRlQ2hpbGRWaWV3IiwibGlua1ZpZXciLCJ1bmxpbmtWaWV3IiwiYXBwZW5kQ2hpbGRWaWV3IiwicmVtb3ZlQ2hpbGRWaWV3IiwicmVnaXN0ZXJXcml0ZXIiLCJyZWdpc3RlclJlYWRlciIsInJlZ2lzdGVyRGVzdHJveWVyIiwiaW52YWxpZGF0ZUxheW91dCIsImRpc3BhdGNoIiwicXVlcnkiLCJ4IiwiX3JlYWQiLCJyb290IiwiayIsInByb3BzIiwiX3dyaXRlIiwiYWN0aW9ucyIsInRpbWVzdGFtcCIsInNob3VsZE9wdGltaXplIiwiX2Rlc3Ryb3kiLCJZIiwic29ydCIsImoiLCJhY3Rpb24iLCJkYXRhIiwibmV4dFNpYmxpbmciLCJ0cmltIiwicmVwbGFjZSIsInBhcnNlRmxvYXQiLCJpc0Zpbml0ZSIsImZsb29yIiwidGVzdCIsInByb2Nlc3MiLCJwYXRjaCIsInJldmVydCIsImZldGNoIiwicmVzdG9yZSIsImxvYWQiLCJ1cmwiLCJtZXRob2QiLCJoZWFkZXJzIiwid2l0aENyZWRlbnRpYWxzIiwidGltZW91dCIsIm9ubG9hZCIsIm9uZGF0YSIsIm9uZXJyb3IiLCJzcGxpdCIsImhlYWRlciIsInZhbHVlIiwiSCIsIlgiLCJXIiwiYXJyYXkiLCJudW1iZXIiLCJieXRlcyIsInN0cmluZyIsInNoaWZ0Iiwic2VydmVyYXBpIiwicmVtb3ZlIiwib2JqZWN0IiwiSlNPTiIsInBhcnNlIiwieiIsIm9wdGlvbiIsIlEiLCJlbnVtZXJhYmxlIiwiWiIsInRvTG93ZXJDYXNlIiwiam9pbiIsIksiLCJ0b1VwcGVyQ2FzZSIsIm9wdGlvbnMiLCIkIiwiSiIsImVlIiwidGUiLCJuZSIsInJlIiwib2UiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0ciIsImllIiwid3JhcHBlZCIsImFlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwiZG9uZSIsInJlamVjdCIsIm5leHQiLCJhcmciLCJfaW52b2tlIiwic2UiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm90b3R5cGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImNhbGwiLCJTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidWUiLCJsZSIsIlR5cGVFcnJvciIsIml0ZXJhdG9yIiwiZnJvbSIsImNlIiwiZmUiLCJkZSIsInBlIiwiZXZlbnQiLCJjYiIsInNldFRpbWVvdXQiLCJhcHBseSIsImZpcmVTeW5jIiwiZmlyZSIsIm9uT25jZSIsIkVlIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9lIiwiVGUiLCJJZSIsIklOSVQiLCJJRExFIiwiUFJPQ0VTU0lOR19RVUVVRUQiLCJQUk9DRVNTSU5HIiwiUFJPQ0VTU0lOR19DT01QTEVURSIsIlBST0NFU1NJTkdfRVJST1IiLCJQUk9DRVNTSU5HX1JFVkVSVF9FUlJPUiIsIkxPQURJTkciLCJMT0FEX0VSUk9SIiwidmUiLCJJTlBVVCIsIkxJTUJPIiwiTE9DQUwiLCJtZSIsImV4ZWMiLCJoZSIsInRvTG9jYWxlU3RyaW5nIiwiZ2UiLCJCT09MRUFOIiwiSU5UIiwiTlVNQkVSIiwiU1RSSU5HIiwiQVJSQVkiLCJPQkpFQ1QiLCJGVU5DVElPTiIsIkFDVElPTiIsIlNFUlZFUl9BUEkiLCJSRUdFWCIsIlJlIiwiT2UiLCJyZWR1Y2UiLCJ5ZSIsIkRlIiwiU2UiLCJBZSIsImlkIiwiZGlzYWJsZWQiLCJyZXF1aXJlZCIsImNhcHR1cmVNZXRob2QiLCJhbGxvd1N5bmNBY2NlcHRBdHRyaWJ1dGUiLCJhbGxvd0Ryb3AiLCJhbGxvd0Jyb3dzZSIsImFsbG93UGFzdGUiLCJhbGxvd011bHRpcGxlIiwiYWxsb3dSZXBsYWNlIiwiYWxsb3dSZXZlcnQiLCJhbGxvd1JlbW92ZSIsImFsbG93UHJvY2VzcyIsImFsbG93UmVvcmRlciIsImFsbG93RGlyZWN0b3JpZXNPbmx5Iiwic3RvcmVBc0ZpbGUiLCJmb3JjZVJldmVydCIsIm1heEZpbGVzIiwiY2hlY2tWYWxpZGl0eSIsIml0ZW1JbnNlcnRMb2NhdGlvbkZyZWVkb20iLCJpdGVtSW5zZXJ0TG9jYXRpb24iLCJpdGVtSW5zZXJ0SW50ZXJ2YWwiLCJkcm9wT25QYWdlIiwiZHJvcE9uRWxlbWVudCIsImRyb3BWYWxpZGF0aW9uIiwiaWdub3JlZEZpbGVzIiwiaW5zdGFudFVwbG9hZCIsIm1heFBhcmFsbGVsVXBsb2FkcyIsImFsbG93TWluaW11bVVwbG9hZER1cmF0aW9uIiwiY2h1bmtVcGxvYWRzIiwiY2h1bmtGb3JjZSIsImNodW5rU2l6ZSIsImNodW5rUmV0cnlEZWxheXMiLCJzZXJ2ZXIiLCJmaWxlU2l6ZUJhc2UiLCJsYWJlbEZpbGVTaXplQnl0ZXMiLCJsYWJlbEZpbGVTaXplS2lsb2J5dGVzIiwibGFiZWxGaWxlU2l6ZU1lZ2FieXRlcyIsImxhYmVsRmlsZVNpemVHaWdhYnl0ZXMiLCJsYWJlbERlY2ltYWxTZXBhcmF0b3IiLCJsYWJlbFRob3VzYW5kc1NlcGFyYXRvciIsImxhYmVsSWRsZSIsImxhYmVsSW52YWxpZEZpZWxkIiwibGFiZWxGaWxlV2FpdGluZ0ZvclNpemUiLCJsYWJlbEZpbGVTaXplTm90QXZhaWxhYmxlIiwibGFiZWxGaWxlQ291bnRTaW5ndWxhciIsImxhYmVsRmlsZUNvdW50UGx1cmFsIiwibGFiZWxGaWxlTG9hZGluZyIsImxhYmVsRmlsZUFkZGVkIiwibGFiZWxGaWxlTG9hZEVycm9yIiwibGFiZWxGaWxlUmVtb3ZlZCIsImxhYmVsRmlsZVJlbW92ZUVycm9yIiwibGFiZWxGaWxlUHJvY2Vzc2luZyIsImxhYmVsRmlsZVByb2Nlc3NpbmdDb21wbGV0ZSIsImxhYmVsRmlsZVByb2Nlc3NpbmdBYm9ydGVkIiwibGFiZWxGaWxlUHJvY2Vzc2luZ0Vycm9yIiwibGFiZWxGaWxlUHJvY2Vzc2luZ1JldmVydEVycm9yIiwibGFiZWxUYXBUb0NhbmNlbCIsImxhYmVsVGFwVG9SZXRyeSIsImxhYmVsVGFwVG9VbmRvIiwibGFiZWxCdXR0b25SZW1vdmVJdGVtIiwibGFiZWxCdXR0b25BYm9ydEl0ZW1Mb2FkIiwibGFiZWxCdXR0b25SZXRyeUl0ZW1Mb2FkIiwibGFiZWxCdXR0b25BYm9ydEl0ZW1Qcm9jZXNzaW5nIiwibGFiZWxCdXR0b25VbmRvSXRlbVByb2Nlc3NpbmciLCJsYWJlbEJ1dHRvblJldHJ5SXRlbVByb2Nlc3NpbmciLCJsYWJlbEJ1dHRvblByb2Nlc3NJdGVtIiwiaWNvblJlbW92ZSIsImljb25Qcm9jZXNzIiwiaWNvblJldHJ5IiwiaWNvblVuZG8iLCJpY29uRG9uZSIsIm9uaW5pdCIsIm9ud2FybmluZyIsIm9uYWN0aXZhdGVmaWxlIiwib25pbml0ZmlsZSIsIm9uYWRkZmlsZXN0YXJ0Iiwib25hZGRmaWxlcHJvZ3Jlc3MiLCJvbmFkZGZpbGUiLCJvbnByb2Nlc3NmaWxlc3RhcnQiLCJvbnByb2Nlc3NmaWxlcHJvZ3Jlc3MiLCJvbnByb2Nlc3NmaWxlYWJvcnQiLCJvbnByb2Nlc3NmaWxlcmV2ZXJ0Iiwib25wcm9jZXNzZmlsZSIsIm9ucHJvY2Vzc2ZpbGVzIiwib25yZW1vdmVmaWxlIiwib25wcmVwYXJlZmlsZSIsIm9udXBkYXRlZmlsZXMiLCJvbnJlb3JkZXJmaWxlcyIsImJlZm9yZURyb3BGaWxlIiwiYmVmb3JlQWRkRmlsZSIsImJlZm9yZVJlbW92ZUZpbGUiLCJiZWZvcmVQcmVwYXJlRmlsZSIsInN0eWxlUGFuZWxMYXlvdXQiLCJzdHlsZVBhbmVsQXNwZWN0UmF0aW8iLCJzdHlsZUl0ZW1QYW5lbEFzcGVjdFJhdGlvIiwic3R5bGVCdXR0b25SZW1vdmVJdGVtUG9zaXRpb24iLCJzdHlsZUJ1dHRvblByb2Nlc3NJdGVtUG9zaXRpb24iLCJzdHlsZUxvYWRJbmRpY2F0b3JQb3NpdGlvbiIsInN0eWxlUHJvZ3Jlc3NJbmRpY2F0b3JQb3NpdGlvbiIsInN0eWxlQnV0dG9uUmVtb3ZlSXRlbUFsaWduIiwiZmlsZXMiLCJjcmVkaXRzIiwiTGUiLCJmaW5kIiwiYmUiLCJQZSIsImFyY2hpdmVkIiwiTWUiLCJFTVBUWSIsIkVSUk9SIiwiQlVTWSIsIlJFQURZIiwid2UiLCJDZSIsIk5lIiwiR2UiLCJVZSIsInN0YXR1cyIsIkJlIiwiRmUiLCJxZSIsIlZlIiwiR0VUX1NUQVRVUyIsIml0ZW1zIiwic29tZSIsIkdFVF9JVEVNIiwiR0VUX0FDVElWRV9JVEVNIiwiR0VUX0FDVElWRV9JVEVNUyIsIkdFVF9JVEVNUyIsIkdFVF9JVEVNX05BTUUiLCJmaWxlbmFtZSIsIkdFVF9JVEVNX1NJWkUiLCJmaWxlU2l6ZSIsIkdFVF9TVFlMRVMiLCJHRVRfUEFORUxfQVNQRUNUX1JBVElPIiwiR0VUX0lURU1fUEFORUxfQVNQRUNUX1JBVElPIiwiR0VUX0lURU1TX0JZX1NUQVRVUyIsIkdFVF9UT1RBTF9JVEVNUyIsIlNIT1VMRF9VUERBVEVfRklMRV9JTlBVVCIsIkRhdGFUcmFuc2ZlciIsImFkZCIsIkZpbGUiLCJJU19BU1lOQyIsIkdFVF9GSUxFX1NJWkVfTEFCRUxTIiwibGFiZWxCeXRlcyIsImxhYmVsS2lsb2J5dGVzIiwibGFiZWxNZWdhYnl0ZXMiLCJsYWJlbEdpZ2FieXRlcyIsInhlIiwibWF4IiwibWluIiwiWWUiLCJrZSIsInBvcCIsImplIiwiSGUiLCJzbGljZSIsIlhlIiwiRGF0ZSIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsIldlIiwic2l6ZSIsImxhc3RNb2RpZmllZERhdGUiLCJfcmVsYXRpdmVQYXRoIiwiemUiLCJCbG9iQnVpbGRlciIsIldlYktpdEJsb2JCdWlsZGVyIiwiTW96QmxvYkJ1aWxkZXIiLCJNU0Jsb2JCdWlsZGVyIiwiYXBwZW5kIiwiZ2V0QmxvYiIsIkJsb2IiLCJRZSIsIlplIiwiQXJyYXlCdWZmZXIiLCJVaW50OEFycmF5IiwiY2hhckNvZGVBdCIsImF0b2IiLCJLZSIsImRlY29kZVVSSSIsIiRlIiwibWF0Y2giLCJKZSIsImV0Iiwic291cmNlIiwidHQiLCJjb21wbGV0ZSIsInByb2dyZXNzIiwicmVxdWVzdCIsIm5vdyIsImJvZHkiLCJjb2RlIiwic2V0U291cmNlIiwiZ2V0UHJvZ3Jlc3MiLCJhYm9ydCIsIm50IiwicnQiLCJvbmhlYWRlcnMiLCJvbnByb2dyZXNzIiwib250aW1lb3V0Iiwib25hYm9ydCIsImVuY29kZVVSSSIsImVuY29kZVVSSUNvbXBvbmVudCIsInN0cmluZ2lmeSIsIlhNTEh0dHBSZXF1ZXN0IiwidXBsb2FkIiwibGVuZ3RoQ29tcHV0YWJsZSIsImxvYWRlZCIsInRvdGFsIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsIm9wZW4iLCJ1bmVzY2FwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJyZXNwb25zZVR5cGUiLCJzZW5kIiwib3QiLCJpdCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsImF0Iiwic3QiLCJ1dCIsInJlc3BvbnNlIiwic3RhdHVzVGV4dCIsImx0IiwiY3QiLCJmdCIsImR0IiwicHQiLCJFdCIsImNodW5rVHJhbnNmZXJJZCIsImNodW5rU2VydmVyIiwic2VydmVySWQiLCJhYm9ydGVkIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJpbmRleCIsIm9mZnNldCIsImZpbGUiLCJyZXRyaWVzIiwiZXJyb3IiLCJldmVyeSIsImNsZWFyVGltZW91dCIsIkZvcm1EYXRhIiwiX3QiLCJUdCIsIkl0IiwidnQiLCJwZXJjZWl2ZWRQcm9ncmVzcyIsInBlcmNlaXZlZFBlcmZvcm1hbmNlVXBkYXRlciIsInBlcmNlaXZlZER1cmF0aW9uIiwiY2xlYXIiLCJnZXREdXJhdGlvbiIsInJlc2V0IiwibXQiLCJsYXN0SW5kZXhPZiIsImh0IiwiZ3QiLCJmcm96ZW4iLCJyZWxlYXNlZCIsInNlcnZlckZpbGVSZWZlcmVuY2UiLCJ0cmFuc2ZlcklkIiwicHJvY2Vzc2luZ0Fib3J0ZWQiLCJhY3RpdmVMb2FkZXIiLCJhY3RpdmVQcm9jZXNzb3IiLCJzaWxlbnQiLCJvcmlnaW4iLCJmaWxlbmFtZVdpdGhvdXRFeHRlbnNpb24iLCJmaWxlRXh0ZW5zaW9uIiwiZmlsZVR5cGUiLCJyZWxhdGl2ZVBhdGgiLCJnZXRNZXRhZGF0YSIsInNldE1ldGFkYXRhIiwiZXh0ZW5kIiwiYWJvcnRMb2FkIiwicmV0cnlMb2FkIiwicmVxdWVzdFByb2Nlc3NpbmciLCJhYm9ydFByb2Nlc3NpbmciLCJjb25zb2xlIiwiZnJlZXplIiwicmVsZWFzZSIsImFyY2hpdmUiLCJSdCIsIk90IiwieXQiLCJsb2NhdGlvbiIsInByb3RvY29sIiwiRHQiLCJTdCIsImxpc3RVcGRhdGVUaW1lb3V0IiwiQXQiLCJMdCIsImJ0Iiwic3VjY2VzcyIsImZhaWx1cmUiLCJQdCIsIkFCT1JUX0FMTCIsIkRJRF9TRVRfRklMRVMiLCJpbnRlcmFjdGlvbk1ldGhvZCIsIkRJRF9VUERBVEVfSVRFTV9NRVRBREFUQSIsImNoYW5nZSIsIml0ZW1VcGRhdGVUaW1lb3V0IiwiaXRlbSIsIk1PVkVfSVRFTSIsIlNPUlQiLCJjb21wYXJlIiwiQUREX0lURU1TIiwiYWxsIiwiQUREX0lURU0iLCJtZXRhZGF0YSIsIm1haW4iLCJzdWIiLCJocmVmIiwiUkVRVUVTVF9QUkVQQVJFX09VVFBVVCIsIkNPTVBMRVRFX0xPQURfSVRFTSIsIlJFVFJZX0lURU1fTE9BRCIsIlJFUVVFU1RfSVRFTV9QUkVQQVJFIiwib3V0cHV0IiwiUkVRVUVTVF9JVEVNX1BST0NFU1NJTkciLCJQUk9DRVNTX0lURU0iLCJwcm9jZXNzaW5nUXVldWUiLCJSRVRSWV9JVEVNX1BST0NFU1NJTkciLCJSRVFVRVNUX1JFTU9WRV9JVEVNIiwiUkVMRUFTRV9JVEVNIiwiUkVNT1ZFX0lURU0iLCJBQk9SVF9JVEVNX0xPQUQiLCJBQk9SVF9JVEVNX1BST0NFU1NJTkciLCJSRVFVRVNUX1JFVkVSVF9JVEVNX1BST0NFU1NJTkciLCJSRVZFUlRfSVRFTV9QUk9DRVNTSU5HIiwiU0VUX09QVElPTlMiLCJNdCIsInd0IiwiQ3QiLCJOdCIsIm5vZGVWYWx1ZSIsImNyZWF0ZVRleHROb2RlIiwiR3QiLCJQSSIsImNvcyIsInNpbiIsIlV0IiwiQnQiLCJzcGluIiwicGF0aCIsInN2ZyIsImFsaWduIiwiZGF0YXNldCIsIkZ0IiwiaW5uZXJIVE1MIiwiaWNvbiIsImxhYmVsIiwiaXNEaXNhYmxlZCIsInJlbW92ZUF0dHJpYnV0ZSIsInF0Iiwicm91bmQiLCJWdCIsInRvRml4ZWQiLCJ4dCIsImZpbGVOYW1lIiwiWXQiLCJrdCIsIkRJRF9MT0FEX0lURU0iLCJESURfVVBEQVRFX0lURU1fTUVUQSIsIkRJRF9USFJPV19JVEVNX0xPQURfRVJST1IiLCJESURfVEhST1dfSVRFTV9JTlZBTElEIiwianQiLCJIdCIsIlh0IiwiV3QiLCJ6dCIsIkRJRF9SRVZFUlRfSVRFTV9QUk9DRVNTSU5HIiwiRElEX1JFUVVFU1RfSVRFTV9QUk9DRVNTSU5HIiwiRElEX0FCT1JUX0lURU1fUFJPQ0VTU0lORyIsIkRJRF9DT01QTEVURV9JVEVNX1BST0NFU1NJTkciLCJESURfVVBEQVRFX0lURU1fUFJPQ0VTU19QUk9HUkVTUyIsIkRJRF9VUERBVEVfSVRFTV9MT0FEX1BST0dSRVNTIiwiRElEX1RIUk9XX0lURU1fUFJPQ0VTU0lOR19FUlJPUiIsIkRJRF9USFJPV19JVEVNX1BST0NFU1NJTkdfUkVWRVJUX0VSUk9SIiwiRElEX1RIUk9XX0lURU1fUkVNT1ZFX0VSUk9SIiwiUXQiLCJBYm9ydEl0ZW1Mb2FkIiwiUmV0cnlJdGVtTG9hZCIsIlJlbW92ZUl0ZW0iLCJQcm9jZXNzSXRlbSIsIkFib3J0SXRlbVByb2Nlc3NpbmciLCJSZXRyeUl0ZW1Qcm9jZXNzaW5nIiwiUmV2ZXJ0SXRlbVByb2Nlc3NpbmciLCJadCIsIkt0IiwiJHQiLCJubiIsImJ1dHRvblJlbW92ZUl0ZW0iLCJKdCIsImJ1dHRvbkFib3J0SXRlbUxvYWQiLCJlbiIsInRuIiwicm4iLCJidXR0b25SZXRyeUl0ZW1Mb2FkIiwiYnV0dG9uUHJvY2Vzc0l0ZW0iLCJidXR0b25BYm9ydEl0ZW1Qcm9jZXNzaW5nIiwiYnV0dG9uUmV0cnlJdGVtUHJvY2Vzc2luZyIsImJ1dHRvblJldmVydEl0ZW1Qcm9jZXNzaW5nIiwibG9hZFByb2dyZXNzSW5kaWNhdG9yIiwicHJvY2Vzc1Byb2dyZXNzSW5kaWNhdG9yIiwicHJvY2Vzc2luZ0NvbXBsZXRlSW5kaWNhdG9yIiwiaW5mbyIsImFuIiwic24iLCJESURfU1RBUlRfSVRFTV9MT0FEIiwiRElEX1NUQVJUX0lURU1fUkVNT1ZFIiwiRElEX0xPQURfTE9DQUxfSVRFTSIsIkRJRF9TVEFSVF9JVEVNX1BST0NFU1NJTkciLCJ1biIsImxuIiwiRElEX1NFVF9MQUJFTF9CVVRUT05fQUJPUlRfSVRFTV9QUk9DRVNTSU5HIiwiRElEX1NFVF9MQUJFTF9CVVRUT05fQUJPUlRfSVRFTV9MT0FEIiwiRElEX1NFVF9MQUJFTF9CVVRUT05fQUJPUlRfSVRFTV9SRU1PVkFMIiwiYnV0dG9uQWJvcnRJdGVtUmVtb3ZhbCIsImNuIiwiY2xhc3NMaXN0Iiwic3RvcFByb3BhZ2F0aW9uIiwiYWN0aXZlU3R5bGVzIiwicmV2ZXJzZSIsImNvbnRyb2wiLCJkbiIsInBuIiwiRW4iLCJoZWlnaHRDdXJyZW50Iiwic2NhbGFibGUiLCJjZW50ZXIiLCJfbiIsIlRuIiwiSW4iLCJESURfVVBEQVRFX1BBTkVMX0hFSUdIVCIsInZuIiwiRElEX0dSQUJfSVRFTSIsImRyYWdPcmlnaW4iLCJESURfRFJBR19JVEVNIiwiZHJhZ1N0YXRlIiwiRElEX0RST1BfSVRFTSIsImRyYWdPZmZzZXQiLCJjdXJyZW50U3RhdGUiLCJmaWxlcG9uZEl0ZW1TdGF0ZSIsImNvbnRhaW5lciIsInBhbmVsIiwibW4iLCJoYW5kbGVDbGljayIsIm1hcmtlZEZvclJlbW92YWwiLCJpc1ByaW1hcnkiLCJwYWdlWCIsInBhZ2VZIiwiZHJhZ0NlbnRlciIsIm9mZnNldFgiLCJvZmZzZXRZIiwic2V0SW5kZXgiLCJnZXRJbmRleCIsImdldEl0ZW1JbmRleCIsInByZXZlbnREZWZhdWx0IiwiaG4iLCJnbiIsIlJuIiwiZ2V0SGVpZ2h0Iiwic2V0SGVpZ2h0IiwiZ2V0V2lkdGgiLCJzZXRXaWR0aCIsInNldERpbWVuc2lvbnMiLCJPbiIsInNwYXduRGF0ZSIsInluIiwiRG4iLCJTbiIsIkRJRF9BRERfSVRFTSIsImFkZEluZGV4IiwibGFzdEl0ZW1TcGFud0RhdGUiLCJESURfUkVNT1ZFX0lURU0iLCJnZXRHcmlkSW5kZXgiLCJnZXRDb2xJbmRleCIsIkFuIiwiZHJhZ0Nvb3JkaW5hdGVzIiwic2lnbiIsIkxuIiwiRElEX0RSQUciLCJwb3NpdGlvbiIsInNjb3BlTGVmdCIsImxpc3QiLCJzY29wZVRvcCIsIkRJRF9FTkRfRFJBRyIsImJuIiwib3ZlcmZsb3dpbmciLCJvdmVyZmxvdyIsInN0YXRlIiwiUG4iLCJNbiIsInduIiwiQ24iLCJObiIsIkduIiwiVW4iLCJCbiIsInNldEN1c3RvbVZhbGlkaXR5IiwiRm4iLCJoYW5kbGVDaGFuZ2UiLCJ3ZWJraXRSZWxhdGl2ZVBhdGgiLCJESURfU0VUX0RJU0FCTEVEIiwiRElEX1NFVF9BTExPV19CUk9XU0UiLCJESURfU0VUX0FMTE9XX0RJUkVDVE9SSUVTX09OTFkiLCJESURfU0VUX0FMTE9XX01VTFRJUExFIiwiRElEX1NFVF9BQ0NFUFRFRF9GSUxFX1RZUEVTIiwiRElEX1NFVF9DQVBUVVJFX01FVEhPRCIsIkRJRF9TRVRfUkVRVUlSRUQiLCJxbiIsIlZuIiwieG4iLCJxdWVyeVNlbGVjdG9yIiwiWW4iLCJoYW5kbGVLZXlEb3duIiwia2V5Q29kZSIsImNsaWNrIiwiY29udGFpbnMiLCJjYXB0aW9uIiwiRElEX1NFVF9MQUJFTF9JRExFIiwia24iLCJqbiIsImJsb2IiLCJESURfRFJPUCIsIkhuIiwiWG4iLCJXbiIsImZpZWxkcyIsInpuIiwiUW4iLCJabiIsIkRJRF9ERUZJTkVfVkFMVUUiLCJESURfUFJFUEFSRV9PVVRQVVQiLCJESURfUkVPUkRFUl9JVEVNUyIsIkRJRF9TT1JUX0lURU1TIiwiS24iLCIkbiIsIkpuIiwiZXIiLCJ6aXAiLCJlcHViIiwidHIiLCJuciIsImRyIiwicnIiLCJvciIsImlyIiwiYXIiLCJjciIsImZyIiwiaXNGaWxlIiwiaXNEaXJlY3RvcnkiLCJraW5kIiwibHIiLCJzciIsImdldEFzRmlsZSIsImNyZWF0ZVJlYWRlciIsInJlYWRFbnRyaWVzIiwidXIiLCJmdWxsUGF0aCIsIndlYmtpdEdldEFzRW50cnkiLCJFciIsInByIiwiZ2V0RGF0YSIsIl9yIiwiVHIiLCJwYWdlTGVmdCIsInBhZ2VUb3AiLCJsYXllclgiLCJsYXllclkiLCJJciIsInZyIiwiZHJhZ2VudGVyIiwiUnIiLCJkcmFnb3ZlciIsIk9yIiwiZHJhZ2xlYXZlIiwiRHIiLCJkcm9wIiwieXIiLCJhZGRMaXN0ZW5lciIsIm1yIiwiZWxlbWVudEZyb21Qb2ludCIsImdldFJvb3ROb2RlIiwicGFnZVhPZmZzZXQiLCJwYWdlWU9mZnNldCIsImhyIiwiZ3IiLCJkcm9wRWZmZWN0Iiwib25lbnRlciIsImRhdGFUcmFuc2ZlciIsImZpbHRlckVsZW1lbnQiLCJvbmV4aXQiLCJvbmRyYWciLCJhbGxvd2Ryb3AiLCJvbmRyb3AiLCJTciIsImNhdGNoZXNEcm9wc09uUGFnZSIsInJlcXVpcmVzRHJvcE9uRWxlbWVudCIsImZpbHRlckl0ZW1zIiwiZG9jdW1lbnRFbGVtZW50Iiwib25kcmFnZW5kIiwib25kcmFnc3RhcnQiLCJ1cGRhdGVIb3BwZXJTdGF0ZSIsImhvcHBlclN0YXRlIiwiQXIiLCJMciIsImJyIiwiYWN0aXZlRWxlbWVudCIsIm5vZGVOYW1lIiwiY2xpcGJvYXJkRGF0YSIsIlByIiwiTXIiLCJ3ciIsIkNyIiwiTnIiLCJ0ZXh0Q29udGVudCIsIkdyIiwiVXIiLCJCciIsIkZyIiwicXIiLCJWciIsIlJlZ0V4cCIsImNoYXJBdCIsInhyIiwiWXIiLCJrciIsImpyIiwidmlzdWFsIiwiYm91bmRzIiwiY2VpbCIsIkhyIiwibWVhc3VyZUhlaWdodCIsImNhcHBlZEhlaWdodCIsIm1heEhlaWdodCIsImZpeGVkSGVpZ2h0IiwiWHIiLCJXciIsInpyIiwiaG9wcGVyIiwiZHJpcCIsIlFyIiwiYnJvd3NlciIsIlpyIiwicGFzdGVyIiwiS3IiLCJESURfU0VUX0FMTE9XX0RST1AiLCJESURfU0VUX0FMTE9XX1BBU1RFIiwiJHIiLCJtZWFzdXJlIiwiYXNzaXN0YW50Iiwid2lkdGhQcmV2aW91cyIsIndpZHRoVXBkYXRlZCIsInVwZGF0ZUhpc3RvcnkiLCJwcmV2aW91c0FzcGVjdFJhdGlvIiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJwYXNzaXZlIiwidGFiaW5kZXgiLCJyZWwiLCJ0cmFuc2Zvcm0iLCJKciIsImdldFN0YXRlIiwicHJvY2Vzc0FjdGlvblF1ZXVlIiwicHJvY2Vzc0Rpc3BhdGNoUXVldWUiLCJpbm5lcldpZHRoIiwiRElEX0RFU1RST1kiLCJESURfSU5JVCIsIkRJRF9USFJPV19NQVhfRklMRVMiLCJESURfSU5JVF9JVEVNIiwiRElEX0NPTVBMRVRFX0lURU1fUFJPQ0VTU0lOR19BTEwiLCJESURfVVBEQVRFX0lURU1TIiwiRElEX0FDVElWQVRFX0lURU0iLCJwb25kIiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjb21wb3NlZCIsInNldE9wdGlvbnMiLCJhZGRGaWxlIiwiYWRkRmlsZXMiLCJnZXRGaWxlIiwicHJvY2Vzc0ZpbGUiLCJwcmVwYXJlRmlsZSIsInJlbW92ZUZpbGUiLCJtb3ZlRmlsZSIsImdldEZpbGVzIiwicHJvY2Vzc0ZpbGVzIiwicmVtb3ZlRmlsZXMiLCJwcmVwYXJlRmlsZXMiLCJicm93c2UiLCJpbnNlcnRBZnRlciIsImFwcGVuZFRvIiwicmVwbGFjZUVsZW1lbnQiLCJyZXN0b3JlRWxlbWVudCIsImlzQXR0YWNoZWRUbyIsImVvIiwidG8iLCJncm91cCIsIm1hcHBpbmciLCJubyIsIkhUTUxFbGVtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsInJvIiwib28iLCJpbyIsImFvIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiV29ya2VyIiwidHJhbnNmZXIiLCJwb3N0Iiwib25tZXNzYWdlIiwibWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidGVybWluYXRlIiwicmV2b2tlT2JqZWN0VVJMIiwic28iLCJJbWFnZSIsInNyYyIsInVvIiwibG8iLCJjbyIsImZvIiwiYWRkRmlsdGVyIiwidXRpbHMiLCJUeXBlIiwiZm9yaW4iLCJpc1N0cmluZyIsInRvTmF0dXJhbEZpbGVTaXplIiwicmVwbGFjZUluU3RyaW5nIiwiZ2V0RXh0ZW5zaW9uRnJvbUZpbGVuYW1lIiwiZ2V0RmlsZW5hbWVXaXRob3V0RXh0ZW5zaW9uIiwiZ3Vlc3N0aW1hdGVNaW1lVHlwZSIsImdldEZpbGVGcm9tQmxvYiIsImdldEZpbGVuYW1lRnJvbVVSTCIsImNyZWF0ZVJvdXRlIiwiY3JlYXRlV29ya2VyIiwiY3JlYXRlVmlldyIsImNyZWF0ZUl0ZW1BUEkiLCJsb2FkSW1hZ2UiLCJjb3B5RmlsZSIsInJlbmFtZUZpbGUiLCJjcmVhdGVCbG9iIiwiYXBwbHlGaWx0ZXJDaGFpbiIsInRleHQiLCJnZXROdW1lcmljQXNwZWN0UmF0aW9Gcm9tU3RyaW5nIiwidmlld3MiLCJmaWxlQWN0aW9uQnV0dG9uIiwicG8iLCJvcGVyYW1pbmkiLCJDU1MiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJFbyIsImFwcHMiLCJfbyIsIlN0YXR1cyIsIkZpbGVTdGF0dXMiLCJGaWxlT3JpZ2luIiwiT3B0aW9uVHlwZXMiLCJyZWdpc3RlclBsdWdpbiIsImdldE9wdGlvbnMiLCJyZWFkZXJzIiwid3JpdGVycyIsInBlcmZvcm1hbmNlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJUbyIsInN1cHBvcnRlZCIsIklvIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/trainer/filepond/filepond.min.js\n");

/***/ }),

/***/ "./resources/js/trainer/header.js":
/*!****************************************!*\
  !*** ./resources/js/trainer/header.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n\nwindow.jQuery = (jquery__WEBPACK_IMPORTED_MODULE_0___default());\nwindow.$ = (jquery__WEBPACK_IMPORTED_MODULE_0___default()); //jQuery\n\nwindow.jQuery = __webpack_require__(/*! ../../plugins/jquery/jquery.min.js */ \"./resources/plugins/jquery/jquery.min.js\");\nwindow.FilePond = __webpack_require__(/*! ../trainer/filepond/filepond.min.js */ \"./resources/js/trainer/filepond/filepond.min.js\");\n\n__webpack_require__(/*! ../trainer/filepond/filepond-plugin-image-preview.min.js */ \"./resources/js/trainer/filepond/filepond-plugin-image-preview.min.js\");\n\n__webpack_require__(/*! ../trainer/filepond/filepond.jquery.js */ \"./resources/js/trainer/filepond/filepond.jquery.js\"); //bootstrap\n\n\n__webpack_require__(/*! ../../plugins/bootstrap/js/bootstrap.bundle.min.js */ \"./resources/plugins/bootstrap/js/bootstrap.bundle.min.js\");\n\n__webpack_require__(/*! jquery-validation */ \"./node_modules/jquery-validation/dist/jquery.validate.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvdHJhaW5lci9oZWFkZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQUMsTUFBTSxDQUFDQyxNQUFQLEdBQWdCRiwrQ0FBaEI7QUFDQUMsTUFBTSxDQUFDRCxDQUFQLEdBQVdBLCtDQUFYLEVBRUE7O0FBQ0FDLE1BQU0sQ0FBQ0MsTUFBUCxHQUFnQkMsbUJBQU8sQ0FBRSxvRkFBRixDQUF2QjtBQUVBRixNQUFNLENBQUNHLFFBQVAsR0FBa0JELG1CQUFPLENBQUMsNEZBQUQsQ0FBekI7O0FBRUFBLG1CQUFPLENBQUMsc0lBQUQsQ0FBUDs7QUFFQUEsbUJBQU8sQ0FBQyxrR0FBRCxDQUFQLEVBRUE7OztBQUNBQSxtQkFBTyxDQUFDLG9IQUFELENBQVA7O0FBR0FBLG1CQUFPLENBQUMsbUZBQUQsQ0FBUCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy90cmFpbmVyL2hlYWRlci5qcz8yNWIzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG53aW5kb3cualF1ZXJ5ID0gJDtcbndpbmRvdy4kID0gJDtcblxuLy9qUXVlcnlcbndpbmRvdy5qUXVlcnkgPSByZXF1aXJlICgnLi4vLi4vcGx1Z2lucy9qcXVlcnkvanF1ZXJ5Lm1pbi5qcycpO1xuXG53aW5kb3cuRmlsZVBvbmQgPSByZXF1aXJlKCcuLi90cmFpbmVyL2ZpbGVwb25kL2ZpbGVwb25kLm1pbi5qcycpO1xuXG5yZXF1aXJlKCcuLi90cmFpbmVyL2ZpbGVwb25kL2ZpbGVwb25kLXBsdWdpbi1pbWFnZS1wcmV2aWV3Lm1pbi5qcycpO1xuXG5yZXF1aXJlKCcuLi90cmFpbmVyL2ZpbGVwb25kL2ZpbGVwb25kLmpxdWVyeS5qcycpO1xuXG4vL2Jvb3RzdHJhcFxucmVxdWlyZSgnLi4vLi4vcGx1Z2lucy9ib290c3RyYXAvanMvYm9vdHN0cmFwLmJ1bmRsZS5taW4uanMnKTtcblxuXG5yZXF1aXJlKCdqcXVlcnktdmFsaWRhdGlvbicpO1xuIl0sIm5hbWVzIjpbIiQiLCJ3aW5kb3ciLCJqUXVlcnkiLCJyZXF1aXJlIiwiRmlsZVBvbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/trainer/header.js\n");

/***/ }),

/***/ "./resources/plugins/bootstrap/js/bootstrap.bundle.min.js":
/*!****************************************************************!*\
  !*** ./resources/plugins/bootstrap/js/bootstrap.bundle.min.js ***!
  \****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*!\n  * Bootstrap v4.3.1 (https://getbootstrap.com/)\n  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n  */\n!function (t, e) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? e(exports, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function (t, p) {\n  \"use strict\";\n\n  function i(t, e) {\n    for (var n = 0; n < e.length; n++) {\n      var i = e[n];\n      i.enumerable = i.enumerable || !1, i.configurable = !0, \"value\" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);\n    }\n  }\n\n  function s(t, e, n) {\n    return e && i(t.prototype, e), n && i(t, n), t;\n  }\n\n  function l(o) {\n    for (var t = 1; t < arguments.length; t++) {\n      var r = null != arguments[t] ? arguments[t] : {},\n          e = Object.keys(r);\n      \"function\" == typeof Object.getOwnPropertySymbols && (e = e.concat(Object.getOwnPropertySymbols(r).filter(function (t) {\n        return Object.getOwnPropertyDescriptor(r, t).enumerable;\n      }))), e.forEach(function (t) {\n        var e, n, i;\n        e = o, i = r[n = t], n in e ? Object.defineProperty(e, n, {\n          value: i,\n          enumerable: !0,\n          configurable: !0,\n          writable: !0\n        }) : e[n] = i;\n      });\n    }\n\n    return o;\n  }\n\n  p = p && p.hasOwnProperty(\"default\") ? p[\"default\"] : p;\n  var e = \"transitionend\";\n\n  function n(t) {\n    var e = this,\n        n = !1;\n    return p(this).one(m.TRANSITION_END, function () {\n      n = !0;\n    }), setTimeout(function () {\n      n || m.triggerTransitionEnd(e);\n    }, t), this;\n  }\n\n  var m = {\n    TRANSITION_END: \"bsTransitionEnd\",\n    getUID: function getUID(t) {\n      for (; t += ~~(1e6 * Math.random()), document.getElementById(t);) {\n        ;\n      }\n\n      return t;\n    },\n    getSelectorFromElement: function getSelectorFromElement(t) {\n      var e = t.getAttribute(\"data-target\");\n\n      if (!e || \"#\" === e) {\n        var n = t.getAttribute(\"href\");\n        e = n && \"#\" !== n ? n.trim() : \"\";\n      }\n\n      try {\n        return document.querySelector(e) ? e : null;\n      } catch (t) {\n        return null;\n      }\n    },\n    getTransitionDurationFromElement: function getTransitionDurationFromElement(t) {\n      if (!t) return 0;\n      var e = p(t).css(\"transition-duration\"),\n          n = p(t).css(\"transition-delay\"),\n          i = parseFloat(e),\n          o = parseFloat(n);\n      return i || o ? (e = e.split(\",\")[0], n = n.split(\",\")[0], 1e3 * (parseFloat(e) + parseFloat(n))) : 0;\n    },\n    reflow: function reflow(t) {\n      return t.offsetHeight;\n    },\n    triggerTransitionEnd: function triggerTransitionEnd(t) {\n      p(t).trigger(e);\n    },\n    supportsTransitionEnd: function supportsTransitionEnd() {\n      return Boolean(e);\n    },\n    isElement: function isElement(t) {\n      return (t[0] || t).nodeType;\n    },\n    typeCheckConfig: function typeCheckConfig(t, e, n) {\n      for (var i in n) {\n        if (Object.prototype.hasOwnProperty.call(n, i)) {\n          var o = n[i],\n              r = e[i],\n              s = r && m.isElement(r) ? \"element\" : (a = r, {}.toString.call(a).match(/\\s([a-z]+)/i)[1].toLowerCase());\n          if (!new RegExp(o).test(s)) throw new Error(t.toUpperCase() + ': Option \"' + i + '\" provided type \"' + s + '\" but expected type \"' + o + '\".');\n        }\n      }\n\n      var a;\n    },\n    findShadowRoot: function findShadowRoot(t) {\n      if (!document.documentElement.attachShadow) return null;\n      if (\"function\" != typeof t.getRootNode) return t instanceof ShadowRoot ? t : t.parentNode ? m.findShadowRoot(t.parentNode) : null;\n      var e = t.getRootNode();\n      return e instanceof ShadowRoot ? e : null;\n    }\n  };\n  p.fn.emulateTransitionEnd = n, p.event.special[m.TRANSITION_END] = {\n    bindType: e,\n    delegateType: e,\n    handle: function handle(t) {\n      if (p(t.target).is(this)) return t.handleObj.handler.apply(this, arguments);\n    }\n  };\n\n  var o = \"alert\",\n      r = \"bs.alert\",\n      a = \".\" + r,\n      c = p.fn[o],\n      h = {\n    CLOSE: \"close\" + a,\n    CLOSED: \"closed\" + a,\n    CLICK_DATA_API: \"click\" + a + \".data-api\"\n  },\n      u = \"alert\",\n      f = \"fade\",\n      d = \"show\",\n      g = function () {\n    function i(t) {\n      this._element = t;\n    }\n\n    var t = i.prototype;\n    return t.close = function (t) {\n      var e = this._element;\n      t && (e = this._getRootElement(t)), this._triggerCloseEvent(e).isDefaultPrevented() || this._removeElement(e);\n    }, t.dispose = function () {\n      p.removeData(this._element, r), this._element = null;\n    }, t._getRootElement = function (t) {\n      var e = m.getSelectorFromElement(t),\n          n = !1;\n      return e && (n = document.querySelector(e)), n || (n = p(t).closest(\".\" + u)[0]), n;\n    }, t._triggerCloseEvent = function (t) {\n      var e = p.Event(h.CLOSE);\n      return p(t).trigger(e), e;\n    }, t._removeElement = function (e) {\n      var n = this;\n\n      if (p(e).removeClass(d), p(e).hasClass(f)) {\n        var t = m.getTransitionDurationFromElement(e);\n        p(e).one(m.TRANSITION_END, function (t) {\n          return n._destroyElement(e, t);\n        }).emulateTransitionEnd(t);\n      } else this._destroyElement(e);\n    }, t._destroyElement = function (t) {\n      p(t).detach().trigger(h.CLOSED).remove();\n    }, i._jQueryInterface = function (n) {\n      return this.each(function () {\n        var t = p(this),\n            e = t.data(r);\n        e || (e = new i(this), t.data(r, e)), \"close\" === n && e[n](this);\n      });\n    }, i._handleDismiss = function (e) {\n      return function (t) {\n        t && t.preventDefault(), e.close(this);\n      };\n    }, s(i, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }]), i;\n  }();\n\n  p(document).on(h.CLICK_DATA_API, '[data-dismiss=\"alert\"]', g._handleDismiss(new g())), p.fn[o] = g._jQueryInterface, p.fn[o].Constructor = g, p.fn[o].noConflict = function () {\n    return p.fn[o] = c, g._jQueryInterface;\n  };\n\n  var _ = \"button\",\n      v = \"bs.button\",\n      y = \".\" + v,\n      E = \".data-api\",\n      b = p.fn[_],\n      w = \"active\",\n      C = \"btn\",\n      T = \"focus\",\n      S = '[data-toggle^=\"button\"]',\n      D = '[data-toggle=\"buttons\"]',\n      I = 'input:not([type=\"hidden\"])',\n      A = \".active\",\n      O = \".btn\",\n      N = {\n    CLICK_DATA_API: \"click\" + y + E,\n    FOCUS_BLUR_DATA_API: \"focus\" + y + E + \" blur\" + y + E\n  },\n      k = function () {\n    function n(t) {\n      this._element = t;\n    }\n\n    var t = n.prototype;\n    return t.toggle = function () {\n      var t = !0,\n          e = !0,\n          n = p(this._element).closest(D)[0];\n\n      if (n) {\n        var i = this._element.querySelector(I);\n\n        if (i) {\n          if (\"radio\" === i.type) if (i.checked && this._element.classList.contains(w)) t = !1;else {\n            var o = n.querySelector(A);\n            o && p(o).removeClass(w);\n          }\n\n          if (t) {\n            if (i.hasAttribute(\"disabled\") || n.hasAttribute(\"disabled\") || i.classList.contains(\"disabled\") || n.classList.contains(\"disabled\")) return;\n            i.checked = !this._element.classList.contains(w), p(i).trigger(\"change\");\n          }\n\n          i.focus(), e = !1;\n        }\n      }\n\n      e && this._element.setAttribute(\"aria-pressed\", !this._element.classList.contains(w)), t && p(this._element).toggleClass(w);\n    }, t.dispose = function () {\n      p.removeData(this._element, v), this._element = null;\n    }, n._jQueryInterface = function (e) {\n      return this.each(function () {\n        var t = p(this).data(v);\n        t || (t = new n(this), p(this).data(v, t)), \"toggle\" === e && t[e]();\n      });\n    }, s(n, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }]), n;\n  }();\n\n  p(document).on(N.CLICK_DATA_API, S, function (t) {\n    t.preventDefault();\n    var e = t.target;\n    p(e).hasClass(C) || (e = p(e).closest(O)), k._jQueryInterface.call(p(e), \"toggle\");\n  }).on(N.FOCUS_BLUR_DATA_API, S, function (t) {\n    var e = p(t.target).closest(O)[0];\n    p(e).toggleClass(T, /^focus(in)?$/.test(t.type));\n  }), p.fn[_] = k._jQueryInterface, p.fn[_].Constructor = k, p.fn[_].noConflict = function () {\n    return p.fn[_] = b, k._jQueryInterface;\n  };\n\n  var L = \"carousel\",\n      x = \"bs.carousel\",\n      P = \".\" + x,\n      H = \".data-api\",\n      j = p.fn[L],\n      R = {\n    interval: 5e3,\n    keyboard: !0,\n    slide: !1,\n    pause: \"hover\",\n    wrap: !0,\n    touch: !0\n  },\n      F = {\n    interval: \"(number|boolean)\",\n    keyboard: \"boolean\",\n    slide: \"(boolean|string)\",\n    pause: \"(string|boolean)\",\n    wrap: \"boolean\",\n    touch: \"boolean\"\n  },\n      M = \"next\",\n      W = \"prev\",\n      U = \"left\",\n      B = \"right\",\n      q = {\n    SLIDE: \"slide\" + P,\n    SLID: \"slid\" + P,\n    KEYDOWN: \"keydown\" + P,\n    MOUSEENTER: \"mouseenter\" + P,\n    MOUSELEAVE: \"mouseleave\" + P,\n    TOUCHSTART: \"touchstart\" + P,\n    TOUCHMOVE: \"touchmove\" + P,\n    TOUCHEND: \"touchend\" + P,\n    POINTERDOWN: \"pointerdown\" + P,\n    POINTERUP: \"pointerup\" + P,\n    DRAG_START: \"dragstart\" + P,\n    LOAD_DATA_API: \"load\" + P + H,\n    CLICK_DATA_API: \"click\" + P + H\n  },\n      K = \"carousel\",\n      Q = \"active\",\n      V = \"slide\",\n      Y = \"carousel-item-right\",\n      z = \"carousel-item-left\",\n      X = \"carousel-item-next\",\n      G = \"carousel-item-prev\",\n      $ = \"pointer-event\",\n      J = \".active\",\n      Z = \".active.carousel-item\",\n      tt = \".carousel-item\",\n      et = \".carousel-item img\",\n      nt = \".carousel-item-next, .carousel-item-prev\",\n      it = \".carousel-indicators\",\n      ot = \"[data-slide], [data-slide-to]\",\n      rt = '[data-ride=\"carousel\"]',\n      st = {\n    TOUCH: \"touch\",\n    PEN: \"pen\"\n  },\n      at = function () {\n    function r(t, e) {\n      this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this.touchStartX = 0, this.touchDeltaX = 0, this._config = this._getConfig(e), this._element = t, this._indicatorsElement = this._element.querySelector(it), this._touchSupported = \"ontouchstart\" in document.documentElement || 0 < navigator.maxTouchPoints, this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent), this._addEventListeners();\n    }\n\n    var t = r.prototype;\n    return t.next = function () {\n      this._isSliding || this._slide(M);\n    }, t.nextWhenVisible = function () {\n      !document.hidden && p(this._element).is(\":visible\") && \"hidden\" !== p(this._element).css(\"visibility\") && this.next();\n    }, t.prev = function () {\n      this._isSliding || this._slide(W);\n    }, t.pause = function (t) {\n      t || (this._isPaused = !0), this._element.querySelector(nt) && (m.triggerTransitionEnd(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;\n    }, t.cycle = function (t) {\n      t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));\n    }, t.to = function (t) {\n      var e = this;\n      this._activeElement = this._element.querySelector(Z);\n\n      var n = this._getItemIndex(this._activeElement);\n\n      if (!(t > this._items.length - 1 || t < 0)) if (this._isSliding) p(this._element).one(q.SLID, function () {\n        return e.to(t);\n      });else {\n        if (n === t) return this.pause(), void this.cycle();\n        var i = n < t ? M : W;\n\n        this._slide(i, this._items[t]);\n      }\n    }, t.dispose = function () {\n      p(this._element).off(P), p.removeData(this._element, x), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null;\n    }, t._getConfig = function (t) {\n      return t = l({}, R, t), m.typeCheckConfig(L, t, F), t;\n    }, t._handleSwipe = function () {\n      var t = Math.abs(this.touchDeltaX);\n\n      if (!(t <= 40)) {\n        var e = t / this.touchDeltaX;\n        0 < e && this.prev(), e < 0 && this.next();\n      }\n    }, t._addEventListeners = function () {\n      var e = this;\n      this._config.keyboard && p(this._element).on(q.KEYDOWN, function (t) {\n        return e._keydown(t);\n      }), \"hover\" === this._config.pause && p(this._element).on(q.MOUSEENTER, function (t) {\n        return e.pause(t);\n      }).on(q.MOUSELEAVE, function (t) {\n        return e.cycle(t);\n      }), this._config.touch && this._addTouchEventListeners();\n    }, t._addTouchEventListeners = function () {\n      var n = this;\n\n      if (this._touchSupported) {\n        var e = function e(t) {\n          n._pointerEvent && st[t.originalEvent.pointerType.toUpperCase()] ? n.touchStartX = t.originalEvent.clientX : n._pointerEvent || (n.touchStartX = t.originalEvent.touches[0].clientX);\n        },\n            i = function i(t) {\n          n._pointerEvent && st[t.originalEvent.pointerType.toUpperCase()] && (n.touchDeltaX = t.originalEvent.clientX - n.touchStartX), n._handleSwipe(), \"hover\" === n._config.pause && (n.pause(), n.touchTimeout && clearTimeout(n.touchTimeout), n.touchTimeout = setTimeout(function (t) {\n            return n.cycle(t);\n          }, 500 + n._config.interval));\n        };\n\n        p(this._element.querySelectorAll(et)).on(q.DRAG_START, function (t) {\n          return t.preventDefault();\n        }), this._pointerEvent ? (p(this._element).on(q.POINTERDOWN, function (t) {\n          return e(t);\n        }), p(this._element).on(q.POINTERUP, function (t) {\n          return i(t);\n        }), this._element.classList.add($)) : (p(this._element).on(q.TOUCHSTART, function (t) {\n          return e(t);\n        }), p(this._element).on(q.TOUCHMOVE, function (t) {\n          var e;\n          (e = t).originalEvent.touches && 1 < e.originalEvent.touches.length ? n.touchDeltaX = 0 : n.touchDeltaX = e.originalEvent.touches[0].clientX - n.touchStartX;\n        }), p(this._element).on(q.TOUCHEND, function (t) {\n          return i(t);\n        }));\n      }\n    }, t._keydown = function (t) {\n      if (!/input|textarea/i.test(t.target.tagName)) switch (t.which) {\n        case 37:\n          t.preventDefault(), this.prev();\n          break;\n\n        case 39:\n          t.preventDefault(), this.next();\n      }\n    }, t._getItemIndex = function (t) {\n      return this._items = t && t.parentNode ? [].slice.call(t.parentNode.querySelectorAll(tt)) : [], this._items.indexOf(t);\n    }, t._getItemByDirection = function (t, e) {\n      var n = t === M,\n          i = t === W,\n          o = this._getItemIndex(e),\n          r = this._items.length - 1;\n\n      if ((i && 0 === o || n && o === r) && !this._config.wrap) return e;\n      var s = (o + (t === W ? -1 : 1)) % this._items.length;\n      return -1 === s ? this._items[this._items.length - 1] : this._items[s];\n    }, t._triggerSlideEvent = function (t, e) {\n      var n = this._getItemIndex(t),\n          i = this._getItemIndex(this._element.querySelector(Z)),\n          o = p.Event(q.SLIDE, {\n        relatedTarget: t,\n        direction: e,\n        from: i,\n        to: n\n      });\n\n      return p(this._element).trigger(o), o;\n    }, t._setActiveIndicatorElement = function (t) {\n      if (this._indicatorsElement) {\n        var e = [].slice.call(this._indicatorsElement.querySelectorAll(J));\n        p(e).removeClass(Q);\n\n        var n = this._indicatorsElement.children[this._getItemIndex(t)];\n\n        n && p(n).addClass(Q);\n      }\n    }, t._slide = function (t, e) {\n      var n,\n          i,\n          o,\n          r = this,\n          s = this._element.querySelector(Z),\n          a = this._getItemIndex(s),\n          l = e || s && this._getItemByDirection(t, s),\n          c = this._getItemIndex(l),\n          h = Boolean(this._interval);\n\n      if (o = t === M ? (n = z, i = X, U) : (n = Y, i = G, B), l && p(l).hasClass(Q)) this._isSliding = !1;else if (!this._triggerSlideEvent(l, o).isDefaultPrevented() && s && l) {\n        this._isSliding = !0, h && this.pause(), this._setActiveIndicatorElement(l);\n        var u = p.Event(q.SLID, {\n          relatedTarget: l,\n          direction: o,\n          from: a,\n          to: c\n        });\n\n        if (p(this._element).hasClass(V)) {\n          p(l).addClass(i), m.reflow(l), p(s).addClass(n), p(l).addClass(n);\n          var f = parseInt(l.getAttribute(\"data-interval\"), 10);\n          this._config.interval = f ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, f) : this._config.defaultInterval || this._config.interval;\n          var d = m.getTransitionDurationFromElement(s);\n          p(s).one(m.TRANSITION_END, function () {\n            p(l).removeClass(n + \" \" + i).addClass(Q), p(s).removeClass(Q + \" \" + i + \" \" + n), r._isSliding = !1, setTimeout(function () {\n              return p(r._element).trigger(u);\n            }, 0);\n          }).emulateTransitionEnd(d);\n        } else p(s).removeClass(Q), p(l).addClass(Q), this._isSliding = !1, p(this._element).trigger(u);\n\n        h && this.cycle();\n      }\n    }, r._jQueryInterface = function (i) {\n      return this.each(function () {\n        var t = p(this).data(x),\n            e = l({}, R, p(this).data());\n        \"object\" == _typeof(i) && (e = l({}, e, i));\n        var n = \"string\" == typeof i ? i : e.slide;\n        if (t || (t = new r(this, e), p(this).data(x, t)), \"number\" == typeof i) t.to(i);else if (\"string\" == typeof n) {\n          if (\"undefined\" == typeof t[n]) throw new TypeError('No method named \"' + n + '\"');\n          t[n]();\n        } else e.interval && e.ride && (t.pause(), t.cycle());\n      });\n    }, r._dataApiClickHandler = function (t) {\n      var e = m.getSelectorFromElement(this);\n\n      if (e) {\n        var n = p(e)[0];\n\n        if (n && p(n).hasClass(K)) {\n          var i = l({}, p(n).data(), p(this).data()),\n              o = this.getAttribute(\"data-slide-to\");\n          o && (i.interval = !1), r._jQueryInterface.call(p(n), i), o && p(n).data(x).to(o), t.preventDefault();\n        }\n      }\n    }, s(r, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return R;\n      }\n    }]), r;\n  }();\n\n  p(document).on(q.CLICK_DATA_API, ot, at._dataApiClickHandler), p(window).on(q.LOAD_DATA_API, function () {\n    for (var t = [].slice.call(document.querySelectorAll(rt)), e = 0, n = t.length; e < n; e++) {\n      var i = p(t[e]);\n\n      at._jQueryInterface.call(i, i.data());\n    }\n  }), p.fn[L] = at._jQueryInterface, p.fn[L].Constructor = at, p.fn[L].noConflict = function () {\n    return p.fn[L] = j, at._jQueryInterface;\n  };\n\n  var lt = \"collapse\",\n      ct = \"bs.collapse\",\n      ht = \".\" + ct,\n      ut = p.fn[lt],\n      ft = {\n    toggle: !0,\n    parent: \"\"\n  },\n      dt = {\n    toggle: \"boolean\",\n    parent: \"(string|element)\"\n  },\n      pt = {\n    SHOW: \"show\" + ht,\n    SHOWN: \"shown\" + ht,\n    HIDE: \"hide\" + ht,\n    HIDDEN: \"hidden\" + ht,\n    CLICK_DATA_API: \"click\" + ht + \".data-api\"\n  },\n      mt = \"show\",\n      gt = \"collapse\",\n      _t = \"collapsing\",\n      vt = \"collapsed\",\n      yt = \"width\",\n      Et = \"height\",\n      bt = \".show, .collapsing\",\n      wt = '[data-toggle=\"collapse\"]',\n      Ct = function () {\n    function a(e, t) {\n      this._isTransitioning = !1, this._element = e, this._config = this._getConfig(t), this._triggerArray = [].slice.call(document.querySelectorAll('[data-toggle=\"collapse\"][href=\"#' + e.id + '\"],[data-toggle=\"collapse\"][data-target=\"#' + e.id + '\"]'));\n\n      for (var n = [].slice.call(document.querySelectorAll(wt)), i = 0, o = n.length; i < o; i++) {\n        var r = n[i],\n            s = m.getSelectorFromElement(r),\n            a = [].slice.call(document.querySelectorAll(s)).filter(function (t) {\n          return t === e;\n        });\n        null !== s && 0 < a.length && (this._selector = s, this._triggerArray.push(r));\n      }\n\n      this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle();\n    }\n\n    var t = a.prototype;\n    return t.toggle = function () {\n      p(this._element).hasClass(mt) ? this.hide() : this.show();\n    }, t.show = function () {\n      var t,\n          e,\n          n = this;\n\n      if (!this._isTransitioning && !p(this._element).hasClass(mt) && (this._parent && 0 === (t = [].slice.call(this._parent.querySelectorAll(bt)).filter(function (t) {\n        return \"string\" == typeof n._config.parent ? t.getAttribute(\"data-parent\") === n._config.parent : t.classList.contains(gt);\n      })).length && (t = null), !(t && (e = p(t).not(this._selector).data(ct)) && e._isTransitioning))) {\n        var i = p.Event(pt.SHOW);\n\n        if (p(this._element).trigger(i), !i.isDefaultPrevented()) {\n          t && (a._jQueryInterface.call(p(t).not(this._selector), \"hide\"), e || p(t).data(ct, null));\n\n          var o = this._getDimension();\n\n          p(this._element).removeClass(gt).addClass(_t), this._element.style[o] = 0, this._triggerArray.length && p(this._triggerArray).removeClass(vt).attr(\"aria-expanded\", !0), this.setTransitioning(!0);\n          var r = \"scroll\" + (o[0].toUpperCase() + o.slice(1)),\n              s = m.getTransitionDurationFromElement(this._element);\n          p(this._element).one(m.TRANSITION_END, function () {\n            p(n._element).removeClass(_t).addClass(gt).addClass(mt), n._element.style[o] = \"\", n.setTransitioning(!1), p(n._element).trigger(pt.SHOWN);\n          }).emulateTransitionEnd(s), this._element.style[o] = this._element[r] + \"px\";\n        }\n      }\n    }, t.hide = function () {\n      var t = this;\n\n      if (!this._isTransitioning && p(this._element).hasClass(mt)) {\n        var e = p.Event(pt.HIDE);\n\n        if (p(this._element).trigger(e), !e.isDefaultPrevented()) {\n          var n = this._getDimension();\n\n          this._element.style[n] = this._element.getBoundingClientRect()[n] + \"px\", m.reflow(this._element), p(this._element).addClass(_t).removeClass(gt).removeClass(mt);\n          var i = this._triggerArray.length;\n          if (0 < i) for (var o = 0; o < i; o++) {\n            var r = this._triggerArray[o],\n                s = m.getSelectorFromElement(r);\n            if (null !== s) p([].slice.call(document.querySelectorAll(s))).hasClass(mt) || p(r).addClass(vt).attr(\"aria-expanded\", !1);\n          }\n          this.setTransitioning(!0);\n          this._element.style[n] = \"\";\n          var a = m.getTransitionDurationFromElement(this._element);\n          p(this._element).one(m.TRANSITION_END, function () {\n            t.setTransitioning(!1), p(t._element).removeClass(_t).addClass(gt).trigger(pt.HIDDEN);\n          }).emulateTransitionEnd(a);\n        }\n      }\n    }, t.setTransitioning = function (t) {\n      this._isTransitioning = t;\n    }, t.dispose = function () {\n      p.removeData(this._element, ct), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null;\n    }, t._getConfig = function (t) {\n      return (t = l({}, ft, t)).toggle = Boolean(t.toggle), m.typeCheckConfig(lt, t, dt), t;\n    }, t._getDimension = function () {\n      return p(this._element).hasClass(yt) ? yt : Et;\n    }, t._getParent = function () {\n      var t,\n          n = this;\n      m.isElement(this._config.parent) ? (t = this._config.parent, \"undefined\" != typeof this._config.parent.jquery && (t = this._config.parent[0])) : t = document.querySelector(this._config.parent);\n      var e = '[data-toggle=\"collapse\"][data-parent=\"' + this._config.parent + '\"]',\n          i = [].slice.call(t.querySelectorAll(e));\n      return p(i).each(function (t, e) {\n        n._addAriaAndCollapsedClass(a._getTargetFromElement(e), [e]);\n      }), t;\n    }, t._addAriaAndCollapsedClass = function (t, e) {\n      var n = p(t).hasClass(mt);\n      e.length && p(e).toggleClass(vt, !n).attr(\"aria-expanded\", n);\n    }, a._getTargetFromElement = function (t) {\n      var e = m.getSelectorFromElement(t);\n      return e ? document.querySelector(e) : null;\n    }, a._jQueryInterface = function (i) {\n      return this.each(function () {\n        var t = p(this),\n            e = t.data(ct),\n            n = l({}, ft, t.data(), \"object\" == _typeof(i) && i ? i : {});\n\n        if (!e && n.toggle && /show|hide/.test(i) && (n.toggle = !1), e || (e = new a(this, n), t.data(ct, e)), \"string\" == typeof i) {\n          if (\"undefined\" == typeof e[i]) throw new TypeError('No method named \"' + i + '\"');\n          e[i]();\n        }\n      });\n    }, s(a, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return ft;\n      }\n    }]), a;\n  }();\n\n  p(document).on(pt.CLICK_DATA_API, wt, function (t) {\n    \"A\" === t.currentTarget.tagName && t.preventDefault();\n    var n = p(this),\n        e = m.getSelectorFromElement(this),\n        i = [].slice.call(document.querySelectorAll(e));\n    p(i).each(function () {\n      var t = p(this),\n          e = t.data(ct) ? \"toggle\" : n.data();\n\n      Ct._jQueryInterface.call(t, e);\n    });\n  }), p.fn[lt] = Ct._jQueryInterface, p.fn[lt].Constructor = Ct, p.fn[lt].noConflict = function () {\n    return p.fn[lt] = ut, Ct._jQueryInterface;\n  };\n\n  for (var Tt = \"undefined\" != typeof window && \"undefined\" != typeof document, St = [\"Edge\", \"Trident\", \"Firefox\"], Dt = 0, It = 0; It < St.length; It += 1) {\n    if (Tt && 0 <= navigator.userAgent.indexOf(St[It])) {\n      Dt = 1;\n      break;\n    }\n  }\n\n  var At = Tt && window.Promise ? function (t) {\n    var e = !1;\n    return function () {\n      e || (e = !0, window.Promise.resolve().then(function () {\n        e = !1, t();\n      }));\n    };\n  } : function (t) {\n    var e = !1;\n    return function () {\n      e || (e = !0, setTimeout(function () {\n        e = !1, t();\n      }, Dt));\n    };\n  };\n\n  function Ot(t) {\n    return t && \"[object Function]\" === {}.toString.call(t);\n  }\n\n  function Nt(t, e) {\n    if (1 !== t.nodeType) return [];\n    var n = t.ownerDocument.defaultView.getComputedStyle(t, null);\n    return e ? n[e] : n;\n  }\n\n  function kt(t) {\n    return \"HTML\" === t.nodeName ? t : t.parentNode || t.host;\n  }\n\n  function Lt(t) {\n    if (!t) return document.body;\n\n    switch (t.nodeName) {\n      case \"HTML\":\n      case \"BODY\":\n        return t.ownerDocument.body;\n\n      case \"#document\":\n        return t.body;\n    }\n\n    var e = Nt(t),\n        n = e.overflow,\n        i = e.overflowX,\n        o = e.overflowY;\n    return /(auto|scroll|overlay)/.test(n + o + i) ? t : Lt(kt(t));\n  }\n\n  var xt = Tt && !(!window.MSInputMethodContext || !document.documentMode),\n      Pt = Tt && /MSIE 10/.test(navigator.userAgent);\n\n  function Ht(t) {\n    return 11 === t ? xt : 10 === t ? Pt : xt || Pt;\n  }\n\n  function jt(t) {\n    if (!t) return document.documentElement;\n\n    for (var e = Ht(10) ? document.body : null, n = t.offsetParent || null; n === e && t.nextElementSibling;) {\n      n = (t = t.nextElementSibling).offsetParent;\n    }\n\n    var i = n && n.nodeName;\n    return i && \"BODY\" !== i && \"HTML\" !== i ? -1 !== [\"TH\", \"TD\", \"TABLE\"].indexOf(n.nodeName) && \"static\" === Nt(n, \"position\") ? jt(n) : n : t ? t.ownerDocument.documentElement : document.documentElement;\n  }\n\n  function Rt(t) {\n    return null !== t.parentNode ? Rt(t.parentNode) : t;\n  }\n\n  function Ft(t, e) {\n    if (!(t && t.nodeType && e && e.nodeType)) return document.documentElement;\n    var n = t.compareDocumentPosition(e) & Node.DOCUMENT_POSITION_FOLLOWING,\n        i = n ? t : e,\n        o = n ? e : t,\n        r = document.createRange();\n    r.setStart(i, 0), r.setEnd(o, 0);\n    var s,\n        a,\n        l = r.commonAncestorContainer;\n    if (t !== l && e !== l || i.contains(o)) return \"BODY\" === (a = (s = l).nodeName) || \"HTML\" !== a && jt(s.firstElementChild) !== s ? jt(l) : l;\n    var c = Rt(t);\n    return c.host ? Ft(c.host, e) : Ft(t, Rt(e).host);\n  }\n\n  function Mt(t) {\n    var e = \"top\" === (1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : \"top\") ? \"scrollTop\" : \"scrollLeft\",\n        n = t.nodeName;\n    if (\"BODY\" !== n && \"HTML\" !== n) return t[e];\n    var i = t.ownerDocument.documentElement;\n    return (t.ownerDocument.scrollingElement || i)[e];\n  }\n\n  function Wt(t, e) {\n    var n = \"x\" === e ? \"Left\" : \"Top\",\n        i = \"Left\" === n ? \"Right\" : \"Bottom\";\n    return parseFloat(t[\"border\" + n + \"Width\"], 10) + parseFloat(t[\"border\" + i + \"Width\"], 10);\n  }\n\n  function Ut(t, e, n, i) {\n    return Math.max(e[\"offset\" + t], e[\"scroll\" + t], n[\"client\" + t], n[\"offset\" + t], n[\"scroll\" + t], Ht(10) ? parseInt(n[\"offset\" + t]) + parseInt(i[\"margin\" + (\"Height\" === t ? \"Top\" : \"Left\")]) + parseInt(i[\"margin\" + (\"Height\" === t ? \"Bottom\" : \"Right\")]) : 0);\n  }\n\n  function Bt(t) {\n    var e = t.body,\n        n = t.documentElement,\n        i = Ht(10) && getComputedStyle(n);\n    return {\n      height: Ut(\"Height\", e, n, i),\n      width: Ut(\"Width\", e, n, i)\n    };\n  }\n\n  var qt = function () {\n    function i(t, e) {\n      for (var n = 0; n < e.length; n++) {\n        var i = e[n];\n        i.enumerable = i.enumerable || !1, i.configurable = !0, \"value\" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);\n      }\n    }\n\n    return function (t, e, n) {\n      return e && i(t.prototype, e), n && i(t, n), t;\n    };\n  }(),\n      Kt = function Kt(t, e, n) {\n    return e in t ? Object.defineProperty(t, e, {\n      value: n,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : t[e] = n, t;\n  },\n      Qt = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var n = arguments[e];\n\n      for (var i in n) {\n        Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);\n      }\n    }\n\n    return t;\n  };\n\n  function Vt(t) {\n    return Qt({}, t, {\n      right: t.left + t.width,\n      bottom: t.top + t.height\n    });\n  }\n\n  function Yt(t) {\n    var e = {};\n\n    try {\n      if (Ht(10)) {\n        e = t.getBoundingClientRect();\n        var n = Mt(t, \"top\"),\n            i = Mt(t, \"left\");\n        e.top += n, e.left += i, e.bottom += n, e.right += i;\n      } else e = t.getBoundingClientRect();\n    } catch (t) {}\n\n    var o = {\n      left: e.left,\n      top: e.top,\n      width: e.right - e.left,\n      height: e.bottom - e.top\n    },\n        r = \"HTML\" === t.nodeName ? Bt(t.ownerDocument) : {},\n        s = r.width || t.clientWidth || o.right - o.left,\n        a = r.height || t.clientHeight || o.bottom - o.top,\n        l = t.offsetWidth - s,\n        c = t.offsetHeight - a;\n\n    if (l || c) {\n      var h = Nt(t);\n      l -= Wt(h, \"x\"), c -= Wt(h, \"y\"), o.width -= l, o.height -= c;\n    }\n\n    return Vt(o);\n  }\n\n  function zt(t, e) {\n    var n = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],\n        i = Ht(10),\n        o = \"HTML\" === e.nodeName,\n        r = Yt(t),\n        s = Yt(e),\n        a = Lt(t),\n        l = Nt(e),\n        c = parseFloat(l.borderTopWidth, 10),\n        h = parseFloat(l.borderLeftWidth, 10);\n    n && o && (s.top = Math.max(s.top, 0), s.left = Math.max(s.left, 0));\n    var u = Vt({\n      top: r.top - s.top - c,\n      left: r.left - s.left - h,\n      width: r.width,\n      height: r.height\n    });\n\n    if (u.marginTop = 0, u.marginLeft = 0, !i && o) {\n      var f = parseFloat(l.marginTop, 10),\n          d = parseFloat(l.marginLeft, 10);\n      u.top -= c - f, u.bottom -= c - f, u.left -= h - d, u.right -= h - d, u.marginTop = f, u.marginLeft = d;\n    }\n\n    return (i && !n ? e.contains(a) : e === a && \"BODY\" !== a.nodeName) && (u = function (t, e) {\n      var n = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],\n          i = Mt(e, \"top\"),\n          o = Mt(e, \"left\"),\n          r = n ? -1 : 1;\n      return t.top += i * r, t.bottom += i * r, t.left += o * r, t.right += o * r, t;\n    }(u, e)), u;\n  }\n\n  function Xt(t) {\n    if (!t || !t.parentElement || Ht()) return document.documentElement;\n\n    for (var e = t.parentElement; e && \"none\" === Nt(e, \"transform\");) {\n      e = e.parentElement;\n    }\n\n    return e || document.documentElement;\n  }\n\n  function Gt(t, e, n, i) {\n    var o = 4 < arguments.length && void 0 !== arguments[4] && arguments[4],\n        r = {\n      top: 0,\n      left: 0\n    },\n        s = o ? Xt(t) : Ft(t, e);\n    if (\"viewport\" === i) r = function (t) {\n      var e = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],\n          n = t.ownerDocument.documentElement,\n          i = zt(t, n),\n          o = Math.max(n.clientWidth, window.innerWidth || 0),\n          r = Math.max(n.clientHeight, window.innerHeight || 0),\n          s = e ? 0 : Mt(n),\n          a = e ? 0 : Mt(n, \"left\");\n      return Vt({\n        top: s - i.top + i.marginTop,\n        left: a - i.left + i.marginLeft,\n        width: o,\n        height: r\n      });\n    }(s, o);else {\n      var a = void 0;\n      \"scrollParent\" === i ? \"BODY\" === (a = Lt(kt(e))).nodeName && (a = t.ownerDocument.documentElement) : a = \"window\" === i ? t.ownerDocument.documentElement : i;\n      var l = zt(a, s, o);\n      if (\"HTML\" !== a.nodeName || function t(e) {\n        var n = e.nodeName;\n        if (\"BODY\" === n || \"HTML\" === n) return !1;\n        if (\"fixed\" === Nt(e, \"position\")) return !0;\n        var i = kt(e);\n        return !!i && t(i);\n      }(s)) r = l;else {\n        var c = Bt(t.ownerDocument),\n            h = c.height,\n            u = c.width;\n        r.top += l.top - l.marginTop, r.bottom = h + l.top, r.left += l.left - l.marginLeft, r.right = u + l.left;\n      }\n    }\n    var f = \"number\" == typeof (n = n || 0);\n    return r.left += f ? n : n.left || 0, r.top += f ? n : n.top || 0, r.right -= f ? n : n.right || 0, r.bottom -= f ? n : n.bottom || 0, r;\n  }\n\n  function $t(t, e, i, n, o) {\n    var r = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 0;\n    if (-1 === t.indexOf(\"auto\")) return t;\n    var s = Gt(i, n, r, o),\n        a = {\n      top: {\n        width: s.width,\n        height: e.top - s.top\n      },\n      right: {\n        width: s.right - e.right,\n        height: s.height\n      },\n      bottom: {\n        width: s.width,\n        height: s.bottom - e.bottom\n      },\n      left: {\n        width: e.left - s.left,\n        height: s.height\n      }\n    },\n        l = Object.keys(a).map(function (t) {\n      return Qt({\n        key: t\n      }, a[t], {\n        area: (e = a[t], e.width * e.height)\n      });\n      var e;\n    }).sort(function (t, e) {\n      return e.area - t.area;\n    }),\n        c = l.filter(function (t) {\n      var e = t.width,\n          n = t.height;\n      return e >= i.clientWidth && n >= i.clientHeight;\n    }),\n        h = 0 < c.length ? c[0].key : l[0].key,\n        u = t.split(\"-\")[1];\n    return h + (u ? \"-\" + u : \"\");\n  }\n\n  function Jt(t, e, n) {\n    var i = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;\n    return zt(n, i ? Xt(e) : Ft(e, n), i);\n  }\n\n  function Zt(t) {\n    var e = t.ownerDocument.defaultView.getComputedStyle(t),\n        n = parseFloat(e.marginTop || 0) + parseFloat(e.marginBottom || 0),\n        i = parseFloat(e.marginLeft || 0) + parseFloat(e.marginRight || 0);\n    return {\n      width: t.offsetWidth + i,\n      height: t.offsetHeight + n\n    };\n  }\n\n  function te(t) {\n    var e = {\n      left: \"right\",\n      right: \"left\",\n      bottom: \"top\",\n      top: \"bottom\"\n    };\n    return t.replace(/left|right|bottom|top/g, function (t) {\n      return e[t];\n    });\n  }\n\n  function ee(t, e, n) {\n    n = n.split(\"-\")[0];\n    var i = Zt(t),\n        o = {\n      width: i.width,\n      height: i.height\n    },\n        r = -1 !== [\"right\", \"left\"].indexOf(n),\n        s = r ? \"top\" : \"left\",\n        a = r ? \"left\" : \"top\",\n        l = r ? \"height\" : \"width\",\n        c = r ? \"width\" : \"height\";\n    return o[s] = e[s] + e[l] / 2 - i[l] / 2, o[a] = n === a ? e[a] - i[c] : e[te(a)], o;\n  }\n\n  function ne(t, e) {\n    return Array.prototype.find ? t.find(e) : t.filter(e)[0];\n  }\n\n  function ie(t, n, e) {\n    return (void 0 === e ? t : t.slice(0, function (t, e, n) {\n      if (Array.prototype.findIndex) return t.findIndex(function (t) {\n        return t[e] === n;\n      });\n      var i = ne(t, function (t) {\n        return t[e] === n;\n      });\n      return t.indexOf(i);\n    }(t, \"name\", e))).forEach(function (t) {\n      t[\"function\"] && console.warn(\"`modifier.function` is deprecated, use `modifier.fn`!\");\n      var e = t[\"function\"] || t.fn;\n      t.enabled && Ot(e) && (n.offsets.popper = Vt(n.offsets.popper), n.offsets.reference = Vt(n.offsets.reference), n = e(n, t));\n    }), n;\n  }\n\n  function oe(t, n) {\n    return t.some(function (t) {\n      var e = t.name;\n      return t.enabled && e === n;\n    });\n  }\n\n  function re(t) {\n    for (var e = [!1, \"ms\", \"Webkit\", \"Moz\", \"O\"], n = t.charAt(0).toUpperCase() + t.slice(1), i = 0; i < e.length; i++) {\n      var o = e[i],\n          r = o ? \"\" + o + n : t;\n      if (\"undefined\" != typeof document.body.style[r]) return r;\n    }\n\n    return null;\n  }\n\n  function se(t) {\n    var e = t.ownerDocument;\n    return e ? e.defaultView : window;\n  }\n\n  function ae(t, e, n, i) {\n    n.updateBound = i, se(t).addEventListener(\"resize\", n.updateBound, {\n      passive: !0\n    });\n    var o = Lt(t);\n    return function t(e, n, i, o) {\n      var r = \"BODY\" === e.nodeName,\n          s = r ? e.ownerDocument.defaultView : e;\n      s.addEventListener(n, i, {\n        passive: !0\n      }), r || t(Lt(s.parentNode), n, i, o), o.push(s);\n    }(o, \"scroll\", n.updateBound, n.scrollParents), n.scrollElement = o, n.eventsEnabled = !0, n;\n  }\n\n  function le() {\n    var t, e;\n    this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = (t = this.reference, e = this.state, se(t).removeEventListener(\"resize\", e.updateBound), e.scrollParents.forEach(function (t) {\n      t.removeEventListener(\"scroll\", e.updateBound);\n    }), e.updateBound = null, e.scrollParents = [], e.scrollElement = null, e.eventsEnabled = !1, e));\n  }\n\n  function ce(t) {\n    return \"\" !== t && !isNaN(parseFloat(t)) && isFinite(t);\n  }\n\n  function he(n, i) {\n    Object.keys(i).forEach(function (t) {\n      var e = \"\";\n      -1 !== [\"width\", \"height\", \"top\", \"right\", \"bottom\", \"left\"].indexOf(t) && ce(i[t]) && (e = \"px\"), n.style[t] = i[t] + e;\n    });\n  }\n\n  var ue = Tt && /Firefox/i.test(navigator.userAgent);\n\n  function fe(t, e, n) {\n    var i = ne(t, function (t) {\n      return t.name === e;\n    }),\n        o = !!i && t.some(function (t) {\n      return t.name === n && t.enabled && t.order < i.order;\n    });\n\n    if (!o) {\n      var r = \"`\" + e + \"`\",\n          s = \"`\" + n + \"`\";\n      console.warn(s + \" modifier is required by \" + r + \" modifier in order to work, be sure to include it before \" + r + \"!\");\n    }\n\n    return o;\n  }\n\n  var de = [\"auto-start\", \"auto\", \"auto-end\", \"top-start\", \"top\", \"top-end\", \"right-start\", \"right\", \"right-end\", \"bottom-end\", \"bottom\", \"bottom-start\", \"left-end\", \"left\", \"left-start\"],\n      pe = de.slice(3);\n\n  function me(t) {\n    var e = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],\n        n = pe.indexOf(t),\n        i = pe.slice(n + 1).concat(pe.slice(0, n));\n    return e ? i.reverse() : i;\n  }\n\n  var ge = \"flip\",\n      _e = \"clockwise\",\n      ve = \"counterclockwise\";\n\n  function ye(t, o, r, e) {\n    var s = [0, 0],\n        a = -1 !== [\"right\", \"left\"].indexOf(e),\n        n = t.split(/(\\+|\\-)/).map(function (t) {\n      return t.trim();\n    }),\n        i = n.indexOf(ne(n, function (t) {\n      return -1 !== t.search(/,|\\s/);\n    }));\n    n[i] && -1 === n[i].indexOf(\",\") && console.warn(\"Offsets separated by white space(s) are deprecated, use a comma (,) instead.\");\n    var l = /\\s*,\\s*|\\s+/,\n        c = -1 !== i ? [n.slice(0, i).concat([n[i].split(l)[0]]), [n[i].split(l)[1]].concat(n.slice(i + 1))] : [n];\n    return (c = c.map(function (t, e) {\n      var n = (1 === e ? !a : a) ? \"height\" : \"width\",\n          i = !1;\n      return t.reduce(function (t, e) {\n        return \"\" === t[t.length - 1] && -1 !== [\"+\", \"-\"].indexOf(e) ? (t[t.length - 1] = e, i = !0, t) : i ? (t[t.length - 1] += e, i = !1, t) : t.concat(e);\n      }, []).map(function (t) {\n        return function (t, e, n, i) {\n          var o = t.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/),\n              r = +o[1],\n              s = o[2];\n          if (!r) return t;\n          if (0 !== s.indexOf(\"%\")) return \"vh\" !== s && \"vw\" !== s ? r : (\"vh\" === s ? Math.max(document.documentElement.clientHeight, window.innerHeight || 0) : Math.max(document.documentElement.clientWidth, window.innerWidth || 0)) / 100 * r;\n          var a = void 0;\n\n          switch (s) {\n            case \"%p\":\n              a = n;\n              break;\n\n            case \"%\":\n            case \"%r\":\n            default:\n              a = i;\n          }\n\n          return Vt(a)[e] / 100 * r;\n        }(t, n, o, r);\n      });\n    })).forEach(function (n, i) {\n      n.forEach(function (t, e) {\n        ce(t) && (s[i] += t * (\"-\" === n[e - 1] ? -1 : 1));\n      });\n    }), s;\n  }\n\n  var Ee = {\n    placement: \"bottom\",\n    positionFixed: !1,\n    eventsEnabled: !0,\n    removeOnDestroy: !1,\n    onCreate: function onCreate() {},\n    onUpdate: function onUpdate() {},\n    modifiers: {\n      shift: {\n        order: 100,\n        enabled: !0,\n        fn: function fn(t) {\n          var e = t.placement,\n              n = e.split(\"-\")[0],\n              i = e.split(\"-\")[1];\n\n          if (i) {\n            var o = t.offsets,\n                r = o.reference,\n                s = o.popper,\n                a = -1 !== [\"bottom\", \"top\"].indexOf(n),\n                l = a ? \"left\" : \"top\",\n                c = a ? \"width\" : \"height\",\n                h = {\n              start: Kt({}, l, r[l]),\n              end: Kt({}, l, r[l] + r[c] - s[c])\n            };\n            t.offsets.popper = Qt({}, s, h[i]);\n          }\n\n          return t;\n        }\n      },\n      offset: {\n        order: 200,\n        enabled: !0,\n        fn: function fn(t, e) {\n          var n = e.offset,\n              i = t.placement,\n              o = t.offsets,\n              r = o.popper,\n              s = o.reference,\n              a = i.split(\"-\")[0],\n              l = void 0;\n          return l = ce(+n) ? [+n, 0] : ye(n, r, s, a), \"left\" === a ? (r.top += l[0], r.left -= l[1]) : \"right\" === a ? (r.top += l[0], r.left += l[1]) : \"top\" === a ? (r.left += l[0], r.top -= l[1]) : \"bottom\" === a && (r.left += l[0], r.top += l[1]), t.popper = r, t;\n        },\n        offset: 0\n      },\n      preventOverflow: {\n        order: 300,\n        enabled: !0,\n        fn: function fn(t, i) {\n          var e = i.boundariesElement || jt(t.instance.popper);\n          t.instance.reference === e && (e = jt(e));\n          var n = re(\"transform\"),\n              o = t.instance.popper.style,\n              r = o.top,\n              s = o.left,\n              a = o[n];\n          o.top = \"\", o.left = \"\", o[n] = \"\";\n          var l = Gt(t.instance.popper, t.instance.reference, i.padding, e, t.positionFixed);\n          o.top = r, o.left = s, o[n] = a, i.boundaries = l;\n          var c = i.priority,\n              h = t.offsets.popper,\n              u = {\n            primary: function primary(t) {\n              var e = h[t];\n              return h[t] < l[t] && !i.escapeWithReference && (e = Math.max(h[t], l[t])), Kt({}, t, e);\n            },\n            secondary: function secondary(t) {\n              var e = \"right\" === t ? \"left\" : \"top\",\n                  n = h[e];\n              return h[t] > l[t] && !i.escapeWithReference && (n = Math.min(h[e], l[t] - (\"right\" === t ? h.width : h.height))), Kt({}, e, n);\n            }\n          };\n          return c.forEach(function (t) {\n            var e = -1 !== [\"left\", \"top\"].indexOf(t) ? \"primary\" : \"secondary\";\n            h = Qt({}, h, u[e](t));\n          }), t.offsets.popper = h, t;\n        },\n        priority: [\"left\", \"right\", \"top\", \"bottom\"],\n        padding: 5,\n        boundariesElement: \"scrollParent\"\n      },\n      keepTogether: {\n        order: 400,\n        enabled: !0,\n        fn: function fn(t) {\n          var e = t.offsets,\n              n = e.popper,\n              i = e.reference,\n              o = t.placement.split(\"-\")[0],\n              r = Math.floor,\n              s = -1 !== [\"top\", \"bottom\"].indexOf(o),\n              a = s ? \"right\" : \"bottom\",\n              l = s ? \"left\" : \"top\",\n              c = s ? \"width\" : \"height\";\n          return n[a] < r(i[l]) && (t.offsets.popper[l] = r(i[l]) - n[c]), n[l] > r(i[a]) && (t.offsets.popper[l] = r(i[a])), t;\n        }\n      },\n      arrow: {\n        order: 500,\n        enabled: !0,\n        fn: function fn(t, e) {\n          var n;\n          if (!fe(t.instance.modifiers, \"arrow\", \"keepTogether\")) return t;\n          var i = e.element;\n\n          if (\"string\" == typeof i) {\n            if (!(i = t.instance.popper.querySelector(i))) return t;\n          } else if (!t.instance.popper.contains(i)) return console.warn(\"WARNING: `arrow.element` must be child of its popper element!\"), t;\n\n          var o = t.placement.split(\"-\")[0],\n              r = t.offsets,\n              s = r.popper,\n              a = r.reference,\n              l = -1 !== [\"left\", \"right\"].indexOf(o),\n              c = l ? \"height\" : \"width\",\n              h = l ? \"Top\" : \"Left\",\n              u = h.toLowerCase(),\n              f = l ? \"left\" : \"top\",\n              d = l ? \"bottom\" : \"right\",\n              p = Zt(i)[c];\n          a[d] - p < s[u] && (t.offsets.popper[u] -= s[u] - (a[d] - p)), a[u] + p > s[d] && (t.offsets.popper[u] += a[u] + p - s[d]), t.offsets.popper = Vt(t.offsets.popper);\n\n          var m = a[u] + a[c] / 2 - p / 2,\n              g = Nt(t.instance.popper),\n              _ = parseFloat(g[\"margin\" + h], 10),\n              v = parseFloat(g[\"border\" + h + \"Width\"], 10),\n              y = m - t.offsets.popper[u] - _ - v;\n\n          return y = Math.max(Math.min(s[c] - p, y), 0), t.arrowElement = i, t.offsets.arrow = (Kt(n = {}, u, Math.round(y)), Kt(n, f, \"\"), n), t;\n        },\n        element: \"[x-arrow]\"\n      },\n      flip: {\n        order: 600,\n        enabled: !0,\n        fn: function fn(p, m) {\n          if (oe(p.instance.modifiers, \"inner\")) return p;\n          if (p.flipped && p.placement === p.originalPlacement) return p;\n          var g = Gt(p.instance.popper, p.instance.reference, m.padding, m.boundariesElement, p.positionFixed),\n              _ = p.placement.split(\"-\")[0],\n              v = te(_),\n              y = p.placement.split(\"-\")[1] || \"\",\n              E = [];\n\n          switch (m.behavior) {\n            case ge:\n              E = [_, v];\n              break;\n\n            case _e:\n              E = me(_);\n              break;\n\n            case ve:\n              E = me(_, !0);\n              break;\n\n            default:\n              E = m.behavior;\n          }\n\n          return E.forEach(function (t, e) {\n            if (_ !== t || E.length === e + 1) return p;\n            _ = p.placement.split(\"-\")[0], v = te(_);\n            var n,\n                i = p.offsets.popper,\n                o = p.offsets.reference,\n                r = Math.floor,\n                s = \"left\" === _ && r(i.right) > r(o.left) || \"right\" === _ && r(i.left) < r(o.right) || \"top\" === _ && r(i.bottom) > r(o.top) || \"bottom\" === _ && r(i.top) < r(o.bottom),\n                a = r(i.left) < r(g.left),\n                l = r(i.right) > r(g.right),\n                c = r(i.top) < r(g.top),\n                h = r(i.bottom) > r(g.bottom),\n                u = \"left\" === _ && a || \"right\" === _ && l || \"top\" === _ && c || \"bottom\" === _ && h,\n                f = -1 !== [\"top\", \"bottom\"].indexOf(_),\n                d = !!m.flipVariations && (f && \"start\" === y && a || f && \"end\" === y && l || !f && \"start\" === y && c || !f && \"end\" === y && h);\n            (s || u || d) && (p.flipped = !0, (s || u) && (_ = E[e + 1]), d && (y = \"end\" === (n = y) ? \"start\" : \"start\" === n ? \"end\" : n), p.placement = _ + (y ? \"-\" + y : \"\"), p.offsets.popper = Qt({}, p.offsets.popper, ee(p.instance.popper, p.offsets.reference, p.placement)), p = ie(p.instance.modifiers, p, \"flip\"));\n          }), p;\n        },\n        behavior: \"flip\",\n        padding: 5,\n        boundariesElement: \"viewport\"\n      },\n      inner: {\n        order: 700,\n        enabled: !1,\n        fn: function fn(t) {\n          var e = t.placement,\n              n = e.split(\"-\")[0],\n              i = t.offsets,\n              o = i.popper,\n              r = i.reference,\n              s = -1 !== [\"left\", \"right\"].indexOf(n),\n              a = -1 === [\"top\", \"left\"].indexOf(n);\n          return o[s ? \"left\" : \"top\"] = r[n] - (a ? o[s ? \"width\" : \"height\"] : 0), t.placement = te(e), t.offsets.popper = Vt(o), t;\n        }\n      },\n      hide: {\n        order: 800,\n        enabled: !0,\n        fn: function fn(t) {\n          if (!fe(t.instance.modifiers, \"hide\", \"preventOverflow\")) return t;\n          var e = t.offsets.reference,\n              n = ne(t.instance.modifiers, function (t) {\n            return \"preventOverflow\" === t.name;\n          }).boundaries;\n\n          if (e.bottom < n.top || e.left > n.right || e.top > n.bottom || e.right < n.left) {\n            if (!0 === t.hide) return t;\n            t.hide = !0, t.attributes[\"x-out-of-boundaries\"] = \"\";\n          } else {\n            if (!1 === t.hide) return t;\n            t.hide = !1, t.attributes[\"x-out-of-boundaries\"] = !1;\n          }\n\n          return t;\n        }\n      },\n      computeStyle: {\n        order: 850,\n        enabled: !0,\n        fn: function fn(t, e) {\n          var n = e.x,\n              i = e.y,\n              o = t.offsets.popper,\n              r = ne(t.instance.modifiers, function (t) {\n            return \"applyStyle\" === t.name;\n          }).gpuAcceleration;\n          void 0 !== r && console.warn(\"WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!\");\n\n          var s,\n              a,\n              l,\n              c,\n              h,\n              u,\n              f,\n              d,\n              p,\n              m,\n              g,\n              _,\n              v,\n              y,\n              E = void 0 !== r ? r : e.gpuAcceleration,\n              b = jt(t.instance.popper),\n              w = Yt(b),\n              C = {\n            position: o.position\n          },\n              T = (s = t, a = window.devicePixelRatio < 2 || !ue, l = s.offsets, c = l.popper, h = l.reference, u = Math.round, f = Math.floor, d = function d(t) {\n            return t;\n          }, p = u(h.width), m = u(c.width), g = -1 !== [\"left\", \"right\"].indexOf(s.placement), _ = -1 !== s.placement.indexOf(\"-\"), y = a ? u : d, {\n            left: (v = a ? g || _ || p % 2 == m % 2 ? u : f : d)(p % 2 == 1 && m % 2 == 1 && !_ && a ? c.left - 1 : c.left),\n            top: y(c.top),\n            bottom: y(c.bottom),\n            right: v(c.right)\n          }),\n              S = \"bottom\" === n ? \"top\" : \"bottom\",\n              D = \"right\" === i ? \"left\" : \"right\",\n              I = re(\"transform\"),\n              A = void 0,\n              O = void 0;\n\n          if (O = \"bottom\" === S ? \"HTML\" === b.nodeName ? -b.clientHeight + T.bottom : -w.height + T.bottom : T.top, A = \"right\" === D ? \"HTML\" === b.nodeName ? -b.clientWidth + T.right : -w.width + T.right : T.left, E && I) C[I] = \"translate3d(\" + A + \"px, \" + O + \"px, 0)\", C[S] = 0, C[D] = 0, C.willChange = \"transform\";else {\n            var N = \"bottom\" === S ? -1 : 1,\n                k = \"right\" === D ? -1 : 1;\n            C[S] = O * N, C[D] = A * k, C.willChange = S + \", \" + D;\n          }\n          var L = {\n            \"x-placement\": t.placement\n          };\n          return t.attributes = Qt({}, L, t.attributes), t.styles = Qt({}, C, t.styles), t.arrowStyles = Qt({}, t.offsets.arrow, t.arrowStyles), t;\n        },\n        gpuAcceleration: !0,\n        x: \"bottom\",\n        y: \"right\"\n      },\n      applyStyle: {\n        order: 900,\n        enabled: !0,\n        fn: function fn(t) {\n          var e, n;\n          return he(t.instance.popper, t.styles), e = t.instance.popper, n = t.attributes, Object.keys(n).forEach(function (t) {\n            !1 !== n[t] ? e.setAttribute(t, n[t]) : e.removeAttribute(t);\n          }), t.arrowElement && Object.keys(t.arrowStyles).length && he(t.arrowElement, t.arrowStyles), t;\n        },\n        onLoad: function onLoad(t, e, n, i, o) {\n          var r = Jt(o, e, t, n.positionFixed),\n              s = $t(n.placement, r, e, t, n.modifiers.flip.boundariesElement, n.modifiers.flip.padding);\n          return e.setAttribute(\"x-placement\", s), he(e, {\n            position: n.positionFixed ? \"fixed\" : \"absolute\"\n          }), n;\n        },\n        gpuAcceleration: void 0\n      }\n    }\n  },\n      be = function () {\n    function r(t, e) {\n      var n = this,\n          i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};\n      !function (t, e) {\n        if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n      }(this, r), this.scheduleUpdate = function () {\n        return requestAnimationFrame(n.update);\n      }, this.update = At(this.update.bind(this)), this.options = Qt({}, r.Defaults, i), this.state = {\n        isDestroyed: !1,\n        isCreated: !1,\n        scrollParents: []\n      }, this.reference = t && t.jquery ? t[0] : t, this.popper = e && e.jquery ? e[0] : e, this.options.modifiers = {}, Object.keys(Qt({}, r.Defaults.modifiers, i.modifiers)).forEach(function (t) {\n        n.options.modifiers[t] = Qt({}, r.Defaults.modifiers[t] || {}, i.modifiers ? i.modifiers[t] : {});\n      }), this.modifiers = Object.keys(this.options.modifiers).map(function (t) {\n        return Qt({\n          name: t\n        }, n.options.modifiers[t]);\n      }).sort(function (t, e) {\n        return t.order - e.order;\n      }), this.modifiers.forEach(function (t) {\n        t.enabled && Ot(t.onLoad) && t.onLoad(n.reference, n.popper, n.options, t, n.state);\n      }), this.update();\n      var o = this.options.eventsEnabled;\n      o && this.enableEventListeners(), this.state.eventsEnabled = o;\n    }\n\n    return qt(r, [{\n      key: \"update\",\n      value: function value() {\n        return function () {\n          if (!this.state.isDestroyed) {\n            var t = {\n              instance: this,\n              styles: {},\n              arrowStyles: {},\n              attributes: {},\n              flipped: !1,\n              offsets: {}\n            };\n            t.offsets.reference = Jt(this.state, this.popper, this.reference, this.options.positionFixed), t.placement = $t(this.options.placement, t.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), t.originalPlacement = t.placement, t.positionFixed = this.options.positionFixed, t.offsets.popper = ee(this.popper, t.offsets.reference, t.placement), t.offsets.popper.position = this.options.positionFixed ? \"fixed\" : \"absolute\", t = ie(this.modifiers, t), this.state.isCreated ? this.options.onUpdate(t) : (this.state.isCreated = !0, this.options.onCreate(t));\n          }\n        }.call(this);\n      }\n    }, {\n      key: \"destroy\",\n      value: function value() {\n        return function () {\n          return this.state.isDestroyed = !0, oe(this.modifiers, \"applyStyle\") && (this.popper.removeAttribute(\"x-placement\"), this.popper.style.position = \"\", this.popper.style.top = \"\", this.popper.style.left = \"\", this.popper.style.right = \"\", this.popper.style.bottom = \"\", this.popper.style.willChange = \"\", this.popper.style[re(\"transform\")] = \"\"), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;\n        }.call(this);\n      }\n    }, {\n      key: \"enableEventListeners\",\n      value: function value() {\n        return function () {\n          this.state.eventsEnabled || (this.state = ae(this.reference, this.options, this.state, this.scheduleUpdate));\n        }.call(this);\n      }\n    }, {\n      key: \"disableEventListeners\",\n      value: function value() {\n        return le.call(this);\n      }\n    }]), r;\n  }();\n\n  be.Utils = (\"undefined\" != typeof window ? window : __webpack_require__.g).PopperUtils, be.placements = de, be.Defaults = Ee;\n\n  var we = \"dropdown\",\n      Ce = \"bs.dropdown\",\n      Te = \".\" + Ce,\n      Se = \".data-api\",\n      De = p.fn[we],\n      Ie = new RegExp(\"38|40|27\"),\n      Ae = {\n    HIDE: \"hide\" + Te,\n    HIDDEN: \"hidden\" + Te,\n    SHOW: \"show\" + Te,\n    SHOWN: \"shown\" + Te,\n    CLICK: \"click\" + Te,\n    CLICK_DATA_API: \"click\" + Te + Se,\n    KEYDOWN_DATA_API: \"keydown\" + Te + Se,\n    KEYUP_DATA_API: \"keyup\" + Te + Se\n  },\n      Oe = \"disabled\",\n      Ne = \"show\",\n      ke = \"dropup\",\n      Le = \"dropright\",\n      xe = \"dropleft\",\n      Pe = \"dropdown-menu-right\",\n      He = \"position-static\",\n      je = '[data-toggle=\"dropdown\"]',\n      Re = \".dropdown form\",\n      Fe = \".dropdown-menu\",\n      Me = \".navbar-nav\",\n      We = \".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)\",\n      Ue = \"top-start\",\n      Be = \"top-end\",\n      qe = \"bottom-start\",\n      Ke = \"bottom-end\",\n      Qe = \"right-start\",\n      Ve = \"left-start\",\n      Ye = {\n    offset: 0,\n    flip: !0,\n    boundary: \"scrollParent\",\n    reference: \"toggle\",\n    display: \"dynamic\"\n  },\n      ze = {\n    offset: \"(number|string|function)\",\n    flip: \"boolean\",\n    boundary: \"(string|element)\",\n    reference: \"(string|element)\",\n    display: \"string\"\n  },\n      Xe = function () {\n    function c(t, e) {\n      this._element = t, this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners();\n    }\n\n    var t = c.prototype;\n    return t.toggle = function () {\n      if (!this._element.disabled && !p(this._element).hasClass(Oe)) {\n        var t = c._getParentFromElement(this._element),\n            e = p(this._menu).hasClass(Ne);\n\n        if (c._clearMenus(), !e) {\n          var n = {\n            relatedTarget: this._element\n          },\n              i = p.Event(Ae.SHOW, n);\n\n          if (p(t).trigger(i), !i.isDefaultPrevented()) {\n            if (!this._inNavbar) {\n              if (\"undefined\" == typeof be) throw new TypeError(\"Bootstrap's dropdowns require Popper.js (https://popper.js.org/)\");\n              var o = this._element;\n              \"parent\" === this._config.reference ? o = t : m.isElement(this._config.reference) && (o = this._config.reference, \"undefined\" != typeof this._config.reference.jquery && (o = this._config.reference[0])), \"scrollParent\" !== this._config.boundary && p(t).addClass(He), this._popper = new be(o, this._menu, this._getPopperConfig());\n            }\n\n            \"ontouchstart\" in document.documentElement && 0 === p(t).closest(Me).length && p(document.body).children().on(\"mouseover\", null, p.noop), this._element.focus(), this._element.setAttribute(\"aria-expanded\", !0), p(this._menu).toggleClass(Ne), p(t).toggleClass(Ne).trigger(p.Event(Ae.SHOWN, n));\n          }\n        }\n      }\n    }, t.show = function () {\n      if (!(this._element.disabled || p(this._element).hasClass(Oe) || p(this._menu).hasClass(Ne))) {\n        var t = {\n          relatedTarget: this._element\n        },\n            e = p.Event(Ae.SHOW, t),\n            n = c._getParentFromElement(this._element);\n\n        p(n).trigger(e), e.isDefaultPrevented() || (p(this._menu).toggleClass(Ne), p(n).toggleClass(Ne).trigger(p.Event(Ae.SHOWN, t)));\n      }\n    }, t.hide = function () {\n      if (!this._element.disabled && !p(this._element).hasClass(Oe) && p(this._menu).hasClass(Ne)) {\n        var t = {\n          relatedTarget: this._element\n        },\n            e = p.Event(Ae.HIDE, t),\n            n = c._getParentFromElement(this._element);\n\n        p(n).trigger(e), e.isDefaultPrevented() || (p(this._menu).toggleClass(Ne), p(n).toggleClass(Ne).trigger(p.Event(Ae.HIDDEN, t)));\n      }\n    }, t.dispose = function () {\n      p.removeData(this._element, Ce), p(this._element).off(Te), this._element = null, (this._menu = null) !== this._popper && (this._popper.destroy(), this._popper = null);\n    }, t.update = function () {\n      this._inNavbar = this._detectNavbar(), null !== this._popper && this._popper.scheduleUpdate();\n    }, t._addEventListeners = function () {\n      var e = this;\n      p(this._element).on(Ae.CLICK, function (t) {\n        t.preventDefault(), t.stopPropagation(), e.toggle();\n      });\n    }, t._getConfig = function (t) {\n      return t = l({}, this.constructor.Default, p(this._element).data(), t), m.typeCheckConfig(we, t, this.constructor.DefaultType), t;\n    }, t._getMenuElement = function () {\n      if (!this._menu) {\n        var t = c._getParentFromElement(this._element);\n\n        t && (this._menu = t.querySelector(Fe));\n      }\n\n      return this._menu;\n    }, t._getPlacement = function () {\n      var t = p(this._element.parentNode),\n          e = qe;\n      return t.hasClass(ke) ? (e = Ue, p(this._menu).hasClass(Pe) && (e = Be)) : t.hasClass(Le) ? e = Qe : t.hasClass(xe) ? e = Ve : p(this._menu).hasClass(Pe) && (e = Ke), e;\n    }, t._detectNavbar = function () {\n      return 0 < p(this._element).closest(\".navbar\").length;\n    }, t._getOffset = function () {\n      var e = this,\n          t = {};\n      return \"function\" == typeof this._config.offset ? t.fn = function (t) {\n        return t.offsets = l({}, t.offsets, e._config.offset(t.offsets, e._element) || {}), t;\n      } : t.offset = this._config.offset, t;\n    }, t._getPopperConfig = function () {\n      var t = {\n        placement: this._getPlacement(),\n        modifiers: {\n          offset: this._getOffset(),\n          flip: {\n            enabled: this._config.flip\n          },\n          preventOverflow: {\n            boundariesElement: this._config.boundary\n          }\n        }\n      };\n      return \"static\" === this._config.display && (t.modifiers.applyStyle = {\n        enabled: !1\n      }), t;\n    }, c._jQueryInterface = function (e) {\n      return this.each(function () {\n        var t = p(this).data(Ce);\n\n        if (t || (t = new c(this, \"object\" == _typeof(e) ? e : null), p(this).data(Ce, t)), \"string\" == typeof e) {\n          if (\"undefined\" == typeof t[e]) throw new TypeError('No method named \"' + e + '\"');\n          t[e]();\n        }\n      });\n    }, c._clearMenus = function (t) {\n      if (!t || 3 !== t.which && (\"keyup\" !== t.type || 9 === t.which)) for (var e = [].slice.call(document.querySelectorAll(je)), n = 0, i = e.length; n < i; n++) {\n        var o = c._getParentFromElement(e[n]),\n            r = p(e[n]).data(Ce),\n            s = {\n          relatedTarget: e[n]\n        };\n\n        if (t && \"click\" === t.type && (s.clickEvent = t), r) {\n          var a = r._menu;\n\n          if (p(o).hasClass(Ne) && !(t && (\"click\" === t.type && /input|textarea/i.test(t.target.tagName) || \"keyup\" === t.type && 9 === t.which) && p.contains(o, t.target))) {\n            var l = p.Event(Ae.HIDE, s);\n            p(o).trigger(l), l.isDefaultPrevented() || (\"ontouchstart\" in document.documentElement && p(document.body).children().off(\"mouseover\", null, p.noop), e[n].setAttribute(\"aria-expanded\", \"false\"), p(a).removeClass(Ne), p(o).removeClass(Ne).trigger(p.Event(Ae.HIDDEN, s)));\n          }\n        }\n      }\n    }, c._getParentFromElement = function (t) {\n      var e,\n          n = m.getSelectorFromElement(t);\n      return n && (e = document.querySelector(n)), e || t.parentNode;\n    }, c._dataApiKeydownHandler = function (t) {\n      if ((/input|textarea/i.test(t.target.tagName) ? !(32 === t.which || 27 !== t.which && (40 !== t.which && 38 !== t.which || p(t.target).closest(Fe).length)) : Ie.test(t.which)) && (t.preventDefault(), t.stopPropagation(), !this.disabled && !p(this).hasClass(Oe))) {\n        var e = c._getParentFromElement(this),\n            n = p(e).hasClass(Ne);\n\n        if (n && (!n || 27 !== t.which && 32 !== t.which)) {\n          var i = [].slice.call(e.querySelectorAll(We));\n\n          if (0 !== i.length) {\n            var o = i.indexOf(t.target);\n            38 === t.which && 0 < o && o--, 40 === t.which && o < i.length - 1 && o++, o < 0 && (o = 0), i[o].focus();\n          }\n        } else {\n          if (27 === t.which) {\n            var r = e.querySelector(je);\n            p(r).trigger(\"focus\");\n          }\n\n          p(this).trigger(\"click\");\n        }\n      }\n    }, s(c, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Ye;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return ze;\n      }\n    }]), c;\n  }();\n\n  p(document).on(Ae.KEYDOWN_DATA_API, je, Xe._dataApiKeydownHandler).on(Ae.KEYDOWN_DATA_API, Fe, Xe._dataApiKeydownHandler).on(Ae.CLICK_DATA_API + \" \" + Ae.KEYUP_DATA_API, Xe._clearMenus).on(Ae.CLICK_DATA_API, je, function (t) {\n    t.preventDefault(), t.stopPropagation(), Xe._jQueryInterface.call(p(this), \"toggle\");\n  }).on(Ae.CLICK_DATA_API, Re, function (t) {\n    t.stopPropagation();\n  }), p.fn[we] = Xe._jQueryInterface, p.fn[we].Constructor = Xe, p.fn[we].noConflict = function () {\n    return p.fn[we] = De, Xe._jQueryInterface;\n  };\n\n  var Ge = \"modal\",\n      $e = \"bs.modal\",\n      Je = \".\" + $e,\n      Ze = p.fn[Ge],\n      tn = {\n    backdrop: !0,\n    keyboard: !0,\n    focus: !0,\n    show: !0\n  },\n      en = {\n    backdrop: \"(boolean|string)\",\n    keyboard: \"boolean\",\n    focus: \"boolean\",\n    show: \"boolean\"\n  },\n      nn = {\n    HIDE: \"hide\" + Je,\n    HIDDEN: \"hidden\" + Je,\n    SHOW: \"show\" + Je,\n    SHOWN: \"shown\" + Je,\n    FOCUSIN: \"focusin\" + Je,\n    RESIZE: \"resize\" + Je,\n    CLICK_DISMISS: \"click.dismiss\" + Je,\n    KEYDOWN_DISMISS: \"keydown.dismiss\" + Je,\n    MOUSEUP_DISMISS: \"mouseup.dismiss\" + Je,\n    MOUSEDOWN_DISMISS: \"mousedown.dismiss\" + Je,\n    CLICK_DATA_API: \"click\" + Je + \".data-api\"\n  },\n      on = \"modal-dialog-scrollable\",\n      rn = \"modal-scrollbar-measure\",\n      sn = \"modal-backdrop\",\n      an = \"modal-open\",\n      ln = \"fade\",\n      cn = \"show\",\n      hn = \".modal-dialog\",\n      un = \".modal-body\",\n      fn = '[data-toggle=\"modal\"]',\n      dn = '[data-dismiss=\"modal\"]',\n      pn = \".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\",\n      mn = \".sticky-top\",\n      gn = function () {\n    function o(t, e) {\n      this._config = this._getConfig(e), this._element = t, this._dialog = t.querySelector(hn), this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._scrollbarWidth = 0;\n    }\n\n    var t = o.prototype;\n    return t.toggle = function (t) {\n      return this._isShown ? this.hide() : this.show(t);\n    }, t.show = function (t) {\n      var e = this;\n\n      if (!this._isShown && !this._isTransitioning) {\n        p(this._element).hasClass(ln) && (this._isTransitioning = !0);\n        var n = p.Event(nn.SHOW, {\n          relatedTarget: t\n        });\n        p(this._element).trigger(n), this._isShown || n.isDefaultPrevented() || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), p(this._element).on(nn.CLICK_DISMISS, dn, function (t) {\n          return e.hide(t);\n        }), p(this._dialog).on(nn.MOUSEDOWN_DISMISS, function () {\n          p(e._element).one(nn.MOUSEUP_DISMISS, function (t) {\n            p(t.target).is(e._element) && (e._ignoreBackdropClick = !0);\n          });\n        }), this._showBackdrop(function () {\n          return e._showElement(t);\n        }));\n      }\n    }, t.hide = function (t) {\n      var e = this;\n\n      if (t && t.preventDefault(), this._isShown && !this._isTransitioning) {\n        var n = p.Event(nn.HIDE);\n\n        if (p(this._element).trigger(n), this._isShown && !n.isDefaultPrevented()) {\n          this._isShown = !1;\n          var i = p(this._element).hasClass(ln);\n\n          if (i && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), p(document).off(nn.FOCUSIN), p(this._element).removeClass(cn), p(this._element).off(nn.CLICK_DISMISS), p(this._dialog).off(nn.MOUSEDOWN_DISMISS), i) {\n            var o = m.getTransitionDurationFromElement(this._element);\n            p(this._element).one(m.TRANSITION_END, function (t) {\n              return e._hideModal(t);\n            }).emulateTransitionEnd(o);\n          } else this._hideModal();\n        }\n      }\n    }, t.dispose = function () {\n      [window, this._element, this._dialog].forEach(function (t) {\n        return p(t).off(Je);\n      }), p(document).off(nn.FOCUSIN), p.removeData(this._element, $e), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._isTransitioning = null, this._scrollbarWidth = null;\n    }, t.handleUpdate = function () {\n      this._adjustDialog();\n    }, t._getConfig = function (t) {\n      return t = l({}, tn, t), m.typeCheckConfig(Ge, t, en), t;\n    }, t._showElement = function (t) {\n      var e = this,\n          n = p(this._element).hasClass(ln);\n      this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = \"block\", this._element.removeAttribute(\"aria-hidden\"), this._element.setAttribute(\"aria-modal\", !0), p(this._dialog).hasClass(on) ? this._dialog.querySelector(un).scrollTop = 0 : this._element.scrollTop = 0, n && m.reflow(this._element), p(this._element).addClass(cn), this._config.focus && this._enforceFocus();\n\n      var i = p.Event(nn.SHOWN, {\n        relatedTarget: t\n      }),\n          o = function o() {\n        e._config.focus && e._element.focus(), e._isTransitioning = !1, p(e._element).trigger(i);\n      };\n\n      if (n) {\n        var r = m.getTransitionDurationFromElement(this._dialog);\n        p(this._dialog).one(m.TRANSITION_END, o).emulateTransitionEnd(r);\n      } else o();\n    }, t._enforceFocus = function () {\n      var e = this;\n      p(document).off(nn.FOCUSIN).on(nn.FOCUSIN, function (t) {\n        document !== t.target && e._element !== t.target && 0 === p(e._element).has(t.target).length && e._element.focus();\n      });\n    }, t._setEscapeEvent = function () {\n      var e = this;\n      this._isShown && this._config.keyboard ? p(this._element).on(nn.KEYDOWN_DISMISS, function (t) {\n        27 === t.which && (t.preventDefault(), e.hide());\n      }) : this._isShown || p(this._element).off(nn.KEYDOWN_DISMISS);\n    }, t._setResizeEvent = function () {\n      var e = this;\n      this._isShown ? p(window).on(nn.RESIZE, function (t) {\n        return e.handleUpdate(t);\n      }) : p(window).off(nn.RESIZE);\n    }, t._hideModal = function () {\n      var t = this;\n      this._element.style.display = \"none\", this._element.setAttribute(\"aria-hidden\", !0), this._element.removeAttribute(\"aria-modal\"), this._isTransitioning = !1, this._showBackdrop(function () {\n        p(document.body).removeClass(an), t._resetAdjustments(), t._resetScrollbar(), p(t._element).trigger(nn.HIDDEN);\n      });\n    }, t._removeBackdrop = function () {\n      this._backdrop && (p(this._backdrop).remove(), this._backdrop = null);\n    }, t._showBackdrop = function (t) {\n      var e = this,\n          n = p(this._element).hasClass(ln) ? ln : \"\";\n\n      if (this._isShown && this._config.backdrop) {\n        if (this._backdrop = document.createElement(\"div\"), this._backdrop.className = sn, n && this._backdrop.classList.add(n), p(this._backdrop).appendTo(document.body), p(this._element).on(nn.CLICK_DISMISS, function (t) {\n          e._ignoreBackdropClick ? e._ignoreBackdropClick = !1 : t.target === t.currentTarget && (\"static\" === e._config.backdrop ? e._element.focus() : e.hide());\n        }), n && m.reflow(this._backdrop), p(this._backdrop).addClass(cn), !t) return;\n        if (!n) return void t();\n        var i = m.getTransitionDurationFromElement(this._backdrop);\n        p(this._backdrop).one(m.TRANSITION_END, t).emulateTransitionEnd(i);\n      } else if (!this._isShown && this._backdrop) {\n        p(this._backdrop).removeClass(cn);\n\n        var o = function o() {\n          e._removeBackdrop(), t && t();\n        };\n\n        if (p(this._element).hasClass(ln)) {\n          var r = m.getTransitionDurationFromElement(this._backdrop);\n          p(this._backdrop).one(m.TRANSITION_END, o).emulateTransitionEnd(r);\n        } else o();\n      } else t && t();\n    }, t._adjustDialog = function () {\n      var t = this._element.scrollHeight > document.documentElement.clientHeight;\n      !this._isBodyOverflowing && t && (this._element.style.paddingLeft = this._scrollbarWidth + \"px\"), this._isBodyOverflowing && !t && (this._element.style.paddingRight = this._scrollbarWidth + \"px\");\n    }, t._resetAdjustments = function () {\n      this._element.style.paddingLeft = \"\", this._element.style.paddingRight = \"\";\n    }, t._checkScrollbar = function () {\n      var t = document.body.getBoundingClientRect();\n      this._isBodyOverflowing = t.left + t.right < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();\n    }, t._setScrollbar = function () {\n      var o = this;\n\n      if (this._isBodyOverflowing) {\n        var t = [].slice.call(document.querySelectorAll(pn)),\n            e = [].slice.call(document.querySelectorAll(mn));\n        p(t).each(function (t, e) {\n          var n = e.style.paddingRight,\n              i = p(e).css(\"padding-right\");\n          p(e).data(\"padding-right\", n).css(\"padding-right\", parseFloat(i) + o._scrollbarWidth + \"px\");\n        }), p(e).each(function (t, e) {\n          var n = e.style.marginRight,\n              i = p(e).css(\"margin-right\");\n          p(e).data(\"margin-right\", n).css(\"margin-right\", parseFloat(i) - o._scrollbarWidth + \"px\");\n        });\n        var n = document.body.style.paddingRight,\n            i = p(document.body).css(\"padding-right\");\n        p(document.body).data(\"padding-right\", n).css(\"padding-right\", parseFloat(i) + this._scrollbarWidth + \"px\");\n      }\n\n      p(document.body).addClass(an);\n    }, t._resetScrollbar = function () {\n      var t = [].slice.call(document.querySelectorAll(pn));\n      p(t).each(function (t, e) {\n        var n = p(e).data(\"padding-right\");\n        p(e).removeData(\"padding-right\"), e.style.paddingRight = n || \"\";\n      });\n      var e = [].slice.call(document.querySelectorAll(\"\" + mn));\n      p(e).each(function (t, e) {\n        var n = p(e).data(\"margin-right\");\n        \"undefined\" != typeof n && p(e).css(\"margin-right\", n).removeData(\"margin-right\");\n      });\n      var n = p(document.body).data(\"padding-right\");\n      p(document.body).removeData(\"padding-right\"), document.body.style.paddingRight = n || \"\";\n    }, t._getScrollbarWidth = function () {\n      var t = document.createElement(\"div\");\n      t.className = rn, document.body.appendChild(t);\n      var e = t.getBoundingClientRect().width - t.clientWidth;\n      return document.body.removeChild(t), e;\n    }, o._jQueryInterface = function (n, i) {\n      return this.each(function () {\n        var t = p(this).data($e),\n            e = l({}, tn, p(this).data(), \"object\" == _typeof(n) && n ? n : {});\n\n        if (t || (t = new o(this, e), p(this).data($e, t)), \"string\" == typeof n) {\n          if (\"undefined\" == typeof t[n]) throw new TypeError('No method named \"' + n + '\"');\n          t[n](i);\n        } else e.show && t.show(i);\n      });\n    }, s(o, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return tn;\n      }\n    }]), o;\n  }();\n\n  p(document).on(nn.CLICK_DATA_API, fn, function (t) {\n    var e,\n        n = this,\n        i = m.getSelectorFromElement(this);\n    i && (e = document.querySelector(i));\n    var o = p(e).data($e) ? \"toggle\" : l({}, p(e).data(), p(this).data());\n    \"A\" !== this.tagName && \"AREA\" !== this.tagName || t.preventDefault();\n    var r = p(e).one(nn.SHOW, function (t) {\n      t.isDefaultPrevented() || r.one(nn.HIDDEN, function () {\n        p(n).is(\":visible\") && n.focus();\n      });\n    });\n\n    gn._jQueryInterface.call(p(e), o, this);\n  }), p.fn[Ge] = gn._jQueryInterface, p.fn[Ge].Constructor = gn, p.fn[Ge].noConflict = function () {\n    return p.fn[Ge] = Ze, gn._jQueryInterface;\n  };\n  var _n = [\"background\", \"cite\", \"href\", \"itemtype\", \"longdesc\", \"poster\", \"src\", \"xlink:href\"],\n      vn = {\n    \"*\": [\"class\", \"dir\", \"id\", \"lang\", \"role\", /^aria-[\\w-]*$/i],\n    a: [\"target\", \"href\", \"title\", \"rel\"],\n    area: [],\n    b: [],\n    br: [],\n    col: [],\n    code: [],\n    div: [],\n    em: [],\n    hr: [],\n    h1: [],\n    h2: [],\n    h3: [],\n    h4: [],\n    h5: [],\n    h6: [],\n    i: [],\n    img: [\"src\", \"alt\", \"title\", \"width\", \"height\"],\n    li: [],\n    ol: [],\n    p: [],\n    pre: [],\n    s: [],\n    small: [],\n    span: [],\n    sub: [],\n    sup: [],\n    strong: [],\n    u: [],\n    ul: []\n  },\n      yn = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,\n      En = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;\n\n  function bn(t, s, e) {\n    if (0 === t.length) return t;\n    if (e && \"function\" == typeof e) return e(t);\n\n    for (var n = new window.DOMParser().parseFromString(t, \"text/html\"), a = Object.keys(s), l = [].slice.call(n.body.querySelectorAll(\"*\")), i = function i(t, e) {\n      var n = l[t],\n          i = n.nodeName.toLowerCase();\n      if (-1 === a.indexOf(n.nodeName.toLowerCase())) return n.parentNode.removeChild(n), \"continue\";\n      var o = [].slice.call(n.attributes),\n          r = [].concat(s[\"*\"] || [], s[i] || []);\n      o.forEach(function (t) {\n        (function (t, e) {\n          var n = t.nodeName.toLowerCase();\n          if (-1 !== e.indexOf(n)) return -1 === _n.indexOf(n) || Boolean(t.nodeValue.match(yn) || t.nodeValue.match(En));\n\n          for (var i = e.filter(function (t) {\n            return t instanceof RegExp;\n          }), o = 0, r = i.length; o < r; o++) {\n            if (n.match(i[o])) return !0;\n          }\n\n          return !1;\n        })(t, r) || n.removeAttribute(t.nodeName);\n      });\n    }, o = 0, r = l.length; o < r; o++) {\n      i(o);\n    }\n\n    return n.body.innerHTML;\n  }\n\n  var wn = \"tooltip\",\n      Cn = \"bs.tooltip\",\n      Tn = \".\" + Cn,\n      Sn = p.fn[wn],\n      Dn = \"bs-tooltip\",\n      In = new RegExp(\"(^|\\\\s)\" + Dn + \"\\\\S+\", \"g\"),\n      An = [\"sanitize\", \"whiteList\", \"sanitizeFn\"],\n      On = {\n    animation: \"boolean\",\n    template: \"string\",\n    title: \"(string|element|function)\",\n    trigger: \"string\",\n    delay: \"(number|object)\",\n    html: \"boolean\",\n    selector: \"(string|boolean)\",\n    placement: \"(string|function)\",\n    offset: \"(number|string|function)\",\n    container: \"(string|element|boolean)\",\n    fallbackPlacement: \"(string|array)\",\n    boundary: \"(string|element)\",\n    sanitize: \"boolean\",\n    sanitizeFn: \"(null|function)\",\n    whiteList: \"object\"\n  },\n      Nn = {\n    AUTO: \"auto\",\n    TOP: \"top\",\n    RIGHT: \"right\",\n    BOTTOM: \"bottom\",\n    LEFT: \"left\"\n  },\n      kn = {\n    animation: !0,\n    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n    trigger: \"hover focus\",\n    title: \"\",\n    delay: 0,\n    html: !1,\n    selector: !1,\n    placement: \"top\",\n    offset: 0,\n    container: !1,\n    fallbackPlacement: \"flip\",\n    boundary: \"scrollParent\",\n    sanitize: !0,\n    sanitizeFn: null,\n    whiteList: vn\n  },\n      Ln = \"show\",\n      xn = \"out\",\n      Pn = {\n    HIDE: \"hide\" + Tn,\n    HIDDEN: \"hidden\" + Tn,\n    SHOW: \"show\" + Tn,\n    SHOWN: \"shown\" + Tn,\n    INSERTED: \"inserted\" + Tn,\n    CLICK: \"click\" + Tn,\n    FOCUSIN: \"focusin\" + Tn,\n    FOCUSOUT: \"focusout\" + Tn,\n    MOUSEENTER: \"mouseenter\" + Tn,\n    MOUSELEAVE: \"mouseleave\" + Tn\n  },\n      Hn = \"fade\",\n      jn = \"show\",\n      Rn = \".tooltip-inner\",\n      Fn = \".arrow\",\n      Mn = \"hover\",\n      Wn = \"focus\",\n      Un = \"click\",\n      Bn = \"manual\",\n      qn = function () {\n    function i(t, e) {\n      if (\"undefined\" == typeof be) throw new TypeError(\"Bootstrap's tooltips require Popper.js (https://popper.js.org/)\");\n      this._isEnabled = !0, this._timeout = 0, this._hoverState = \"\", this._activeTrigger = {}, this._popper = null, this.element = t, this.config = this._getConfig(e), this.tip = null, this._setListeners();\n    }\n\n    var t = i.prototype;\n    return t.enable = function () {\n      this._isEnabled = !0;\n    }, t.disable = function () {\n      this._isEnabled = !1;\n    }, t.toggleEnabled = function () {\n      this._isEnabled = !this._isEnabled;\n    }, t.toggle = function (t) {\n      if (this._isEnabled) if (t) {\n        var e = this.constructor.DATA_KEY,\n            n = p(t.currentTarget).data(e);\n        n || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), p(t.currentTarget).data(e, n)), n._activeTrigger.click = !n._activeTrigger.click, n._isWithActiveTrigger() ? n._enter(null, n) : n._leave(null, n);\n      } else {\n        if (p(this.getTipElement()).hasClass(jn)) return void this._leave(null, this);\n\n        this._enter(null, this);\n      }\n    }, t.dispose = function () {\n      clearTimeout(this._timeout), p.removeData(this.element, this.constructor.DATA_KEY), p(this.element).off(this.constructor.EVENT_KEY), p(this.element).closest(\".modal\").off(\"hide.bs.modal\"), this.tip && p(this.tip).remove(), this._isEnabled = null, this._timeout = null, this._hoverState = null, (this._activeTrigger = null) !== this._popper && this._popper.destroy(), this._popper = null, this.element = null, this.config = null, this.tip = null;\n    }, t.show = function () {\n      var e = this;\n      if (\"none\" === p(this.element).css(\"display\")) throw new Error(\"Please use show on visible elements\");\n      var t = p.Event(this.constructor.Event.SHOW);\n\n      if (this.isWithContent() && this._isEnabled) {\n        p(this.element).trigger(t);\n        var n = m.findShadowRoot(this.element),\n            i = p.contains(null !== n ? n : this.element.ownerDocument.documentElement, this.element);\n        if (t.isDefaultPrevented() || !i) return;\n        var o = this.getTipElement(),\n            r = m.getUID(this.constructor.NAME);\n        o.setAttribute(\"id\", r), this.element.setAttribute(\"aria-describedby\", r), this.setContent(), this.config.animation && p(o).addClass(Hn);\n\n        var s = \"function\" == typeof this.config.placement ? this.config.placement.call(this, o, this.element) : this.config.placement,\n            a = this._getAttachment(s);\n\n        this.addAttachmentClass(a);\n\n        var l = this._getContainer();\n\n        p(o).data(this.constructor.DATA_KEY, this), p.contains(this.element.ownerDocument.documentElement, this.tip) || p(o).appendTo(l), p(this.element).trigger(this.constructor.Event.INSERTED), this._popper = new be(this.element, o, {\n          placement: a,\n          modifiers: {\n            offset: this._getOffset(),\n            flip: {\n              behavior: this.config.fallbackPlacement\n            },\n            arrow: {\n              element: Fn\n            },\n            preventOverflow: {\n              boundariesElement: this.config.boundary\n            }\n          },\n          onCreate: function onCreate(t) {\n            t.originalPlacement !== t.placement && e._handlePopperPlacementChange(t);\n          },\n          onUpdate: function onUpdate(t) {\n            return e._handlePopperPlacementChange(t);\n          }\n        }), p(o).addClass(jn), \"ontouchstart\" in document.documentElement && p(document.body).children().on(\"mouseover\", null, p.noop);\n\n        var c = function c() {\n          e.config.animation && e._fixTransition();\n          var t = e._hoverState;\n          e._hoverState = null, p(e.element).trigger(e.constructor.Event.SHOWN), t === xn && e._leave(null, e);\n        };\n\n        if (p(this.tip).hasClass(Hn)) {\n          var h = m.getTransitionDurationFromElement(this.tip);\n          p(this.tip).one(m.TRANSITION_END, c).emulateTransitionEnd(h);\n        } else c();\n      }\n    }, t.hide = function (t) {\n      var e = this,\n          n = this.getTipElement(),\n          i = p.Event(this.constructor.Event.HIDE),\n          o = function o() {\n        e._hoverState !== Ln && n.parentNode && n.parentNode.removeChild(n), e._cleanTipClass(), e.element.removeAttribute(\"aria-describedby\"), p(e.element).trigger(e.constructor.Event.HIDDEN), null !== e._popper && e._popper.destroy(), t && t();\n      };\n\n      if (p(this.element).trigger(i), !i.isDefaultPrevented()) {\n        if (p(n).removeClass(jn), \"ontouchstart\" in document.documentElement && p(document.body).children().off(\"mouseover\", null, p.noop), this._activeTrigger[Un] = !1, this._activeTrigger[Wn] = !1, this._activeTrigger[Mn] = !1, p(this.tip).hasClass(Hn)) {\n          var r = m.getTransitionDurationFromElement(n);\n          p(n).one(m.TRANSITION_END, o).emulateTransitionEnd(r);\n        } else o();\n\n        this._hoverState = \"\";\n      }\n    }, t.update = function () {\n      null !== this._popper && this._popper.scheduleUpdate();\n    }, t.isWithContent = function () {\n      return Boolean(this.getTitle());\n    }, t.addAttachmentClass = function (t) {\n      p(this.getTipElement()).addClass(Dn + \"-\" + t);\n    }, t.getTipElement = function () {\n      return this.tip = this.tip || p(this.config.template)[0], this.tip;\n    }, t.setContent = function () {\n      var t = this.getTipElement();\n      this.setElementContent(p(t.querySelectorAll(Rn)), this.getTitle()), p(t).removeClass(Hn + \" \" + jn);\n    }, t.setElementContent = function (t, e) {\n      \"object\" != _typeof(e) || !e.nodeType && !e.jquery ? this.config.html ? (this.config.sanitize && (e = bn(e, this.config.whiteList, this.config.sanitizeFn)), t.html(e)) : t.text(e) : this.config.html ? p(e).parent().is(t) || t.empty().append(e) : t.text(p(e).text());\n    }, t.getTitle = function () {\n      var t = this.element.getAttribute(\"data-original-title\");\n      return t || (t = \"function\" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), t;\n    }, t._getOffset = function () {\n      var e = this,\n          t = {};\n      return \"function\" == typeof this.config.offset ? t.fn = function (t) {\n        return t.offsets = l({}, t.offsets, e.config.offset(t.offsets, e.element) || {}), t;\n      } : t.offset = this.config.offset, t;\n    }, t._getContainer = function () {\n      return !1 === this.config.container ? document.body : m.isElement(this.config.container) ? p(this.config.container) : p(document).find(this.config.container);\n    }, t._getAttachment = function (t) {\n      return Nn[t.toUpperCase()];\n    }, t._setListeners = function () {\n      var i = this;\n      this.config.trigger.split(\" \").forEach(function (t) {\n        if (\"click\" === t) p(i.element).on(i.constructor.Event.CLICK, i.config.selector, function (t) {\n          return i.toggle(t);\n        });else if (t !== Bn) {\n          var e = t === Mn ? i.constructor.Event.MOUSEENTER : i.constructor.Event.FOCUSIN,\n              n = t === Mn ? i.constructor.Event.MOUSELEAVE : i.constructor.Event.FOCUSOUT;\n          p(i.element).on(e, i.config.selector, function (t) {\n            return i._enter(t);\n          }).on(n, i.config.selector, function (t) {\n            return i._leave(t);\n          });\n        }\n      }), p(this.element).closest(\".modal\").on(\"hide.bs.modal\", function () {\n        i.element && i.hide();\n      }), this.config.selector ? this.config = l({}, this.config, {\n        trigger: \"manual\",\n        selector: \"\"\n      }) : this._fixTitle();\n    }, t._fixTitle = function () {\n      var t = _typeof(this.element.getAttribute(\"data-original-title\"));\n\n      (this.element.getAttribute(\"title\") || \"string\" !== t) && (this.element.setAttribute(\"data-original-title\", this.element.getAttribute(\"title\") || \"\"), this.element.setAttribute(\"title\", \"\"));\n    }, t._enter = function (t, e) {\n      var n = this.constructor.DATA_KEY;\n      (e = e || p(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), p(t.currentTarget).data(n, e)), t && (e._activeTrigger[\"focusin\" === t.type ? Wn : Mn] = !0), p(e.getTipElement()).hasClass(jn) || e._hoverState === Ln ? e._hoverState = Ln : (clearTimeout(e._timeout), e._hoverState = Ln, e.config.delay && e.config.delay.show ? e._timeout = setTimeout(function () {\n        e._hoverState === Ln && e.show();\n      }, e.config.delay.show) : e.show());\n    }, t._leave = function (t, e) {\n      var n = this.constructor.DATA_KEY;\n      (e = e || p(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), p(t.currentTarget).data(n, e)), t && (e._activeTrigger[\"focusout\" === t.type ? Wn : Mn] = !1), e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = xn, e.config.delay && e.config.delay.hide ? e._timeout = setTimeout(function () {\n        e._hoverState === xn && e.hide();\n      }, e.config.delay.hide) : e.hide());\n    }, t._isWithActiveTrigger = function () {\n      for (var t in this._activeTrigger) {\n        if (this._activeTrigger[t]) return !0;\n      }\n\n      return !1;\n    }, t._getConfig = function (t) {\n      var e = p(this.element).data();\n      return Object.keys(e).forEach(function (t) {\n        -1 !== An.indexOf(t) && delete e[t];\n      }), \"number\" == typeof (t = l({}, this.constructor.Default, e, \"object\" == _typeof(t) && t ? t : {})).delay && (t.delay = {\n        show: t.delay,\n        hide: t.delay\n      }), \"number\" == typeof t.title && (t.title = t.title.toString()), \"number\" == typeof t.content && (t.content = t.content.toString()), m.typeCheckConfig(wn, t, this.constructor.DefaultType), t.sanitize && (t.template = bn(t.template, t.whiteList, t.sanitizeFn)), t;\n    }, t._getDelegateConfig = function () {\n      var t = {};\n      if (this.config) for (var e in this.config) {\n        this.constructor.Default[e] !== this.config[e] && (t[e] = this.config[e]);\n      }\n      return t;\n    }, t._cleanTipClass = function () {\n      var t = p(this.getTipElement()),\n          e = t.attr(\"class\").match(In);\n      null !== e && e.length && t.removeClass(e.join(\"\"));\n    }, t._handlePopperPlacementChange = function (t) {\n      var e = t.instance;\n      this.tip = e.popper, this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(t.placement));\n    }, t._fixTransition = function () {\n      var t = this.getTipElement(),\n          e = this.config.animation;\n      null === t.getAttribute(\"x-placement\") && (p(t).removeClass(Hn), this.config.animation = !1, this.hide(), this.show(), this.config.animation = e);\n    }, i._jQueryInterface = function (n) {\n      return this.each(function () {\n        var t = p(this).data(Cn),\n            e = \"object\" == _typeof(n) && n;\n\n        if ((t || !/dispose|hide/.test(n)) && (t || (t = new i(this, e), p(this).data(Cn, t)), \"string\" == typeof n)) {\n          if (\"undefined\" == typeof t[n]) throw new TypeError('No method named \"' + n + '\"');\n          t[n]();\n        }\n      });\n    }, s(i, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return kn;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return wn;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return Cn;\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return Pn;\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return Tn;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return On;\n      }\n    }]), i;\n  }();\n\n  p.fn[wn] = qn._jQueryInterface, p.fn[wn].Constructor = qn, p.fn[wn].noConflict = function () {\n    return p.fn[wn] = Sn, qn._jQueryInterface;\n  };\n\n  var Kn = \"popover\",\n      Qn = \"bs.popover\",\n      Vn = \".\" + Qn,\n      Yn = p.fn[Kn],\n      zn = \"bs-popover\",\n      Xn = new RegExp(\"(^|\\\\s)\" + zn + \"\\\\S+\", \"g\"),\n      Gn = l({}, qn.Default, {\n    placement: \"right\",\n    trigger: \"click\",\n    content: \"\",\n    template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-header\"></h3><div class=\"popover-body\"></div></div>'\n  }),\n      $n = l({}, qn.DefaultType, {\n    content: \"(string|element|function)\"\n  }),\n      Jn = \"fade\",\n      Zn = \"show\",\n      ti = \".popover-header\",\n      ei = \".popover-body\",\n      ni = {\n    HIDE: \"hide\" + Vn,\n    HIDDEN: \"hidden\" + Vn,\n    SHOW: \"show\" + Vn,\n    SHOWN: \"shown\" + Vn,\n    INSERTED: \"inserted\" + Vn,\n    CLICK: \"click\" + Vn,\n    FOCUSIN: \"focusin\" + Vn,\n    FOCUSOUT: \"focusout\" + Vn,\n    MOUSEENTER: \"mouseenter\" + Vn,\n    MOUSELEAVE: \"mouseleave\" + Vn\n  },\n      ii = function (t) {\n    var e, n;\n\n    function i() {\n      return t.apply(this, arguments) || this;\n    }\n\n    n = t, (e = i).prototype = Object.create(n.prototype), (e.prototype.constructor = e).__proto__ = n;\n    var o = i.prototype;\n    return o.isWithContent = function () {\n      return this.getTitle() || this._getContent();\n    }, o.addAttachmentClass = function (t) {\n      p(this.getTipElement()).addClass(zn + \"-\" + t);\n    }, o.getTipElement = function () {\n      return this.tip = this.tip || p(this.config.template)[0], this.tip;\n    }, o.setContent = function () {\n      var t = p(this.getTipElement());\n      this.setElementContent(t.find(ti), this.getTitle());\n\n      var e = this._getContent();\n\n      \"function\" == typeof e && (e = e.call(this.element)), this.setElementContent(t.find(ei), e), t.removeClass(Jn + \" \" + Zn);\n    }, o._getContent = function () {\n      return this.element.getAttribute(\"data-content\") || this.config.content;\n    }, o._cleanTipClass = function () {\n      var t = p(this.getTipElement()),\n          e = t.attr(\"class\").match(Xn);\n      null !== e && 0 < e.length && t.removeClass(e.join(\"\"));\n    }, i._jQueryInterface = function (n) {\n      return this.each(function () {\n        var t = p(this).data(Qn),\n            e = \"object\" == _typeof(n) ? n : null;\n\n        if ((t || !/dispose|hide/.test(n)) && (t || (t = new i(this, e), p(this).data(Qn, t)), \"string\" == typeof n)) {\n          if (\"undefined\" == typeof t[n]) throw new TypeError('No method named \"' + n + '\"');\n          t[n]();\n        }\n      });\n    }, s(i, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Gn;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return Kn;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return Qn;\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return ni;\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return Vn;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return $n;\n      }\n    }]), i;\n  }(qn);\n\n  p.fn[Kn] = ii._jQueryInterface, p.fn[Kn].Constructor = ii, p.fn[Kn].noConflict = function () {\n    return p.fn[Kn] = Yn, ii._jQueryInterface;\n  };\n\n  var oi = \"scrollspy\",\n      ri = \"bs.scrollspy\",\n      si = \".\" + ri,\n      ai = p.fn[oi],\n      li = {\n    offset: 10,\n    method: \"auto\",\n    target: \"\"\n  },\n      ci = {\n    offset: \"number\",\n    method: \"string\",\n    target: \"(string|element)\"\n  },\n      hi = {\n    ACTIVATE: \"activate\" + si,\n    SCROLL: \"scroll\" + si,\n    LOAD_DATA_API: \"load\" + si + \".data-api\"\n  },\n      ui = \"dropdown-item\",\n      fi = \"active\",\n      di = '[data-spy=\"scroll\"]',\n      pi = \".nav, .list-group\",\n      mi = \".nav-link\",\n      gi = \".nav-item\",\n      _i = \".list-group-item\",\n      vi = \".dropdown\",\n      yi = \".dropdown-item\",\n      Ei = \".dropdown-toggle\",\n      bi = \"offset\",\n      wi = \"position\",\n      Ci = function () {\n    function n(t, e) {\n      var n = this;\n      this._element = t, this._scrollElement = \"BODY\" === t.tagName ? window : t, this._config = this._getConfig(e), this._selector = this._config.target + \" \" + mi + \",\" + this._config.target + \" \" + _i + \",\" + this._config.target + \" \" + yi, this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, p(this._scrollElement).on(hi.SCROLL, function (t) {\n        return n._process(t);\n      }), this.refresh(), this._process();\n    }\n\n    var t = n.prototype;\n    return t.refresh = function () {\n      var e = this,\n          t = this._scrollElement === this._scrollElement.window ? bi : wi,\n          o = \"auto\" === this._config.method ? t : this._config.method,\n          r = o === wi ? this._getScrollTop() : 0;\n      this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), [].slice.call(document.querySelectorAll(this._selector)).map(function (t) {\n        var e,\n            n = m.getSelectorFromElement(t);\n\n        if (n && (e = document.querySelector(n)), e) {\n          var i = e.getBoundingClientRect();\n          if (i.width || i.height) return [p(e)[o]().top + r, n];\n        }\n\n        return null;\n      }).filter(function (t) {\n        return t;\n      }).sort(function (t, e) {\n        return t[0] - e[0];\n      }).forEach(function (t) {\n        e._offsets.push(t[0]), e._targets.push(t[1]);\n      });\n    }, t.dispose = function () {\n      p.removeData(this._element, ri), p(this._scrollElement).off(si), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;\n    }, t._getConfig = function (t) {\n      if (\"string\" != typeof (t = l({}, li, \"object\" == _typeof(t) && t ? t : {})).target) {\n        var e = p(t.target).attr(\"id\");\n        e || (e = m.getUID(oi), p(t.target).attr(\"id\", e)), t.target = \"#\" + e;\n      }\n\n      return m.typeCheckConfig(oi, t, ci), t;\n    }, t._getScrollTop = function () {\n      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n    }, t._getScrollHeight = function () {\n      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n    }, t._getOffsetHeight = function () {\n      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n    }, t._process = function () {\n      var t = this._getScrollTop() + this._config.offset,\n          e = this._getScrollHeight(),\n          n = this._config.offset + e - this._getOffsetHeight();\n\n      if (this._scrollHeight !== e && this.refresh(), n <= t) {\n        var i = this._targets[this._targets.length - 1];\n        this._activeTarget !== i && this._activate(i);\n      } else {\n        if (this._activeTarget && t < this._offsets[0] && 0 < this._offsets[0]) return this._activeTarget = null, void this._clear();\n\n        for (var o = this._offsets.length; o--;) {\n          this._activeTarget !== this._targets[o] && t >= this._offsets[o] && (\"undefined\" == typeof this._offsets[o + 1] || t < this._offsets[o + 1]) && this._activate(this._targets[o]);\n        }\n      }\n    }, t._activate = function (e) {\n      this._activeTarget = e, this._clear();\n\n      var t = this._selector.split(\",\").map(function (t) {\n        return t + '[data-target=\"' + e + '\"],' + t + '[href=\"' + e + '\"]';\n      }),\n          n = p([].slice.call(document.querySelectorAll(t.join(\",\"))));\n\n      n.hasClass(ui) ? (n.closest(vi).find(Ei).addClass(fi), n.addClass(fi)) : (n.addClass(fi), n.parents(pi).prev(mi + \", \" + _i).addClass(fi), n.parents(pi).prev(gi).children(mi).addClass(fi)), p(this._scrollElement).trigger(hi.ACTIVATE, {\n        relatedTarget: e\n      });\n    }, t._clear = function () {\n      [].slice.call(document.querySelectorAll(this._selector)).filter(function (t) {\n        return t.classList.contains(fi);\n      }).forEach(function (t) {\n        return t.classList.remove(fi);\n      });\n    }, n._jQueryInterface = function (e) {\n      return this.each(function () {\n        var t = p(this).data(ri);\n\n        if (t || (t = new n(this, \"object\" == _typeof(e) && e), p(this).data(ri, t)), \"string\" == typeof e) {\n          if (\"undefined\" == typeof t[e]) throw new TypeError('No method named \"' + e + '\"');\n          t[e]();\n        }\n      });\n    }, s(n, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return li;\n      }\n    }]), n;\n  }();\n\n  p(window).on(hi.LOAD_DATA_API, function () {\n    for (var t = [].slice.call(document.querySelectorAll(di)), e = t.length; e--;) {\n      var n = p(t[e]);\n\n      Ci._jQueryInterface.call(n, n.data());\n    }\n  }), p.fn[oi] = Ci._jQueryInterface, p.fn[oi].Constructor = Ci, p.fn[oi].noConflict = function () {\n    return p.fn[oi] = ai, Ci._jQueryInterface;\n  };\n\n  var Ti = \"bs.tab\",\n      Si = \".\" + Ti,\n      Di = p.fn.tab,\n      Ii = {\n    HIDE: \"hide\" + Si,\n    HIDDEN: \"hidden\" + Si,\n    SHOW: \"show\" + Si,\n    SHOWN: \"shown\" + Si,\n    CLICK_DATA_API: \"click\" + Si + \".data-api\"\n  },\n      Ai = \"dropdown-menu\",\n      Oi = \"active\",\n      Ni = \"disabled\",\n      ki = \"fade\",\n      Li = \"show\",\n      xi = \".dropdown\",\n      Pi = \".nav, .list-group\",\n      Hi = \".active\",\n      ji = \"> li > .active\",\n      Ri = '[data-toggle=\"tab\"], [data-toggle=\"pill\"], [data-toggle=\"list\"]',\n      Fi = \".dropdown-toggle\",\n      Mi = \"> .dropdown-menu .active\",\n      Wi = function () {\n    function i(t) {\n      this._element = t;\n    }\n\n    var t = i.prototype;\n    return t.show = function () {\n      var n = this;\n\n      if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && p(this._element).hasClass(Oi) || p(this._element).hasClass(Ni))) {\n        var t,\n            i,\n            e = p(this._element).closest(Pi)[0],\n            o = m.getSelectorFromElement(this._element);\n\n        if (e) {\n          var r = \"UL\" === e.nodeName || \"OL\" === e.nodeName ? ji : Hi;\n          i = (i = p.makeArray(p(e).find(r)))[i.length - 1];\n        }\n\n        var s = p.Event(Ii.HIDE, {\n          relatedTarget: this._element\n        }),\n            a = p.Event(Ii.SHOW, {\n          relatedTarget: i\n        });\n\n        if (i && p(i).trigger(s), p(this._element).trigger(a), !a.isDefaultPrevented() && !s.isDefaultPrevented()) {\n          o && (t = document.querySelector(o)), this._activate(this._element, e);\n\n          var l = function l() {\n            var t = p.Event(Ii.HIDDEN, {\n              relatedTarget: n._element\n            }),\n                e = p.Event(Ii.SHOWN, {\n              relatedTarget: i\n            });\n            p(i).trigger(t), p(n._element).trigger(e);\n          };\n\n          t ? this._activate(t, t.parentNode, l) : l();\n        }\n      }\n    }, t.dispose = function () {\n      p.removeData(this._element, Ti), this._element = null;\n    }, t._activate = function (t, e, n) {\n      var i = this,\n          o = (!e || \"UL\" !== e.nodeName && \"OL\" !== e.nodeName ? p(e).children(Hi) : p(e).find(ji))[0],\n          r = n && o && p(o).hasClass(ki),\n          s = function s() {\n        return i._transitionComplete(t, o, n);\n      };\n\n      if (o && r) {\n        var a = m.getTransitionDurationFromElement(o);\n        p(o).removeClass(Li).one(m.TRANSITION_END, s).emulateTransitionEnd(a);\n      } else s();\n    }, t._transitionComplete = function (t, e, n) {\n      if (e) {\n        p(e).removeClass(Oi);\n        var i = p(e.parentNode).find(Mi)[0];\n        i && p(i).removeClass(Oi), \"tab\" === e.getAttribute(\"role\") && e.setAttribute(\"aria-selected\", !1);\n      }\n\n      if (p(t).addClass(Oi), \"tab\" === t.getAttribute(\"role\") && t.setAttribute(\"aria-selected\", !0), m.reflow(t), t.classList.contains(ki) && t.classList.add(Li), t.parentNode && p(t.parentNode).hasClass(Ai)) {\n        var o = p(t).closest(xi)[0];\n\n        if (o) {\n          var r = [].slice.call(o.querySelectorAll(Fi));\n          p(r).addClass(Oi);\n        }\n\n        t.setAttribute(\"aria-expanded\", !0);\n      }\n\n      n && n();\n    }, i._jQueryInterface = function (n) {\n      return this.each(function () {\n        var t = p(this),\n            e = t.data(Ti);\n\n        if (e || (e = new i(this), t.data(Ti, e)), \"string\" == typeof n) {\n          if (\"undefined\" == typeof e[n]) throw new TypeError('No method named \"' + n + '\"');\n          e[n]();\n        }\n      });\n    }, s(i, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }]), i;\n  }();\n\n  p(document).on(Ii.CLICK_DATA_API, Ri, function (t) {\n    t.preventDefault(), Wi._jQueryInterface.call(p(this), \"show\");\n  }), p.fn.tab = Wi._jQueryInterface, p.fn.tab.Constructor = Wi, p.fn.tab.noConflict = function () {\n    return p.fn.tab = Di, Wi._jQueryInterface;\n  };\n\n  var Ui = \"toast\",\n      Bi = \"bs.toast\",\n      qi = \".\" + Bi,\n      Ki = p.fn[Ui],\n      Qi = {\n    CLICK_DISMISS: \"click.dismiss\" + qi,\n    HIDE: \"hide\" + qi,\n    HIDDEN: \"hidden\" + qi,\n    SHOW: \"show\" + qi,\n    SHOWN: \"shown\" + qi\n  },\n      Vi = \"fade\",\n      Yi = \"hide\",\n      zi = \"show\",\n      Xi = \"showing\",\n      Gi = {\n    animation: \"boolean\",\n    autohide: \"boolean\",\n    delay: \"number\"\n  },\n      $i = {\n    animation: !0,\n    autohide: !0,\n    delay: 500\n  },\n      Ji = '[data-dismiss=\"toast\"]',\n      Zi = function () {\n    function i(t, e) {\n      this._element = t, this._config = this._getConfig(e), this._timeout = null, this._setListeners();\n    }\n\n    var t = i.prototype;\n    return t.show = function () {\n      var t = this;\n      p(this._element).trigger(Qi.SHOW), this._config.animation && this._element.classList.add(Vi);\n\n      var e = function e() {\n        t._element.classList.remove(Xi), t._element.classList.add(zi), p(t._element).trigger(Qi.SHOWN), t._config.autohide && t.hide();\n      };\n\n      if (this._element.classList.remove(Yi), this._element.classList.add(Xi), this._config.animation) {\n        var n = m.getTransitionDurationFromElement(this._element);\n        p(this._element).one(m.TRANSITION_END, e).emulateTransitionEnd(n);\n      } else e();\n    }, t.hide = function (t) {\n      var e = this;\n      this._element.classList.contains(zi) && (p(this._element).trigger(Qi.HIDE), t ? this._close() : this._timeout = setTimeout(function () {\n        e._close();\n      }, this._config.delay));\n    }, t.dispose = function () {\n      clearTimeout(this._timeout), this._timeout = null, this._element.classList.contains(zi) && this._element.classList.remove(zi), p(this._element).off(Qi.CLICK_DISMISS), p.removeData(this._element, Bi), this._element = null, this._config = null;\n    }, t._getConfig = function (t) {\n      return t = l({}, $i, p(this._element).data(), \"object\" == _typeof(t) && t ? t : {}), m.typeCheckConfig(Ui, t, this.constructor.DefaultType), t;\n    }, t._setListeners = function () {\n      var t = this;\n      p(this._element).on(Qi.CLICK_DISMISS, Ji, function () {\n        return t.hide(!0);\n      });\n    }, t._close = function () {\n      var t = this,\n          e = function e() {\n        t._element.classList.add(Yi), p(t._element).trigger(Qi.HIDDEN);\n      };\n\n      if (this._element.classList.remove(zi), this._config.animation) {\n        var n = m.getTransitionDurationFromElement(this._element);\n        p(this._element).one(m.TRANSITION_END, e).emulateTransitionEnd(n);\n      } else e();\n    }, i._jQueryInterface = function (n) {\n      return this.each(function () {\n        var t = p(this),\n            e = t.data(Bi);\n\n        if (e || (e = new i(this, \"object\" == _typeof(n) && n), t.data(Bi, e)), \"string\" == typeof n) {\n          if (\"undefined\" == typeof e[n]) throw new TypeError('No method named \"' + n + '\"');\n          e[n](this);\n        }\n      });\n    }, s(i, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"4.3.1\";\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return Gi;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return $i;\n      }\n    }]), i;\n  }();\n\n  p.fn[Ui] = Zi._jQueryInterface, p.fn[Ui].Constructor = Zi, p.fn[Ui].noConflict = function () {\n    return p.fn[Ui] = Ki, Zi._jQueryInterface;\n  }, function () {\n    if (\"undefined\" == typeof p) throw new TypeError(\"Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.\");\n    var t = p.fn.jquery.split(\" \")[0].split(\".\");\n    if (t[0] < 2 && t[1] < 9 || 1 === t[0] && 9 === t[1] && t[2] < 1 || 4 <= t[0]) throw new Error(\"Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0\");\n  }(), t.Util = m, t.Alert = g, t.Button = k, t.Carousel = at, t.Collapse = Ct, t.Dropdown = Xe, t.Modal = gn, t.Popover = ii, t.Scrollspy = Ci, t.Tab = Wi, t.Toast = Zi, t.Tooltip = qn, Object.defineProperty(t, \"__esModule\", {\n    value: !0\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/plugins/bootstrap/js/bootstrap.bundle.min.js\n");

/***/ }),

/***/ "./resources/plugins/jquery/jquery.min.js":
/*!************************************************!*\
  !*** ./resources/plugins/jquery/jquery.min.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*! jQuery v3.4.1 | (c) JS Foundation and other contributors | jquery.org/license */\n!function (e, t) {\n  \"use strict\";\n\n  \"object\" == ( false ? 0 : _typeof(module)) && \"object\" == _typeof(module.exports) ? module.exports = e.document ? t(e, !0) : function (e) {\n    if (!e.document) throw new Error(\"jQuery requires a window with a document\");\n    return t(e);\n  } : t(e);\n}(\"undefined\" != typeof window ? window : this, function (C, e) {\n  \"use strict\";\n\n  var t = [],\n      E = C.document,\n      r = Object.getPrototypeOf,\n      s = t.slice,\n      g = t.concat,\n      u = t.push,\n      i = t.indexOf,\n      n = {},\n      o = n.toString,\n      v = n.hasOwnProperty,\n      a = v.toString,\n      l = a.call(Object),\n      y = {},\n      m = function m(e) {\n    return \"function\" == typeof e && \"number\" != typeof e.nodeType;\n  },\n      x = function x(e) {\n    return null != e && e === e.window;\n  },\n      c = {\n    type: !0,\n    src: !0,\n    nonce: !0,\n    noModule: !0\n  };\n\n  function b(e, t, n) {\n    var r,\n        i,\n        o = (n = n || E).createElement(\"script\");\n    if (o.text = e, t) for (r in c) {\n      (i = t[r] || t.getAttribute && t.getAttribute(r)) && o.setAttribute(r, i);\n    }\n    n.head.appendChild(o).parentNode.removeChild(o);\n  }\n\n  function w(e) {\n    return null == e ? e + \"\" : \"object\" == _typeof(e) || \"function\" == typeof e ? n[o.call(e)] || \"object\" : _typeof(e);\n  }\n\n  var f = \"3.4.1\",\n      k = function k(e, t) {\n    return new k.fn.init(e, t);\n  },\n      p = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n  function d(e) {\n    var t = !!e && \"length\" in e && e.length,\n        n = w(e);\n    return !m(e) && !x(e) && (\"array\" === n || 0 === t || \"number\" == typeof t && 0 < t && t - 1 in e);\n  }\n\n  k.fn = k.prototype = {\n    jquery: f,\n    constructor: k,\n    length: 0,\n    toArray: function toArray() {\n      return s.call(this);\n    },\n    get: function get(e) {\n      return null == e ? s.call(this) : e < 0 ? this[e + this.length] : this[e];\n    },\n    pushStack: function pushStack(e) {\n      var t = k.merge(this.constructor(), e);\n      return t.prevObject = this, t;\n    },\n    each: function each(e) {\n      return k.each(this, e);\n    },\n    map: function map(n) {\n      return this.pushStack(k.map(this, function (e, t) {\n        return n.call(e, t, e);\n      }));\n    },\n    slice: function slice() {\n      return this.pushStack(s.apply(this, arguments));\n    },\n    first: function first() {\n      return this.eq(0);\n    },\n    last: function last() {\n      return this.eq(-1);\n    },\n    eq: function eq(e) {\n      var t = this.length,\n          n = +e + (e < 0 ? t : 0);\n      return this.pushStack(0 <= n && n < t ? [this[n]] : []);\n    },\n    end: function end() {\n      return this.prevObject || this.constructor();\n    },\n    push: u,\n    sort: t.sort,\n    splice: t.splice\n  }, k.extend = k.fn.extend = function () {\n    var e,\n        t,\n        n,\n        r,\n        i,\n        o,\n        a = arguments[0] || {},\n        s = 1,\n        u = arguments.length,\n        l = !1;\n\n    for (\"boolean\" == typeof a && (l = a, a = arguments[s] || {}, s++), \"object\" == _typeof(a) || m(a) || (a = {}), s === u && (a = this, s--); s < u; s++) {\n      if (null != (e = arguments[s])) for (t in e) {\n        r = e[t], \"__proto__\" !== t && a !== r && (l && r && (k.isPlainObject(r) || (i = Array.isArray(r))) ? (n = a[t], o = i && !Array.isArray(n) ? [] : i || k.isPlainObject(n) ? n : {}, i = !1, a[t] = k.extend(l, o, r)) : void 0 !== r && (a[t] = r));\n      }\n    }\n\n    return a;\n  }, k.extend({\n    expando: \"jQuery\" + (f + Math.random()).replace(/\\D/g, \"\"),\n    isReady: !0,\n    error: function error(e) {\n      throw new Error(e);\n    },\n    noop: function noop() {},\n    isPlainObject: function isPlainObject(e) {\n      var t, n;\n      return !(!e || \"[object Object]\" !== o.call(e)) && (!(t = r(e)) || \"function\" == typeof (n = v.call(t, \"constructor\") && t.constructor) && a.call(n) === l);\n    },\n    isEmptyObject: function isEmptyObject(e) {\n      var t;\n\n      for (t in e) {\n        return !1;\n      }\n\n      return !0;\n    },\n    globalEval: function globalEval(e, t) {\n      b(e, {\n        nonce: t && t.nonce\n      });\n    },\n    each: function each(e, t) {\n      var n,\n          r = 0;\n\n      if (d(e)) {\n        for (n = e.length; r < n; r++) {\n          if (!1 === t.call(e[r], r, e[r])) break;\n        }\n      } else for (r in e) {\n        if (!1 === t.call(e[r], r, e[r])) break;\n      }\n\n      return e;\n    },\n    trim: function trim(e) {\n      return null == e ? \"\" : (e + \"\").replace(p, \"\");\n    },\n    makeArray: function makeArray(e, t) {\n      var n = t || [];\n      return null != e && (d(Object(e)) ? k.merge(n, \"string\" == typeof e ? [e] : e) : u.call(n, e)), n;\n    },\n    inArray: function inArray(e, t, n) {\n      return null == t ? -1 : i.call(t, e, n);\n    },\n    merge: function merge(e, t) {\n      for (var n = +t.length, r = 0, i = e.length; r < n; r++) {\n        e[i++] = t[r];\n      }\n\n      return e.length = i, e;\n    },\n    grep: function grep(e, t, n) {\n      for (var r = [], i = 0, o = e.length, a = !n; i < o; i++) {\n        !t(e[i], i) !== a && r.push(e[i]);\n      }\n\n      return r;\n    },\n    map: function map(e, t, n) {\n      var r,\n          i,\n          o = 0,\n          a = [];\n      if (d(e)) for (r = e.length; o < r; o++) {\n        null != (i = t(e[o], o, n)) && a.push(i);\n      } else for (o in e) {\n        null != (i = t(e[o], o, n)) && a.push(i);\n      }\n      return g.apply([], a);\n    },\n    guid: 1,\n    support: y\n  }), \"function\" == typeof Symbol && (k.fn[Symbol.iterator] = t[Symbol.iterator]), k.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"), function (e, t) {\n    n[\"[object \" + t + \"]\"] = t.toLowerCase();\n  });\n\n  var h = function (n) {\n    var e,\n        d,\n        b,\n        o,\n        i,\n        h,\n        f,\n        g,\n        w,\n        u,\n        l,\n        T,\n        C,\n        a,\n        E,\n        v,\n        s,\n        c,\n        y,\n        k = \"sizzle\" + 1 * new Date(),\n        m = n.document,\n        S = 0,\n        r = 0,\n        p = ue(),\n        x = ue(),\n        N = ue(),\n        A = ue(),\n        D = function D(e, t) {\n      return e === t && (l = !0), 0;\n    },\n        j = {}.hasOwnProperty,\n        t = [],\n        q = t.pop,\n        L = t.push,\n        H = t.push,\n        O = t.slice,\n        P = function P(e, t) {\n      for (var n = 0, r = e.length; n < r; n++) {\n        if (e[n] === t) return n;\n      }\n\n      return -1;\n    },\n        R = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n        M = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n        I = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n        W = \"\\\\[\" + M + \"*(\" + I + \")(?:\" + M + \"*([*^$|!~]?=)\" + M + \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + I + \"))|)\" + M + \"*\\\\]\",\n        $ = \":(\" + I + \")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + W + \")*)|.*)\\\\)|)\",\n        F = new RegExp(M + \"+\", \"g\"),\n        B = new RegExp(\"^\" + M + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + M + \"+$\", \"g\"),\n        _ = new RegExp(\"^\" + M + \"*,\" + M + \"*\"),\n        z = new RegExp(\"^\" + M + \"*([>+~]|\" + M + \")\" + M + \"*\"),\n        U = new RegExp(M + \"|>\"),\n        X = new RegExp($),\n        V = new RegExp(\"^\" + I + \"$\"),\n        G = {\n      ID: new RegExp(\"^#(\" + I + \")\"),\n      CLASS: new RegExp(\"^\\\\.(\" + I + \")\"),\n      TAG: new RegExp(\"^(\" + I + \"|[*])\"),\n      ATTR: new RegExp(\"^\" + W),\n      PSEUDO: new RegExp(\"^\" + $),\n      CHILD: new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + M + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + M + \"*(?:([+-]|)\" + M + \"*(\\\\d+)|))\" + M + \"*\\\\)|)\", \"i\"),\n      bool: new RegExp(\"^(?:\" + R + \")$\", \"i\"),\n      needsContext: new RegExp(\"^\" + M + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + M + \"*((?:-\\\\d)?\\\\d*)\" + M + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n    },\n        Y = /HTML$/i,\n        Q = /^(?:input|select|textarea|button)$/i,\n        J = /^h\\d$/i,\n        K = /^[^{]+\\{\\s*\\[native \\w/,\n        Z = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n        ee = /[+~]/,\n        te = new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\" + M + \"?|(\" + M + \")|.)\", \"ig\"),\n        ne = function ne(e, t, n) {\n      var r = \"0x\" + t - 65536;\n      return r != r || n ? t : r < 0 ? String.fromCharCode(r + 65536) : String.fromCharCode(r >> 10 | 55296, 1023 & r | 56320);\n    },\n        re = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n        ie = function ie(e, t) {\n      return t ? \"\\0\" === e ? \"\\uFFFD\" : e.slice(0, -1) + \"\\\\\" + e.charCodeAt(e.length - 1).toString(16) + \" \" : \"\\\\\" + e;\n    },\n        oe = function oe() {\n      T();\n    },\n        ae = be(function (e) {\n      return !0 === e.disabled && \"fieldset\" === e.nodeName.toLowerCase();\n    }, {\n      dir: \"parentNode\",\n      next: \"legend\"\n    });\n\n    try {\n      H.apply(t = O.call(m.childNodes), m.childNodes), t[m.childNodes.length].nodeType;\n    } catch (e) {\n      H = {\n        apply: t.length ? function (e, t) {\n          L.apply(e, O.call(t));\n        } : function (e, t) {\n          var n = e.length,\n              r = 0;\n\n          while (e[n++] = t[r++]) {\n            ;\n          }\n\n          e.length = n - 1;\n        }\n      };\n    }\n\n    function se(t, e, n, r) {\n      var i,\n          o,\n          a,\n          s,\n          u,\n          l,\n          c,\n          f = e && e.ownerDocument,\n          p = e ? e.nodeType : 9;\n      if (n = n || [], \"string\" != typeof t || !t || 1 !== p && 9 !== p && 11 !== p) return n;\n\n      if (!r && ((e ? e.ownerDocument || e : m) !== C && T(e), e = e || C, E)) {\n        if (11 !== p && (u = Z.exec(t))) if (i = u[1]) {\n          if (9 === p) {\n            if (!(a = e.getElementById(i))) return n;\n            if (a.id === i) return n.push(a), n;\n          } else if (f && (a = f.getElementById(i)) && y(e, a) && a.id === i) return n.push(a), n;\n        } else {\n          if (u[2]) return H.apply(n, e.getElementsByTagName(t)), n;\n          if ((i = u[3]) && d.getElementsByClassName && e.getElementsByClassName) return H.apply(n, e.getElementsByClassName(i)), n;\n        }\n\n        if (d.qsa && !A[t + \" \"] && (!v || !v.test(t)) && (1 !== p || \"object\" !== e.nodeName.toLowerCase())) {\n          if (c = t, f = e, 1 === p && U.test(t)) {\n            (s = e.getAttribute(\"id\")) ? s = s.replace(re, ie) : e.setAttribute(\"id\", s = k), o = (l = h(t)).length;\n\n            while (o--) {\n              l[o] = \"#\" + s + \" \" + xe(l[o]);\n            }\n\n            c = l.join(\",\"), f = ee.test(t) && ye(e.parentNode) || e;\n          }\n\n          try {\n            return H.apply(n, f.querySelectorAll(c)), n;\n          } catch (e) {\n            A(t, !0);\n          } finally {\n            s === k && e.removeAttribute(\"id\");\n          }\n        }\n      }\n\n      return g(t.replace(B, \"$1\"), e, n, r);\n    }\n\n    function ue() {\n      var r = [];\n      return function e(t, n) {\n        return r.push(t + \" \") > b.cacheLength && delete e[r.shift()], e[t + \" \"] = n;\n      };\n    }\n\n    function le(e) {\n      return e[k] = !0, e;\n    }\n\n    function ce(e) {\n      var t = C.createElement(\"fieldset\");\n\n      try {\n        return !!e(t);\n      } catch (e) {\n        return !1;\n      } finally {\n        t.parentNode && t.parentNode.removeChild(t), t = null;\n      }\n    }\n\n    function fe(e, t) {\n      var n = e.split(\"|\"),\n          r = n.length;\n\n      while (r--) {\n        b.attrHandle[n[r]] = t;\n      }\n    }\n\n    function pe(e, t) {\n      var n = t && e,\n          r = n && 1 === e.nodeType && 1 === t.nodeType && e.sourceIndex - t.sourceIndex;\n      if (r) return r;\n      if (n) while (n = n.nextSibling) {\n        if (n === t) return -1;\n      }\n      return e ? 1 : -1;\n    }\n\n    function de(t) {\n      return function (e) {\n        return \"input\" === e.nodeName.toLowerCase() && e.type === t;\n      };\n    }\n\n    function he(n) {\n      return function (e) {\n        var t = e.nodeName.toLowerCase();\n        return (\"input\" === t || \"button\" === t) && e.type === n;\n      };\n    }\n\n    function ge(t) {\n      return function (e) {\n        return \"form\" in e ? e.parentNode && !1 === e.disabled ? \"label\" in e ? \"label\" in e.parentNode ? e.parentNode.disabled === t : e.disabled === t : e.isDisabled === t || e.isDisabled !== !t && ae(e) === t : e.disabled === t : \"label\" in e && e.disabled === t;\n      };\n    }\n\n    function ve(a) {\n      return le(function (o) {\n        return o = +o, le(function (e, t) {\n          var n,\n              r = a([], e.length, o),\n              i = r.length;\n\n          while (i--) {\n            e[n = r[i]] && (e[n] = !(t[n] = e[n]));\n          }\n        });\n      });\n    }\n\n    function ye(e) {\n      return e && \"undefined\" != typeof e.getElementsByTagName && e;\n    }\n\n    for (e in d = se.support = {}, i = se.isXML = function (e) {\n      var t = e.namespaceURI,\n          n = (e.ownerDocument || e).documentElement;\n      return !Y.test(t || n && n.nodeName || \"HTML\");\n    }, T = se.setDocument = function (e) {\n      var t,\n          n,\n          r = e ? e.ownerDocument || e : m;\n      return r !== C && 9 === r.nodeType && r.documentElement && (a = (C = r).documentElement, E = !i(C), m !== C && (n = C.defaultView) && n.top !== n && (n.addEventListener ? n.addEventListener(\"unload\", oe, !1) : n.attachEvent && n.attachEvent(\"onunload\", oe)), d.attributes = ce(function (e) {\n        return e.className = \"i\", !e.getAttribute(\"className\");\n      }), d.getElementsByTagName = ce(function (e) {\n        return e.appendChild(C.createComment(\"\")), !e.getElementsByTagName(\"*\").length;\n      }), d.getElementsByClassName = K.test(C.getElementsByClassName), d.getById = ce(function (e) {\n        return a.appendChild(e).id = k, !C.getElementsByName || !C.getElementsByName(k).length;\n      }), d.getById ? (b.filter.ID = function (e) {\n        var t = e.replace(te, ne);\n        return function (e) {\n          return e.getAttribute(\"id\") === t;\n        };\n      }, b.find.ID = function (e, t) {\n        if (\"undefined\" != typeof t.getElementById && E) {\n          var n = t.getElementById(e);\n          return n ? [n] : [];\n        }\n      }) : (b.filter.ID = function (e) {\n        var n = e.replace(te, ne);\n        return function (e) {\n          var t = \"undefined\" != typeof e.getAttributeNode && e.getAttributeNode(\"id\");\n          return t && t.value === n;\n        };\n      }, b.find.ID = function (e, t) {\n        if (\"undefined\" != typeof t.getElementById && E) {\n          var n,\n              r,\n              i,\n              o = t.getElementById(e);\n\n          if (o) {\n            if ((n = o.getAttributeNode(\"id\")) && n.value === e) return [o];\n            i = t.getElementsByName(e), r = 0;\n\n            while (o = i[r++]) {\n              if ((n = o.getAttributeNode(\"id\")) && n.value === e) return [o];\n            }\n          }\n\n          return [];\n        }\n      }), b.find.TAG = d.getElementsByTagName ? function (e, t) {\n        return \"undefined\" != typeof t.getElementsByTagName ? t.getElementsByTagName(e) : d.qsa ? t.querySelectorAll(e) : void 0;\n      } : function (e, t) {\n        var n,\n            r = [],\n            i = 0,\n            o = t.getElementsByTagName(e);\n\n        if (\"*\" === e) {\n          while (n = o[i++]) {\n            1 === n.nodeType && r.push(n);\n          }\n\n          return r;\n        }\n\n        return o;\n      }, b.find.CLASS = d.getElementsByClassName && function (e, t) {\n        if (\"undefined\" != typeof t.getElementsByClassName && E) return t.getElementsByClassName(e);\n      }, s = [], v = [], (d.qsa = K.test(C.querySelectorAll)) && (ce(function (e) {\n        a.appendChild(e).innerHTML = \"<a id='\" + k + \"'></a><select id='\" + k + \"-\\r\\\\' msallowcapture=''><option selected=''></option></select>\", e.querySelectorAll(\"[msallowcapture^='']\").length && v.push(\"[*^$]=\" + M + \"*(?:''|\\\"\\\")\"), e.querySelectorAll(\"[selected]\").length || v.push(\"\\\\[\" + M + \"*(?:value|\" + R + \")\"), e.querySelectorAll(\"[id~=\" + k + \"-]\").length || v.push(\"~=\"), e.querySelectorAll(\":checked\").length || v.push(\":checked\"), e.querySelectorAll(\"a#\" + k + \"+*\").length || v.push(\".#.+[+~]\");\n      }), ce(function (e) {\n        e.innerHTML = \"<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>\";\n        var t = C.createElement(\"input\");\n        t.setAttribute(\"type\", \"hidden\"), e.appendChild(t).setAttribute(\"name\", \"D\"), e.querySelectorAll(\"[name=d]\").length && v.push(\"name\" + M + \"*[*^$|!~]?=\"), 2 !== e.querySelectorAll(\":enabled\").length && v.push(\":enabled\", \":disabled\"), a.appendChild(e).disabled = !0, 2 !== e.querySelectorAll(\":disabled\").length && v.push(\":enabled\", \":disabled\"), e.querySelectorAll(\"*,:x\"), v.push(\",.*:\");\n      })), (d.matchesSelector = K.test(c = a.matches || a.webkitMatchesSelector || a.mozMatchesSelector || a.oMatchesSelector || a.msMatchesSelector)) && ce(function (e) {\n        d.disconnectedMatch = c.call(e, \"*\"), c.call(e, \"[s!='']:x\"), s.push(\"!=\", $);\n      }), v = v.length && new RegExp(v.join(\"|\")), s = s.length && new RegExp(s.join(\"|\")), t = K.test(a.compareDocumentPosition), y = t || K.test(a.contains) ? function (e, t) {\n        var n = 9 === e.nodeType ? e.documentElement : e,\n            r = t && t.parentNode;\n        return e === r || !(!r || 1 !== r.nodeType || !(n.contains ? n.contains(r) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(r)));\n      } : function (e, t) {\n        if (t) while (t = t.parentNode) {\n          if (t === e) return !0;\n        }\n        return !1;\n      }, D = t ? function (e, t) {\n        if (e === t) return l = !0, 0;\n        var n = !e.compareDocumentPosition - !t.compareDocumentPosition;\n        return n || (1 & (n = (e.ownerDocument || e) === (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1) || !d.sortDetached && t.compareDocumentPosition(e) === n ? e === C || e.ownerDocument === m && y(m, e) ? -1 : t === C || t.ownerDocument === m && y(m, t) ? 1 : u ? P(u, e) - P(u, t) : 0 : 4 & n ? -1 : 1);\n      } : function (e, t) {\n        if (e === t) return l = !0, 0;\n        var n,\n            r = 0,\n            i = e.parentNode,\n            o = t.parentNode,\n            a = [e],\n            s = [t];\n        if (!i || !o) return e === C ? -1 : t === C ? 1 : i ? -1 : o ? 1 : u ? P(u, e) - P(u, t) : 0;\n        if (i === o) return pe(e, t);\n        n = e;\n\n        while (n = n.parentNode) {\n          a.unshift(n);\n        }\n\n        n = t;\n\n        while (n = n.parentNode) {\n          s.unshift(n);\n        }\n\n        while (a[r] === s[r]) {\n          r++;\n        }\n\n        return r ? pe(a[r], s[r]) : a[r] === m ? -1 : s[r] === m ? 1 : 0;\n      }), C;\n    }, se.matches = function (e, t) {\n      return se(e, null, null, t);\n    }, se.matchesSelector = function (e, t) {\n      if ((e.ownerDocument || e) !== C && T(e), d.matchesSelector && E && !A[t + \" \"] && (!s || !s.test(t)) && (!v || !v.test(t))) try {\n        var n = c.call(e, t);\n        if (n || d.disconnectedMatch || e.document && 11 !== e.document.nodeType) return n;\n      } catch (e) {\n        A(t, !0);\n      }\n      return 0 < se(t, C, null, [e]).length;\n    }, se.contains = function (e, t) {\n      return (e.ownerDocument || e) !== C && T(e), y(e, t);\n    }, se.attr = function (e, t) {\n      (e.ownerDocument || e) !== C && T(e);\n      var n = b.attrHandle[t.toLowerCase()],\n          r = n && j.call(b.attrHandle, t.toLowerCase()) ? n(e, t, !E) : void 0;\n      return void 0 !== r ? r : d.attributes || !E ? e.getAttribute(t) : (r = e.getAttributeNode(t)) && r.specified ? r.value : null;\n    }, se.escape = function (e) {\n      return (e + \"\").replace(re, ie);\n    }, se.error = function (e) {\n      throw new Error(\"Syntax error, unrecognized expression: \" + e);\n    }, se.uniqueSort = function (e) {\n      var t,\n          n = [],\n          r = 0,\n          i = 0;\n\n      if (l = !d.detectDuplicates, u = !d.sortStable && e.slice(0), e.sort(D), l) {\n        while (t = e[i++]) {\n          t === e[i] && (r = n.push(i));\n        }\n\n        while (r--) {\n          e.splice(n[r], 1);\n        }\n      }\n\n      return u = null, e;\n    }, o = se.getText = function (e) {\n      var t,\n          n = \"\",\n          r = 0,\n          i = e.nodeType;\n\n      if (i) {\n        if (1 === i || 9 === i || 11 === i) {\n          if (\"string\" == typeof e.textContent) return e.textContent;\n\n          for (e = e.firstChild; e; e = e.nextSibling) {\n            n += o(e);\n          }\n        } else if (3 === i || 4 === i) return e.nodeValue;\n      } else while (t = e[r++]) {\n        n += o(t);\n      }\n\n      return n;\n    }, (b = se.selectors = {\n      cacheLength: 50,\n      createPseudo: le,\n      match: G,\n      attrHandle: {},\n      find: {},\n      relative: {\n        \">\": {\n          dir: \"parentNode\",\n          first: !0\n        },\n        \" \": {\n          dir: \"parentNode\"\n        },\n        \"+\": {\n          dir: \"previousSibling\",\n          first: !0\n        },\n        \"~\": {\n          dir: \"previousSibling\"\n        }\n      },\n      preFilter: {\n        ATTR: function ATTR(e) {\n          return e[1] = e[1].replace(te, ne), e[3] = (e[3] || e[4] || e[5] || \"\").replace(te, ne), \"~=\" === e[2] && (e[3] = \" \" + e[3] + \" \"), e.slice(0, 4);\n        },\n        CHILD: function CHILD(e) {\n          return e[1] = e[1].toLowerCase(), \"nth\" === e[1].slice(0, 3) ? (e[3] || se.error(e[0]), e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * (\"even\" === e[3] || \"odd\" === e[3])), e[5] = +(e[7] + e[8] || \"odd\" === e[3])) : e[3] && se.error(e[0]), e;\n        },\n        PSEUDO: function PSEUDO(e) {\n          var t,\n              n = !e[6] && e[2];\n          return G.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || \"\" : n && X.test(n) && (t = h(n, !0)) && (t = n.indexOf(\")\", n.length - t) - n.length) && (e[0] = e[0].slice(0, t), e[2] = n.slice(0, t)), e.slice(0, 3));\n        }\n      },\n      filter: {\n        TAG: function TAG(e) {\n          var t = e.replace(te, ne).toLowerCase();\n          return \"*\" === e ? function () {\n            return !0;\n          } : function (e) {\n            return e.nodeName && e.nodeName.toLowerCase() === t;\n          };\n        },\n        CLASS: function CLASS(e) {\n          var t = p[e + \" \"];\n          return t || (t = new RegExp(\"(^|\" + M + \")\" + e + \"(\" + M + \"|$)\")) && p(e, function (e) {\n            return t.test(\"string\" == typeof e.className && e.className || \"undefined\" != typeof e.getAttribute && e.getAttribute(\"class\") || \"\");\n          });\n        },\n        ATTR: function ATTR(n, r, i) {\n          return function (e) {\n            var t = se.attr(e, n);\n            return null == t ? \"!=\" === r : !r || (t += \"\", \"=\" === r ? t === i : \"!=\" === r ? t !== i : \"^=\" === r ? i && 0 === t.indexOf(i) : \"*=\" === r ? i && -1 < t.indexOf(i) : \"$=\" === r ? i && t.slice(-i.length) === i : \"~=\" === r ? -1 < (\" \" + t.replace(F, \" \") + \" \").indexOf(i) : \"|=\" === r && (t === i || t.slice(0, i.length + 1) === i + \"-\"));\n          };\n        },\n        CHILD: function CHILD(h, e, t, g, v) {\n          var y = \"nth\" !== h.slice(0, 3),\n              m = \"last\" !== h.slice(-4),\n              x = \"of-type\" === e;\n          return 1 === g && 0 === v ? function (e) {\n            return !!e.parentNode;\n          } : function (e, t, n) {\n            var r,\n                i,\n                o,\n                a,\n                s,\n                u,\n                l = y !== m ? \"nextSibling\" : \"previousSibling\",\n                c = e.parentNode,\n                f = x && e.nodeName.toLowerCase(),\n                p = !n && !x,\n                d = !1;\n\n            if (c) {\n              if (y) {\n                while (l) {\n                  a = e;\n\n                  while (a = a[l]) {\n                    if (x ? a.nodeName.toLowerCase() === f : 1 === a.nodeType) return !1;\n                  }\n\n                  u = l = \"only\" === h && !u && \"nextSibling\";\n                }\n\n                return !0;\n              }\n\n              if (u = [m ? c.firstChild : c.lastChild], m && p) {\n                d = (s = (r = (i = (o = (a = c)[k] || (a[k] = {}))[a.uniqueID] || (o[a.uniqueID] = {}))[h] || [])[0] === S && r[1]) && r[2], a = s && c.childNodes[s];\n\n                while (a = ++s && a && a[l] || (d = s = 0) || u.pop()) {\n                  if (1 === a.nodeType && ++d && a === e) {\n                    i[h] = [S, s, d];\n                    break;\n                  }\n                }\n              } else if (p && (d = s = (r = (i = (o = (a = e)[k] || (a[k] = {}))[a.uniqueID] || (o[a.uniqueID] = {}))[h] || [])[0] === S && r[1]), !1 === d) while (a = ++s && a && a[l] || (d = s = 0) || u.pop()) {\n                if ((x ? a.nodeName.toLowerCase() === f : 1 === a.nodeType) && ++d && (p && ((i = (o = a[k] || (a[k] = {}))[a.uniqueID] || (o[a.uniqueID] = {}))[h] = [S, d]), a === e)) break;\n              }\n\n              return (d -= v) === g || d % g == 0 && 0 <= d / g;\n            }\n          };\n        },\n        PSEUDO: function PSEUDO(e, o) {\n          var t,\n              a = b.pseudos[e] || b.setFilters[e.toLowerCase()] || se.error(\"unsupported pseudo: \" + e);\n          return a[k] ? a(o) : 1 < a.length ? (t = [e, e, \"\", o], b.setFilters.hasOwnProperty(e.toLowerCase()) ? le(function (e, t) {\n            var n,\n                r = a(e, o),\n                i = r.length;\n\n            while (i--) {\n              e[n = P(e, r[i])] = !(t[n] = r[i]);\n            }\n          }) : function (e) {\n            return a(e, 0, t);\n          }) : a;\n        }\n      },\n      pseudos: {\n        not: le(function (e) {\n          var r = [],\n              i = [],\n              s = f(e.replace(B, \"$1\"));\n          return s[k] ? le(function (e, t, n, r) {\n            var i,\n                o = s(e, null, r, []),\n                a = e.length;\n\n            while (a--) {\n              (i = o[a]) && (e[a] = !(t[a] = i));\n            }\n          }) : function (e, t, n) {\n            return r[0] = e, s(r, null, n, i), r[0] = null, !i.pop();\n          };\n        }),\n        has: le(function (t) {\n          return function (e) {\n            return 0 < se(t, e).length;\n          };\n        }),\n        contains: le(function (t) {\n          return t = t.replace(te, ne), function (e) {\n            return -1 < (e.textContent || o(e)).indexOf(t);\n          };\n        }),\n        lang: le(function (n) {\n          return V.test(n || \"\") || se.error(\"unsupported lang: \" + n), n = n.replace(te, ne).toLowerCase(), function (e) {\n            var t;\n\n            do {\n              if (t = E ? e.lang : e.getAttribute(\"xml:lang\") || e.getAttribute(\"lang\")) return (t = t.toLowerCase()) === n || 0 === t.indexOf(n + \"-\");\n            } while ((e = e.parentNode) && 1 === e.nodeType);\n\n            return !1;\n          };\n        }),\n        target: function target(e) {\n          var t = n.location && n.location.hash;\n          return t && t.slice(1) === e.id;\n        },\n        root: function root(e) {\n          return e === a;\n        },\n        focus: function focus(e) {\n          return e === C.activeElement && (!C.hasFocus || C.hasFocus()) && !!(e.type || e.href || ~e.tabIndex);\n        },\n        enabled: ge(!1),\n        disabled: ge(!0),\n        checked: function checked(e) {\n          var t = e.nodeName.toLowerCase();\n          return \"input\" === t && !!e.checked || \"option\" === t && !!e.selected;\n        },\n        selected: function selected(e) {\n          return e.parentNode && e.parentNode.selectedIndex, !0 === e.selected;\n        },\n        empty: function empty(e) {\n          for (e = e.firstChild; e; e = e.nextSibling) {\n            if (e.nodeType < 6) return !1;\n          }\n\n          return !0;\n        },\n        parent: function parent(e) {\n          return !b.pseudos.empty(e);\n        },\n        header: function header(e) {\n          return J.test(e.nodeName);\n        },\n        input: function input(e) {\n          return Q.test(e.nodeName);\n        },\n        button: function button(e) {\n          var t = e.nodeName.toLowerCase();\n          return \"input\" === t && \"button\" === e.type || \"button\" === t;\n        },\n        text: function text(e) {\n          var t;\n          return \"input\" === e.nodeName.toLowerCase() && \"text\" === e.type && (null == (t = e.getAttribute(\"type\")) || \"text\" === t.toLowerCase());\n        },\n        first: ve(function () {\n          return [0];\n        }),\n        last: ve(function (e, t) {\n          return [t - 1];\n        }),\n        eq: ve(function (e, t, n) {\n          return [n < 0 ? n + t : n];\n        }),\n        even: ve(function (e, t) {\n          for (var n = 0; n < t; n += 2) {\n            e.push(n);\n          }\n\n          return e;\n        }),\n        odd: ve(function (e, t) {\n          for (var n = 1; n < t; n += 2) {\n            e.push(n);\n          }\n\n          return e;\n        }),\n        lt: ve(function (e, t, n) {\n          for (var r = n < 0 ? n + t : t < n ? t : n; 0 <= --r;) {\n            e.push(r);\n          }\n\n          return e;\n        }),\n        gt: ve(function (e, t, n) {\n          for (var r = n < 0 ? n + t : n; ++r < t;) {\n            e.push(r);\n          }\n\n          return e;\n        })\n      }\n    }).pseudos.nth = b.pseudos.eq, {\n      radio: !0,\n      checkbox: !0,\n      file: !0,\n      password: !0,\n      image: !0\n    }) {\n      b.pseudos[e] = de(e);\n    }\n\n    for (e in {\n      submit: !0,\n      reset: !0\n    }) {\n      b.pseudos[e] = he(e);\n    }\n\n    function me() {}\n\n    function xe(e) {\n      for (var t = 0, n = e.length, r = \"\"; t < n; t++) {\n        r += e[t].value;\n      }\n\n      return r;\n    }\n\n    function be(s, e, t) {\n      var u = e.dir,\n          l = e.next,\n          c = l || u,\n          f = t && \"parentNode\" === c,\n          p = r++;\n      return e.first ? function (e, t, n) {\n        while (e = e[u]) {\n          if (1 === e.nodeType || f) return s(e, t, n);\n        }\n\n        return !1;\n      } : function (e, t, n) {\n        var r,\n            i,\n            o,\n            a = [S, p];\n\n        if (n) {\n          while (e = e[u]) {\n            if ((1 === e.nodeType || f) && s(e, t, n)) return !0;\n          }\n        } else while (e = e[u]) {\n          if (1 === e.nodeType || f) if (i = (o = e[k] || (e[k] = {}))[e.uniqueID] || (o[e.uniqueID] = {}), l && l === e.nodeName.toLowerCase()) e = e[u] || e;else {\n            if ((r = i[c]) && r[0] === S && r[1] === p) return a[2] = r[2];\n            if ((i[c] = a)[2] = s(e, t, n)) return !0;\n          }\n        }\n\n        return !1;\n      };\n    }\n\n    function we(i) {\n      return 1 < i.length ? function (e, t, n) {\n        var r = i.length;\n\n        while (r--) {\n          if (!i[r](e, t, n)) return !1;\n        }\n\n        return !0;\n      } : i[0];\n    }\n\n    function Te(e, t, n, r, i) {\n      for (var o, a = [], s = 0, u = e.length, l = null != t; s < u; s++) {\n        (o = e[s]) && (n && !n(o, r, i) || (a.push(o), l && t.push(s)));\n      }\n\n      return a;\n    }\n\n    function Ce(d, h, g, v, y, e) {\n      return v && !v[k] && (v = Ce(v)), y && !y[k] && (y = Ce(y, e)), le(function (e, t, n, r) {\n        var i,\n            o,\n            a,\n            s = [],\n            u = [],\n            l = t.length,\n            c = e || function (e, t, n) {\n          for (var r = 0, i = t.length; r < i; r++) {\n            se(e, t[r], n);\n          }\n\n          return n;\n        }(h || \"*\", n.nodeType ? [n] : n, []),\n            f = !d || !e && h ? c : Te(c, s, d, n, r),\n            p = g ? y || (e ? d : l || v) ? [] : t : f;\n\n        if (g && g(f, p, n, r), v) {\n          i = Te(p, u), v(i, [], n, r), o = i.length;\n\n          while (o--) {\n            (a = i[o]) && (p[u[o]] = !(f[u[o]] = a));\n          }\n        }\n\n        if (e) {\n          if (y || d) {\n            if (y) {\n              i = [], o = p.length;\n\n              while (o--) {\n                (a = p[o]) && i.push(f[o] = a);\n              }\n\n              y(null, p = [], i, r);\n            }\n\n            o = p.length;\n\n            while (o--) {\n              (a = p[o]) && -1 < (i = y ? P(e, a) : s[o]) && (e[i] = !(t[i] = a));\n            }\n          }\n        } else p = Te(p === t ? p.splice(l, p.length) : p), y ? y(null, t, p, r) : H.apply(t, p);\n      });\n    }\n\n    function Ee(e) {\n      for (var i, t, n, r = e.length, o = b.relative[e[0].type], a = o || b.relative[\" \"], s = o ? 1 : 0, u = be(function (e) {\n        return e === i;\n      }, a, !0), l = be(function (e) {\n        return -1 < P(i, e);\n      }, a, !0), c = [function (e, t, n) {\n        var r = !o && (n || t !== w) || ((i = t).nodeType ? u(e, t, n) : l(e, t, n));\n        return i = null, r;\n      }]; s < r; s++) {\n        if (t = b.relative[e[s].type]) c = [be(we(c), t)];else {\n          if ((t = b.filter[e[s].type].apply(null, e[s].matches))[k]) {\n            for (n = ++s; n < r; n++) {\n              if (b.relative[e[n].type]) break;\n            }\n\n            return Ce(1 < s && we(c), 1 < s && xe(e.slice(0, s - 1).concat({\n              value: \" \" === e[s - 2].type ? \"*\" : \"\"\n            })).replace(B, \"$1\"), t, s < n && Ee(e.slice(s, n)), n < r && Ee(e = e.slice(n)), n < r && xe(e));\n          }\n\n          c.push(t);\n        }\n      }\n\n      return we(c);\n    }\n\n    return me.prototype = b.filters = b.pseudos, b.setFilters = new me(), h = se.tokenize = function (e, t) {\n      var n,\n          r,\n          i,\n          o,\n          a,\n          s,\n          u,\n          l = x[e + \" \"];\n      if (l) return t ? 0 : l.slice(0);\n      a = e, s = [], u = b.preFilter;\n\n      while (a) {\n        for (o in n && !(r = _.exec(a)) || (r && (a = a.slice(r[0].length) || a), s.push(i = [])), n = !1, (r = z.exec(a)) && (n = r.shift(), i.push({\n          value: n,\n          type: r[0].replace(B, \" \")\n        }), a = a.slice(n.length)), b.filter) {\n          !(r = G[o].exec(a)) || u[o] && !(r = u[o](r)) || (n = r.shift(), i.push({\n            value: n,\n            type: o,\n            matches: r\n          }), a = a.slice(n.length));\n        }\n\n        if (!n) break;\n      }\n\n      return t ? a.length : a ? se.error(e) : x(e, s).slice(0);\n    }, f = se.compile = function (e, t) {\n      var n,\n          v,\n          y,\n          m,\n          x,\n          r,\n          i = [],\n          o = [],\n          a = N[e + \" \"];\n\n      if (!a) {\n        t || (t = h(e)), n = t.length;\n\n        while (n--) {\n          (a = Ee(t[n]))[k] ? i.push(a) : o.push(a);\n        }\n\n        (a = N(e, (v = o, m = 0 < (y = i).length, x = 0 < v.length, r = function r(e, t, n, _r, i) {\n          var o,\n              a,\n              s,\n              u = 0,\n              l = \"0\",\n              c = e && [],\n              f = [],\n              p = w,\n              d = e || x && b.find.TAG(\"*\", i),\n              h = S += null == p ? 1 : Math.random() || .1,\n              g = d.length;\n\n          for (i && (w = t === C || t || i); l !== g && null != (o = d[l]); l++) {\n            if (x && o) {\n              a = 0, t || o.ownerDocument === C || (T(o), n = !E);\n\n              while (s = v[a++]) {\n                if (s(o, t || C, n)) {\n                  _r.push(o);\n\n                  break;\n                }\n              }\n\n              i && (S = h);\n            }\n\n            m && ((o = !s && o) && u--, e && c.push(o));\n          }\n\n          if (u += l, m && l !== u) {\n            a = 0;\n\n            while (s = y[a++]) {\n              s(c, f, t, n);\n            }\n\n            if (e) {\n              if (0 < u) while (l--) {\n                c[l] || f[l] || (f[l] = q.call(_r));\n              }\n              f = Te(f);\n            }\n\n            H.apply(_r, f), i && !e && 0 < f.length && 1 < u + y.length && se.uniqueSort(_r);\n          }\n\n          return i && (S = h, w = p), c;\n        }, m ? le(r) : r))).selector = e;\n      }\n\n      return a;\n    }, g = se.select = function (e, t, n, r) {\n      var i,\n          o,\n          a,\n          s,\n          u,\n          l = \"function\" == typeof e && e,\n          c = !r && h(e = l.selector || e);\n\n      if (n = n || [], 1 === c.length) {\n        if (2 < (o = c[0] = c[0].slice(0)).length && \"ID\" === (a = o[0]).type && 9 === t.nodeType && E && b.relative[o[1].type]) {\n          if (!(t = (b.find.ID(a.matches[0].replace(te, ne), t) || [])[0])) return n;\n          l && (t = t.parentNode), e = e.slice(o.shift().value.length);\n        }\n\n        i = G.needsContext.test(e) ? 0 : o.length;\n\n        while (i--) {\n          if (a = o[i], b.relative[s = a.type]) break;\n\n          if ((u = b.find[s]) && (r = u(a.matches[0].replace(te, ne), ee.test(o[0].type) && ye(t.parentNode) || t))) {\n            if (o.splice(i, 1), !(e = r.length && xe(o))) return H.apply(n, r), n;\n            break;\n          }\n        }\n      }\n\n      return (l || f(e, c))(r, t, !E, n, !t || ee.test(e) && ye(t.parentNode) || t), n;\n    }, d.sortStable = k.split(\"\").sort(D).join(\"\") === k, d.detectDuplicates = !!l, T(), d.sortDetached = ce(function (e) {\n      return 1 & e.compareDocumentPosition(C.createElement(\"fieldset\"));\n    }), ce(function (e) {\n      return e.innerHTML = \"<a href='#'></a>\", \"#\" === e.firstChild.getAttribute(\"href\");\n    }) || fe(\"type|href|height|width\", function (e, t, n) {\n      if (!n) return e.getAttribute(t, \"type\" === t.toLowerCase() ? 1 : 2);\n    }), d.attributes && ce(function (e) {\n      return e.innerHTML = \"<input/>\", e.firstChild.setAttribute(\"value\", \"\"), \"\" === e.firstChild.getAttribute(\"value\");\n    }) || fe(\"value\", function (e, t, n) {\n      if (!n && \"input\" === e.nodeName.toLowerCase()) return e.defaultValue;\n    }), ce(function (e) {\n      return null == e.getAttribute(\"disabled\");\n    }) || fe(R, function (e, t, n) {\n      var r;\n      if (!n) return !0 === e[t] ? t.toLowerCase() : (r = e.getAttributeNode(t)) && r.specified ? r.value : null;\n    }), se;\n  }(C);\n\n  k.find = h, k.expr = h.selectors, k.expr[\":\"] = k.expr.pseudos, k.uniqueSort = k.unique = h.uniqueSort, k.text = h.getText, k.isXMLDoc = h.isXML, k.contains = h.contains, k.escapeSelector = h.escape;\n\n  var T = function T(e, t, n) {\n    var r = [],\n        i = void 0 !== n;\n\n    while ((e = e[t]) && 9 !== e.nodeType) {\n      if (1 === e.nodeType) {\n        if (i && k(e).is(n)) break;\n        r.push(e);\n      }\n    }\n\n    return r;\n  },\n      S = function S(e, t) {\n    for (var n = []; e; e = e.nextSibling) {\n      1 === e.nodeType && e !== t && n.push(e);\n    }\n\n    return n;\n  },\n      N = k.expr.match.needsContext;\n\n  function A(e, t) {\n    return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase();\n  }\n\n  var D = /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;\n\n  function j(e, n, r) {\n    return m(n) ? k.grep(e, function (e, t) {\n      return !!n.call(e, t, e) !== r;\n    }) : n.nodeType ? k.grep(e, function (e) {\n      return e === n !== r;\n    }) : \"string\" != typeof n ? k.grep(e, function (e) {\n      return -1 < i.call(n, e) !== r;\n    }) : k.filter(n, e, r);\n  }\n\n  k.filter = function (e, t, n) {\n    var r = t[0];\n    return n && (e = \":not(\" + e + \")\"), 1 === t.length && 1 === r.nodeType ? k.find.matchesSelector(r, e) ? [r] : [] : k.find.matches(e, k.grep(t, function (e) {\n      return 1 === e.nodeType;\n    }));\n  }, k.fn.extend({\n    find: function find(e) {\n      var t,\n          n,\n          r = this.length,\n          i = this;\n      if (\"string\" != typeof e) return this.pushStack(k(e).filter(function () {\n        for (t = 0; t < r; t++) {\n          if (k.contains(i[t], this)) return !0;\n        }\n      }));\n\n      for (n = this.pushStack([]), t = 0; t < r; t++) {\n        k.find(e, i[t], n);\n      }\n\n      return 1 < r ? k.uniqueSort(n) : n;\n    },\n    filter: function filter(e) {\n      return this.pushStack(j(this, e || [], !1));\n    },\n    not: function not(e) {\n      return this.pushStack(j(this, e || [], !0));\n    },\n    is: function is(e) {\n      return !!j(this, \"string\" == typeof e && N.test(e) ? k(e) : e || [], !1).length;\n    }\n  });\n  var q,\n      L = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/;\n  (k.fn.init = function (e, t, n) {\n    var r, i;\n    if (!e) return this;\n\n    if (n = n || q, \"string\" == typeof e) {\n      if (!(r = \"<\" === e[0] && \">\" === e[e.length - 1] && 3 <= e.length ? [null, e, null] : L.exec(e)) || !r[1] && t) return !t || t.jquery ? (t || n).find(e) : this.constructor(t).find(e);\n\n      if (r[1]) {\n        if (t = t instanceof k ? t[0] : t, k.merge(this, k.parseHTML(r[1], t && t.nodeType ? t.ownerDocument || t : E, !0)), D.test(r[1]) && k.isPlainObject(t)) for (r in t) {\n          m(this[r]) ? this[r](t[r]) : this.attr(r, t[r]);\n        }\n        return this;\n      }\n\n      return (i = E.getElementById(r[2])) && (this[0] = i, this.length = 1), this;\n    }\n\n    return e.nodeType ? (this[0] = e, this.length = 1, this) : m(e) ? void 0 !== n.ready ? n.ready(e) : e(k) : k.makeArray(e, this);\n  }).prototype = k.fn, q = k(E);\n  var H = /^(?:parents|prev(?:Until|All))/,\n      O = {\n    children: !0,\n    contents: !0,\n    next: !0,\n    prev: !0\n  };\n\n  function P(e, t) {\n    while ((e = e[t]) && 1 !== e.nodeType) {\n      ;\n    }\n\n    return e;\n  }\n\n  k.fn.extend({\n    has: function has(e) {\n      var t = k(e, this),\n          n = t.length;\n      return this.filter(function () {\n        for (var e = 0; e < n; e++) {\n          if (k.contains(this, t[e])) return !0;\n        }\n      });\n    },\n    closest: function closest(e, t) {\n      var n,\n          r = 0,\n          i = this.length,\n          o = [],\n          a = \"string\" != typeof e && k(e);\n      if (!N.test(e)) for (; r < i; r++) {\n        for (n = this[r]; n && n !== t; n = n.parentNode) {\n          if (n.nodeType < 11 && (a ? -1 < a.index(n) : 1 === n.nodeType && k.find.matchesSelector(n, e))) {\n            o.push(n);\n            break;\n          }\n        }\n      }\n      return this.pushStack(1 < o.length ? k.uniqueSort(o) : o);\n    },\n    index: function index(e) {\n      return e ? \"string\" == typeof e ? i.call(k(e), this[0]) : i.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n    },\n    add: function add(e, t) {\n      return this.pushStack(k.uniqueSort(k.merge(this.get(), k(e, t))));\n    },\n    addBack: function addBack(e) {\n      return this.add(null == e ? this.prevObject : this.prevObject.filter(e));\n    }\n  }), k.each({\n    parent: function parent(e) {\n      var t = e.parentNode;\n      return t && 11 !== t.nodeType ? t : null;\n    },\n    parents: function parents(e) {\n      return T(e, \"parentNode\");\n    },\n    parentsUntil: function parentsUntil(e, t, n) {\n      return T(e, \"parentNode\", n);\n    },\n    next: function next(e) {\n      return P(e, \"nextSibling\");\n    },\n    prev: function prev(e) {\n      return P(e, \"previousSibling\");\n    },\n    nextAll: function nextAll(e) {\n      return T(e, \"nextSibling\");\n    },\n    prevAll: function prevAll(e) {\n      return T(e, \"previousSibling\");\n    },\n    nextUntil: function nextUntil(e, t, n) {\n      return T(e, \"nextSibling\", n);\n    },\n    prevUntil: function prevUntil(e, t, n) {\n      return T(e, \"previousSibling\", n);\n    },\n    siblings: function siblings(e) {\n      return S((e.parentNode || {}).firstChild, e);\n    },\n    children: function children(e) {\n      return S(e.firstChild);\n    },\n    contents: function contents(e) {\n      return \"undefined\" != typeof e.contentDocument ? e.contentDocument : (A(e, \"template\") && (e = e.content || e), k.merge([], e.childNodes));\n    }\n  }, function (r, i) {\n    k.fn[r] = function (e, t) {\n      var n = k.map(this, i, e);\n      return \"Until\" !== r.slice(-5) && (t = e), t && \"string\" == typeof t && (n = k.filter(t, n)), 1 < this.length && (O[r] || k.uniqueSort(n), H.test(r) && n.reverse()), this.pushStack(n);\n    };\n  });\n  var R = /[^\\x20\\t\\r\\n\\f]+/g;\n\n  function M(e) {\n    return e;\n  }\n\n  function I(e) {\n    throw e;\n  }\n\n  function W(e, t, n, r) {\n    var i;\n\n    try {\n      e && m(i = e.promise) ? i.call(e).done(t).fail(n) : e && m(i = e.then) ? i.call(e, t, n) : t.apply(void 0, [e].slice(r));\n    } catch (e) {\n      n.apply(void 0, [e]);\n    }\n  }\n\n  k.Callbacks = function (r) {\n    var e, n;\n    r = \"string\" == typeof r ? (e = r, n = {}, k.each(e.match(R) || [], function (e, t) {\n      n[t] = !0;\n    }), n) : k.extend({}, r);\n\n    var i,\n        t,\n        o,\n        a,\n        s = [],\n        u = [],\n        l = -1,\n        c = function c() {\n      for (a = a || r.once, o = i = !0; u.length; l = -1) {\n        t = u.shift();\n\n        while (++l < s.length) {\n          !1 === s[l].apply(t[0], t[1]) && r.stopOnFalse && (l = s.length, t = !1);\n        }\n      }\n\n      r.memory || (t = !1), i = !1, a && (s = t ? [] : \"\");\n    },\n        f = {\n      add: function add() {\n        return s && (t && !i && (l = s.length - 1, u.push(t)), function n(e) {\n          k.each(e, function (e, t) {\n            m(t) ? r.unique && f.has(t) || s.push(t) : t && t.length && \"string\" !== w(t) && n(t);\n          });\n        }(arguments), t && !i && c()), this;\n      },\n      remove: function remove() {\n        return k.each(arguments, function (e, t) {\n          var n;\n\n          while (-1 < (n = k.inArray(t, s, n))) {\n            s.splice(n, 1), n <= l && l--;\n          }\n        }), this;\n      },\n      has: function has(e) {\n        return e ? -1 < k.inArray(e, s) : 0 < s.length;\n      },\n      empty: function empty() {\n        return s && (s = []), this;\n      },\n      disable: function disable() {\n        return a = u = [], s = t = \"\", this;\n      },\n      disabled: function disabled() {\n        return !s;\n      },\n      lock: function lock() {\n        return a = u = [], t || i || (s = t = \"\"), this;\n      },\n      locked: function locked() {\n        return !!a;\n      },\n      fireWith: function fireWith(e, t) {\n        return a || (t = [e, (t = t || []).slice ? t.slice() : t], u.push(t), i || c()), this;\n      },\n      fire: function fire() {\n        return f.fireWith(this, arguments), this;\n      },\n      fired: function fired() {\n        return !!o;\n      }\n    };\n\n    return f;\n  }, k.extend({\n    Deferred: function Deferred(e) {\n      var o = [[\"notify\", \"progress\", k.Callbacks(\"memory\"), k.Callbacks(\"memory\"), 2], [\"resolve\", \"done\", k.Callbacks(\"once memory\"), k.Callbacks(\"once memory\"), 0, \"resolved\"], [\"reject\", \"fail\", k.Callbacks(\"once memory\"), k.Callbacks(\"once memory\"), 1, \"rejected\"]],\n          i = \"pending\",\n          a = {\n        state: function state() {\n          return i;\n        },\n        always: function always() {\n          return s.done(arguments).fail(arguments), this;\n        },\n        \"catch\": function _catch(e) {\n          return a.then(null, e);\n        },\n        pipe: function pipe() {\n          var i = arguments;\n          return k.Deferred(function (r) {\n            k.each(o, function (e, t) {\n              var n = m(i[t[4]]) && i[t[4]];\n              s[t[1]](function () {\n                var e = n && n.apply(this, arguments);\n                e && m(e.promise) ? e.promise().progress(r.notify).done(r.resolve).fail(r.reject) : r[t[0] + \"With\"](this, n ? [e] : arguments);\n              });\n            }), i = null;\n          }).promise();\n        },\n        then: function then(t, n, r) {\n          var u = 0;\n\n          function l(i, o, a, s) {\n            return function () {\n              var n = this,\n                  r = arguments,\n                  e = function e() {\n                var e, t;\n\n                if (!(i < u)) {\n                  if ((e = a.apply(n, r)) === o.promise()) throw new TypeError(\"Thenable self-resolution\");\n                  t = e && (\"object\" == _typeof(e) || \"function\" == typeof e) && e.then, m(t) ? s ? t.call(e, l(u, o, M, s), l(u, o, I, s)) : (u++, t.call(e, l(u, o, M, s), l(u, o, I, s), l(u, o, M, o.notifyWith))) : (a !== M && (n = void 0, r = [e]), (s || o.resolveWith)(n, r));\n                }\n              },\n                  t = s ? e : function () {\n                try {\n                  e();\n                } catch (e) {\n                  k.Deferred.exceptionHook && k.Deferred.exceptionHook(e, t.stackTrace), u <= i + 1 && (a !== I && (n = void 0, r = [e]), o.rejectWith(n, r));\n                }\n              };\n\n              i ? t() : (k.Deferred.getStackHook && (t.stackTrace = k.Deferred.getStackHook()), C.setTimeout(t));\n            };\n          }\n\n          return k.Deferred(function (e) {\n            o[0][3].add(l(0, e, m(r) ? r : M, e.notifyWith)), o[1][3].add(l(0, e, m(t) ? t : M)), o[2][3].add(l(0, e, m(n) ? n : I));\n          }).promise();\n        },\n        promise: function promise(e) {\n          return null != e ? k.extend(e, a) : a;\n        }\n      },\n          s = {};\n      return k.each(o, function (e, t) {\n        var n = t[2],\n            r = t[5];\n        a[t[1]] = n.add, r && n.add(function () {\n          i = r;\n        }, o[3 - e][2].disable, o[3 - e][3].disable, o[0][2].lock, o[0][3].lock), n.add(t[3].fire), s[t[0]] = function () {\n          return s[t[0] + \"With\"](this === s ? void 0 : this, arguments), this;\n        }, s[t[0] + \"With\"] = n.fireWith;\n      }), a.promise(s), e && e.call(s, s), s;\n    },\n    when: function when(e) {\n      var n = arguments.length,\n          t = n,\n          r = Array(t),\n          i = s.call(arguments),\n          o = k.Deferred(),\n          a = function a(t) {\n        return function (e) {\n          r[t] = this, i[t] = 1 < arguments.length ? s.call(arguments) : e, --n || o.resolveWith(r, i);\n        };\n      };\n\n      if (n <= 1 && (W(e, o.done(a(t)).resolve, o.reject, !n), \"pending\" === o.state() || m(i[t] && i[t].then))) return o.then();\n\n      while (t--) {\n        W(i[t], a(t), o.reject);\n      }\n\n      return o.promise();\n    }\n  });\n  var $ = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n  k.Deferred.exceptionHook = function (e, t) {\n    C.console && C.console.warn && e && $.test(e.name) && C.console.warn(\"jQuery.Deferred exception: \" + e.message, e.stack, t);\n  }, k.readyException = function (e) {\n    C.setTimeout(function () {\n      throw e;\n    });\n  };\n  var F = k.Deferred();\n\n  function B() {\n    E.removeEventListener(\"DOMContentLoaded\", B), C.removeEventListener(\"load\", B), k.ready();\n  }\n\n  k.fn.ready = function (e) {\n    return F.then(e)[\"catch\"](function (e) {\n      k.readyException(e);\n    }), this;\n  }, k.extend({\n    isReady: !1,\n    readyWait: 1,\n    ready: function ready(e) {\n      (!0 === e ? --k.readyWait : k.isReady) || (k.isReady = !0) !== e && 0 < --k.readyWait || F.resolveWith(E, [k]);\n    }\n  }), k.ready.then = F.then, \"complete\" === E.readyState || \"loading\" !== E.readyState && !E.documentElement.doScroll ? C.setTimeout(k.ready) : (E.addEventListener(\"DOMContentLoaded\", B), C.addEventListener(\"load\", B));\n\n  var _ = function _(e, t, n, r, i, o, a) {\n    var s = 0,\n        u = e.length,\n        l = null == n;\n    if (\"object\" === w(n)) for (s in i = !0, n) {\n      _(e, t, s, n[s], !0, o, a);\n    } else if (void 0 !== r && (i = !0, m(r) || (a = !0), l && (a ? (t.call(e, r), t = null) : (l = t, t = function t(e, _t2, n) {\n      return l.call(k(e), n);\n    })), t)) for (; s < u; s++) {\n      t(e[s], n, a ? r : r.call(e[s], s, t(e[s], n)));\n    }\n    return i ? e : l ? t.call(e) : u ? t(e[0], n) : o;\n  },\n      z = /^-ms-/,\n      U = /-([a-z])/g;\n\n  function X(e, t) {\n    return t.toUpperCase();\n  }\n\n  function V(e) {\n    return e.replace(z, \"ms-\").replace(U, X);\n  }\n\n  var G = function G(e) {\n    return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType;\n  };\n\n  function Y() {\n    this.expando = k.expando + Y.uid++;\n  }\n\n  Y.uid = 1, Y.prototype = {\n    cache: function cache(e) {\n      var t = e[this.expando];\n      return t || (t = {}, G(e) && (e.nodeType ? e[this.expando] = t : Object.defineProperty(e, this.expando, {\n        value: t,\n        configurable: !0\n      }))), t;\n    },\n    set: function set(e, t, n) {\n      var r,\n          i = this.cache(e);\n      if (\"string\" == typeof t) i[V(t)] = n;else for (r in t) {\n        i[V(r)] = t[r];\n      }\n      return i;\n    },\n    get: function get(e, t) {\n      return void 0 === t ? this.cache(e) : e[this.expando] && e[this.expando][V(t)];\n    },\n    access: function access(e, t, n) {\n      return void 0 === t || t && \"string\" == typeof t && void 0 === n ? this.get(e, t) : (this.set(e, t, n), void 0 !== n ? n : t);\n    },\n    remove: function remove(e, t) {\n      var n,\n          r = e[this.expando];\n\n      if (void 0 !== r) {\n        if (void 0 !== t) {\n          n = (t = Array.isArray(t) ? t.map(V) : (t = V(t)) in r ? [t] : t.match(R) || []).length;\n\n          while (n--) {\n            delete r[t[n]];\n          }\n        }\n\n        (void 0 === t || k.isEmptyObject(r)) && (e.nodeType ? e[this.expando] = void 0 : delete e[this.expando]);\n      }\n    },\n    hasData: function hasData(e) {\n      var t = e[this.expando];\n      return void 0 !== t && !k.isEmptyObject(t);\n    }\n  };\n  var Q = new Y(),\n      J = new Y(),\n      K = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n      Z = /[A-Z]/g;\n\n  function ee(e, t, n) {\n    var r, i;\n    if (void 0 === n && 1 === e.nodeType) if (r = \"data-\" + t.replace(Z, \"-$&\").toLowerCase(), \"string\" == typeof (n = e.getAttribute(r))) {\n      try {\n        n = \"true\" === (i = n) || \"false\" !== i && (\"null\" === i ? null : i === +i + \"\" ? +i : K.test(i) ? JSON.parse(i) : i);\n      } catch (e) {}\n\n      J.set(e, t, n);\n    } else n = void 0;\n    return n;\n  }\n\n  k.extend({\n    hasData: function hasData(e) {\n      return J.hasData(e) || Q.hasData(e);\n    },\n    data: function data(e, t, n) {\n      return J.access(e, t, n);\n    },\n    removeData: function removeData(e, t) {\n      J.remove(e, t);\n    },\n    _data: function _data(e, t, n) {\n      return Q.access(e, t, n);\n    },\n    _removeData: function _removeData(e, t) {\n      Q.remove(e, t);\n    }\n  }), k.fn.extend({\n    data: function data(n, e) {\n      var t,\n          r,\n          i,\n          o = this[0],\n          a = o && o.attributes;\n\n      if (void 0 === n) {\n        if (this.length && (i = J.get(o), 1 === o.nodeType && !Q.get(o, \"hasDataAttrs\"))) {\n          t = a.length;\n\n          while (t--) {\n            a[t] && 0 === (r = a[t].name).indexOf(\"data-\") && (r = V(r.slice(5)), ee(o, r, i[r]));\n          }\n\n          Q.set(o, \"hasDataAttrs\", !0);\n        }\n\n        return i;\n      }\n\n      return \"object\" == _typeof(n) ? this.each(function () {\n        J.set(this, n);\n      }) : _(this, function (e) {\n        var t;\n        if (o && void 0 === e) return void 0 !== (t = J.get(o, n)) ? t : void 0 !== (t = ee(o, n)) ? t : void 0;\n        this.each(function () {\n          J.set(this, n, e);\n        });\n      }, null, e, 1 < arguments.length, null, !0);\n    },\n    removeData: function removeData(e) {\n      return this.each(function () {\n        J.remove(this, e);\n      });\n    }\n  }), k.extend({\n    queue: function queue(e, t, n) {\n      var r;\n      if (e) return t = (t || \"fx\") + \"queue\", r = Q.get(e, t), n && (!r || Array.isArray(n) ? r = Q.access(e, t, k.makeArray(n)) : r.push(n)), r || [];\n    },\n    dequeue: function dequeue(e, t) {\n      t = t || \"fx\";\n\n      var n = k.queue(e, t),\n          r = n.length,\n          i = n.shift(),\n          o = k._queueHooks(e, t);\n\n      \"inprogress\" === i && (i = n.shift(), r--), i && (\"fx\" === t && n.unshift(\"inprogress\"), delete o.stop, i.call(e, function () {\n        k.dequeue(e, t);\n      }, o)), !r && o && o.empty.fire();\n    },\n    _queueHooks: function _queueHooks(e, t) {\n      var n = t + \"queueHooks\";\n      return Q.get(e, n) || Q.access(e, n, {\n        empty: k.Callbacks(\"once memory\").add(function () {\n          Q.remove(e, [t + \"queue\", n]);\n        })\n      });\n    }\n  }), k.fn.extend({\n    queue: function queue(t, n) {\n      var e = 2;\n      return \"string\" != typeof t && (n = t, t = \"fx\", e--), arguments.length < e ? k.queue(this[0], t) : void 0 === n ? this : this.each(function () {\n        var e = k.queue(this, t, n);\n        k._queueHooks(this, t), \"fx\" === t && \"inprogress\" !== e[0] && k.dequeue(this, t);\n      });\n    },\n    dequeue: function dequeue(e) {\n      return this.each(function () {\n        k.dequeue(this, e);\n      });\n    },\n    clearQueue: function clearQueue(e) {\n      return this.queue(e || \"fx\", []);\n    },\n    promise: function promise(e, t) {\n      var n,\n          r = 1,\n          i = k.Deferred(),\n          o = this,\n          a = this.length,\n          s = function s() {\n        --r || i.resolveWith(o, [o]);\n      };\n\n      \"string\" != typeof e && (t = e, e = void 0), e = e || \"fx\";\n\n      while (a--) {\n        (n = Q.get(o[a], e + \"queueHooks\")) && n.empty && (r++, n.empty.add(s));\n      }\n\n      return s(), i.promise(t);\n    }\n  });\n\n  var te = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,\n      ne = new RegExp(\"^(?:([+-])=|)(\" + te + \")([a-z%]*)$\", \"i\"),\n      re = [\"Top\", \"Right\", \"Bottom\", \"Left\"],\n      ie = E.documentElement,\n      oe = function oe(e) {\n    return k.contains(e.ownerDocument, e);\n  },\n      ae = {\n    composed: !0\n  };\n\n  ie.getRootNode && (oe = function oe(e) {\n    return k.contains(e.ownerDocument, e) || e.getRootNode(ae) === e.ownerDocument;\n  });\n\n  var se = function se(e, t) {\n    return \"none\" === (e = t || e).style.display || \"\" === e.style.display && oe(e) && \"none\" === k.css(e, \"display\");\n  },\n      ue = function ue(e, t, n, r) {\n    var i,\n        o,\n        a = {};\n\n    for (o in t) {\n      a[o] = e.style[o], e.style[o] = t[o];\n    }\n\n    for (o in i = n.apply(e, r || []), t) {\n      e.style[o] = a[o];\n    }\n\n    return i;\n  };\n\n  function le(e, t, n, r) {\n    var i,\n        o,\n        a = 20,\n        s = r ? function () {\n      return r.cur();\n    } : function () {\n      return k.css(e, t, \"\");\n    },\n        u = s(),\n        l = n && n[3] || (k.cssNumber[t] ? \"\" : \"px\"),\n        c = e.nodeType && (k.cssNumber[t] || \"px\" !== l && +u) && ne.exec(k.css(e, t));\n\n    if (c && c[3] !== l) {\n      u /= 2, l = l || c[3], c = +u || 1;\n\n      while (a--) {\n        k.style(e, t, c + l), (1 - o) * (1 - (o = s() / u || .5)) <= 0 && (a = 0), c /= o;\n      }\n\n      c *= 2, k.style(e, t, c + l), n = n || [];\n    }\n\n    return n && (c = +c || +u || 0, i = n[1] ? c + (n[1] + 1) * n[2] : +n[2], r && (r.unit = l, r.start = c, r.end = i)), i;\n  }\n\n  var ce = {};\n\n  function fe(e, t) {\n    for (var n, r, i, o, a, s, u, l = [], c = 0, f = e.length; c < f; c++) {\n      (r = e[c]).style && (n = r.style.display, t ? (\"none\" === n && (l[c] = Q.get(r, \"display\") || null, l[c] || (r.style.display = \"\")), \"\" === r.style.display && se(r) && (l[c] = (u = a = o = void 0, a = (i = r).ownerDocument, s = i.nodeName, (u = ce[s]) || (o = a.body.appendChild(a.createElement(s)), u = k.css(o, \"display\"), o.parentNode.removeChild(o), \"none\" === u && (u = \"block\"), ce[s] = u)))) : \"none\" !== n && (l[c] = \"none\", Q.set(r, \"display\", n)));\n    }\n\n    for (c = 0; c < f; c++) {\n      null != l[c] && (e[c].style.display = l[c]);\n    }\n\n    return e;\n  }\n\n  k.fn.extend({\n    show: function show() {\n      return fe(this, !0);\n    },\n    hide: function hide() {\n      return fe(this);\n    },\n    toggle: function toggle(e) {\n      return \"boolean\" == typeof e ? e ? this.show() : this.hide() : this.each(function () {\n        se(this) ? k(this).show() : k(this).hide();\n      });\n    }\n  });\n  var pe = /^(?:checkbox|radio)$/i,\n      de = /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i,\n      he = /^$|^module$|\\/(?:java|ecma)script/i,\n      ge = {\n    option: [1, \"<select multiple='multiple'>\", \"</select>\"],\n    thead: [1, \"<table>\", \"</table>\"],\n    col: [2, \"<table><colgroup>\", \"</colgroup></table>\"],\n    tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n    td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n    _default: [0, \"\", \"\"]\n  };\n\n  function ve(e, t) {\n    var n;\n    return n = \"undefined\" != typeof e.getElementsByTagName ? e.getElementsByTagName(t || \"*\") : \"undefined\" != typeof e.querySelectorAll ? e.querySelectorAll(t || \"*\") : [], void 0 === t || t && A(e, t) ? k.merge([e], n) : n;\n  }\n\n  function ye(e, t) {\n    for (var n = 0, r = e.length; n < r; n++) {\n      Q.set(e[n], \"globalEval\", !t || Q.get(t[n], \"globalEval\"));\n    }\n  }\n\n  ge.optgroup = ge.option, ge.tbody = ge.tfoot = ge.colgroup = ge.caption = ge.thead, ge.th = ge.td;\n  var me,\n      xe,\n      be = /<|&#?\\w+;/;\n\n  function we(e, t, n, r, i) {\n    for (var o, a, s, u, l, c, f = t.createDocumentFragment(), p = [], d = 0, h = e.length; d < h; d++) {\n      if ((o = e[d]) || 0 === o) if (\"object\" === w(o)) k.merge(p, o.nodeType ? [o] : o);else if (be.test(o)) {\n        a = a || f.appendChild(t.createElement(\"div\")), s = (de.exec(o) || [\"\", \"\"])[1].toLowerCase(), u = ge[s] || ge._default, a.innerHTML = u[1] + k.htmlPrefilter(o) + u[2], c = u[0];\n\n        while (c--) {\n          a = a.lastChild;\n        }\n\n        k.merge(p, a.childNodes), (a = f.firstChild).textContent = \"\";\n      } else p.push(t.createTextNode(o));\n    }\n\n    f.textContent = \"\", d = 0;\n\n    while (o = p[d++]) {\n      if (r && -1 < k.inArray(o, r)) i && i.push(o);else if (l = oe(o), a = ve(f.appendChild(o), \"script\"), l && ye(a), n) {\n        c = 0;\n\n        while (o = a[c++]) {\n          he.test(o.type || \"\") && n.push(o);\n        }\n      }\n    }\n\n    return f;\n  }\n\n  me = E.createDocumentFragment().appendChild(E.createElement(\"div\")), (xe = E.createElement(\"input\")).setAttribute(\"type\", \"radio\"), xe.setAttribute(\"checked\", \"checked\"), xe.setAttribute(\"name\", \"t\"), me.appendChild(xe), y.checkClone = me.cloneNode(!0).cloneNode(!0).lastChild.checked, me.innerHTML = \"<textarea>x</textarea>\", y.noCloneChecked = !!me.cloneNode(!0).lastChild.defaultValue;\n  var Te = /^key/,\n      Ce = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n      Ee = /^([^.]*)(?:\\.(.+)|)/;\n\n  function ke() {\n    return !0;\n  }\n\n  function Se() {\n    return !1;\n  }\n\n  function Ne(e, t) {\n    return e === function () {\n      try {\n        return E.activeElement;\n      } catch (e) {}\n    }() == (\"focus\" === t);\n  }\n\n  function Ae(e, t, n, r, i, o) {\n    var a, s;\n\n    if (\"object\" == _typeof(t)) {\n      for (s in \"string\" != typeof n && (r = r || n, n = void 0), t) {\n        Ae(e, s, n, r, t[s], o);\n      }\n\n      return e;\n    }\n\n    if (null == r && null == i ? (i = n, r = n = void 0) : null == i && (\"string\" == typeof n ? (i = r, r = void 0) : (i = r, r = n, n = void 0)), !1 === i) i = Se;else if (!i) return e;\n    return 1 === o && (a = i, (i = function i(e) {\n      return k().off(e), a.apply(this, arguments);\n    }).guid = a.guid || (a.guid = k.guid++)), e.each(function () {\n      k.event.add(this, t, i, r, n);\n    });\n  }\n\n  function De(e, i, o) {\n    o ? (Q.set(e, i, !1), k.event.add(e, i, {\n      namespace: !1,\n      handler: function handler(e) {\n        var t,\n            n,\n            r = Q.get(this, i);\n\n        if (1 & e.isTrigger && this[i]) {\n          if (r.length) (k.event.special[i] || {}).delegateType && e.stopPropagation();else if (r = s.call(arguments), Q.set(this, i, r), t = o(this, i), this[i](), r !== (n = Q.get(this, i)) || t ? Q.set(this, i, !1) : n = {}, r !== n) return e.stopImmediatePropagation(), e.preventDefault(), n.value;\n        } else r.length && (Q.set(this, i, {\n          value: k.event.trigger(k.extend(r[0], k.Event.prototype), r.slice(1), this)\n        }), e.stopImmediatePropagation());\n      }\n    })) : void 0 === Q.get(e, i) && k.event.add(e, i, ke);\n  }\n\n  k.event = {\n    global: {},\n    add: function add(t, e, n, r, i) {\n      var o,\n          a,\n          s,\n          u,\n          l,\n          c,\n          f,\n          p,\n          d,\n          h,\n          g,\n          v = Q.get(t);\n\n      if (v) {\n        n.handler && (n = (o = n).handler, i = o.selector), i && k.find.matchesSelector(ie, i), n.guid || (n.guid = k.guid++), (u = v.events) || (u = v.events = {}), (a = v.handle) || (a = v.handle = function (e) {\n          return \"undefined\" != typeof k && k.event.triggered !== e.type ? k.event.dispatch.apply(t, arguments) : void 0;\n        }), l = (e = (e || \"\").match(R) || [\"\"]).length;\n\n        while (l--) {\n          d = g = (s = Ee.exec(e[l]) || [])[1], h = (s[2] || \"\").split(\".\").sort(), d && (f = k.event.special[d] || {}, d = (i ? f.delegateType : f.bindType) || d, f = k.event.special[d] || {}, c = k.extend({\n            type: d,\n            origType: g,\n            data: r,\n            handler: n,\n            guid: n.guid,\n            selector: i,\n            needsContext: i && k.expr.match.needsContext.test(i),\n            namespace: h.join(\".\")\n          }, o), (p = u[d]) || ((p = u[d] = []).delegateCount = 0, f.setup && !1 !== f.setup.call(t, r, h, a) || t.addEventListener && t.addEventListener(d, a)), f.add && (f.add.call(t, c), c.handler.guid || (c.handler.guid = n.guid)), i ? p.splice(p.delegateCount++, 0, c) : p.push(c), k.event.global[d] = !0);\n        }\n      }\n    },\n    remove: function remove(e, t, n, r, i) {\n      var o,\n          a,\n          s,\n          u,\n          l,\n          c,\n          f,\n          p,\n          d,\n          h,\n          g,\n          v = Q.hasData(e) && Q.get(e);\n\n      if (v && (u = v.events)) {\n        l = (t = (t || \"\").match(R) || [\"\"]).length;\n\n        while (l--) {\n          if (d = g = (s = Ee.exec(t[l]) || [])[1], h = (s[2] || \"\").split(\".\").sort(), d) {\n            f = k.event.special[d] || {}, p = u[d = (r ? f.delegateType : f.bindType) || d] || [], s = s[2] && new RegExp(\"(^|\\\\.)\" + h.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\"), a = o = p.length;\n\n            while (o--) {\n              c = p[o], !i && g !== c.origType || n && n.guid !== c.guid || s && !s.test(c.namespace) || r && r !== c.selector && (\"**\" !== r || !c.selector) || (p.splice(o, 1), c.selector && p.delegateCount--, f.remove && f.remove.call(e, c));\n            }\n\n            a && !p.length && (f.teardown && !1 !== f.teardown.call(e, h, v.handle) || k.removeEvent(e, d, v.handle), delete u[d]);\n          } else for (d in u) {\n            k.event.remove(e, d + t[l], n, r, !0);\n          }\n        }\n\n        k.isEmptyObject(u) && Q.remove(e, \"handle events\");\n      }\n    },\n    dispatch: function dispatch(e) {\n      var t,\n          n,\n          r,\n          i,\n          o,\n          a,\n          s = k.event.fix(e),\n          u = new Array(arguments.length),\n          l = (Q.get(this, \"events\") || {})[s.type] || [],\n          c = k.event.special[s.type] || {};\n\n      for (u[0] = s, t = 1; t < arguments.length; t++) {\n        u[t] = arguments[t];\n      }\n\n      if (s.delegateTarget = this, !c.preDispatch || !1 !== c.preDispatch.call(this, s)) {\n        a = k.event.handlers.call(this, s, l), t = 0;\n\n        while ((i = a[t++]) && !s.isPropagationStopped()) {\n          s.currentTarget = i.elem, n = 0;\n\n          while ((o = i.handlers[n++]) && !s.isImmediatePropagationStopped()) {\n            s.rnamespace && !1 !== o.namespace && !s.rnamespace.test(o.namespace) || (s.handleObj = o, s.data = o.data, void 0 !== (r = ((k.event.special[o.origType] || {}).handle || o.handler).apply(i.elem, u)) && !1 === (s.result = r) && (s.preventDefault(), s.stopPropagation()));\n          }\n        }\n\n        return c.postDispatch && c.postDispatch.call(this, s), s.result;\n      }\n    },\n    handlers: function handlers(e, t) {\n      var n,\n          r,\n          i,\n          o,\n          a,\n          s = [],\n          u = t.delegateCount,\n          l = e.target;\n      if (u && l.nodeType && !(\"click\" === e.type && 1 <= e.button)) for (; l !== this; l = l.parentNode || this) {\n        if (1 === l.nodeType && (\"click\" !== e.type || !0 !== l.disabled)) {\n          for (o = [], a = {}, n = 0; n < u; n++) {\n            void 0 === a[i = (r = t[n]).selector + \" \"] && (a[i] = r.needsContext ? -1 < k(i, this).index(l) : k.find(i, this, null, [l]).length), a[i] && o.push(r);\n          }\n\n          o.length && s.push({\n            elem: l,\n            handlers: o\n          });\n        }\n      }\n      return l = this, u < t.length && s.push({\n        elem: l,\n        handlers: t.slice(u)\n      }), s;\n    },\n    addProp: function addProp(t, e) {\n      Object.defineProperty(k.Event.prototype, t, {\n        enumerable: !0,\n        configurable: !0,\n        get: m(e) ? function () {\n          if (this.originalEvent) return e(this.originalEvent);\n        } : function () {\n          if (this.originalEvent) return this.originalEvent[t];\n        },\n        set: function set(e) {\n          Object.defineProperty(this, t, {\n            enumerable: !0,\n            configurable: !0,\n            writable: !0,\n            value: e\n          });\n        }\n      });\n    },\n    fix: function fix(e) {\n      return e[k.expando] ? e : new k.Event(e);\n    },\n    special: {\n      load: {\n        noBubble: !0\n      },\n      click: {\n        setup: function setup(e) {\n          var t = this || e;\n          return pe.test(t.type) && t.click && A(t, \"input\") && De(t, \"click\", ke), !1;\n        },\n        trigger: function trigger(e) {\n          var t = this || e;\n          return pe.test(t.type) && t.click && A(t, \"input\") && De(t, \"click\"), !0;\n        },\n        _default: function _default(e) {\n          var t = e.target;\n          return pe.test(t.type) && t.click && A(t, \"input\") && Q.get(t, \"click\") || A(t, \"a\");\n        }\n      },\n      beforeunload: {\n        postDispatch: function postDispatch(e) {\n          void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result);\n        }\n      }\n    }\n  }, k.removeEvent = function (e, t, n) {\n    e.removeEventListener && e.removeEventListener(t, n);\n  }, k.Event = function (e, t) {\n    if (!(this instanceof k.Event)) return new k.Event(e, t);\n    e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && !1 === e.returnValue ? ke : Se, this.target = e.target && 3 === e.target.nodeType ? e.target.parentNode : e.target, this.currentTarget = e.currentTarget, this.relatedTarget = e.relatedTarget) : this.type = e, t && k.extend(this, t), this.timeStamp = e && e.timeStamp || Date.now(), this[k.expando] = !0;\n  }, k.Event.prototype = {\n    constructor: k.Event,\n    isDefaultPrevented: Se,\n    isPropagationStopped: Se,\n    isImmediatePropagationStopped: Se,\n    isSimulated: !1,\n    preventDefault: function preventDefault() {\n      var e = this.originalEvent;\n      this.isDefaultPrevented = ke, e && !this.isSimulated && e.preventDefault();\n    },\n    stopPropagation: function stopPropagation() {\n      var e = this.originalEvent;\n      this.isPropagationStopped = ke, e && !this.isSimulated && e.stopPropagation();\n    },\n    stopImmediatePropagation: function stopImmediatePropagation() {\n      var e = this.originalEvent;\n      this.isImmediatePropagationStopped = ke, e && !this.isSimulated && e.stopImmediatePropagation(), this.stopPropagation();\n    }\n  }, k.each({\n    altKey: !0,\n    bubbles: !0,\n    cancelable: !0,\n    changedTouches: !0,\n    ctrlKey: !0,\n    detail: !0,\n    eventPhase: !0,\n    metaKey: !0,\n    pageX: !0,\n    pageY: !0,\n    shiftKey: !0,\n    view: !0,\n    \"char\": !0,\n    code: !0,\n    charCode: !0,\n    key: !0,\n    keyCode: !0,\n    button: !0,\n    buttons: !0,\n    clientX: !0,\n    clientY: !0,\n    offsetX: !0,\n    offsetY: !0,\n    pointerId: !0,\n    pointerType: !0,\n    screenX: !0,\n    screenY: !0,\n    targetTouches: !0,\n    toElement: !0,\n    touches: !0,\n    which: function which(e) {\n      var t = e.button;\n      return null == e.which && Te.test(e.type) ? null != e.charCode ? e.charCode : e.keyCode : !e.which && void 0 !== t && Ce.test(e.type) ? 1 & t ? 1 : 2 & t ? 3 : 4 & t ? 2 : 0 : e.which;\n    }\n  }, k.event.addProp), k.each({\n    focus: \"focusin\",\n    blur: \"focusout\"\n  }, function (e, t) {\n    k.event.special[e] = {\n      setup: function setup() {\n        return De(this, e, Ne), !1;\n      },\n      trigger: function trigger() {\n        return De(this, e), !0;\n      },\n      delegateType: t\n    };\n  }), k.each({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\",\n    pointerenter: \"pointerover\",\n    pointerleave: \"pointerout\"\n  }, function (e, i) {\n    k.event.special[e] = {\n      delegateType: i,\n      bindType: i,\n      handle: function handle(e) {\n        var t,\n            n = e.relatedTarget,\n            r = e.handleObj;\n        return n && (n === this || k.contains(this, n)) || (e.type = r.origType, t = r.handler.apply(this, arguments), e.type = i), t;\n      }\n    };\n  }), k.fn.extend({\n    on: function on(e, t, n, r) {\n      return Ae(this, e, t, n, r);\n    },\n    one: function one(e, t, n, r) {\n      return Ae(this, e, t, n, r, 1);\n    },\n    off: function off(e, t, n) {\n      var r, i;\n      if (e && e.preventDefault && e.handleObj) return r = e.handleObj, k(e.delegateTarget).off(r.namespace ? r.origType + \".\" + r.namespace : r.origType, r.selector, r.handler), this;\n\n      if (\"object\" == _typeof(e)) {\n        for (i in e) {\n          this.off(i, t, e[i]);\n        }\n\n        return this;\n      }\n\n      return !1 !== t && \"function\" != typeof t || (n = t, t = void 0), !1 === n && (n = Se), this.each(function () {\n        k.event.remove(this, e, n, t);\n      });\n    }\n  });\n  var je = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n      qe = /<script|<style|<link/i,\n      Le = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n      He = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n  function Oe(e, t) {\n    return A(e, \"table\") && A(11 !== t.nodeType ? t : t.firstChild, \"tr\") && k(e).children(\"tbody\")[0] || e;\n  }\n\n  function Pe(e) {\n    return e.type = (null !== e.getAttribute(\"type\")) + \"/\" + e.type, e;\n  }\n\n  function Re(e) {\n    return \"true/\" === (e.type || \"\").slice(0, 5) ? e.type = e.type.slice(5) : e.removeAttribute(\"type\"), e;\n  }\n\n  function Me(e, t) {\n    var n, r, i, o, a, s, u, l;\n\n    if (1 === t.nodeType) {\n      if (Q.hasData(e) && (o = Q.access(e), a = Q.set(t, o), l = o.events)) for (i in delete a.handle, a.events = {}, l) {\n        for (n = 0, r = l[i].length; n < r; n++) {\n          k.event.add(t, i, l[i][n]);\n        }\n      }\n      J.hasData(e) && (s = J.access(e), u = k.extend({}, s), J.set(t, u));\n    }\n  }\n\n  function Ie(n, r, i, o) {\n    r = g.apply([], r);\n    var e,\n        t,\n        a,\n        s,\n        u,\n        l,\n        c = 0,\n        f = n.length,\n        p = f - 1,\n        d = r[0],\n        h = m(d);\n    if (h || 1 < f && \"string\" == typeof d && !y.checkClone && Le.test(d)) return n.each(function (e) {\n      var t = n.eq(e);\n      h && (r[0] = d.call(this, e, t.html())), Ie(t, r, i, o);\n    });\n\n    if (f && (t = (e = we(r, n[0].ownerDocument, !1, n, o)).firstChild, 1 === e.childNodes.length && (e = t), t || o)) {\n      for (s = (a = k.map(ve(e, \"script\"), Pe)).length; c < f; c++) {\n        u = e, c !== p && (u = k.clone(u, !0, !0), s && k.merge(a, ve(u, \"script\"))), i.call(n[c], u, c);\n      }\n\n      if (s) for (l = a[a.length - 1].ownerDocument, k.map(a, Re), c = 0; c < s; c++) {\n        u = a[c], he.test(u.type || \"\") && !Q.access(u, \"globalEval\") && k.contains(l, u) && (u.src && \"module\" !== (u.type || \"\").toLowerCase() ? k._evalUrl && !u.noModule && k._evalUrl(u.src, {\n          nonce: u.nonce || u.getAttribute(\"nonce\")\n        }) : b(u.textContent.replace(He, \"\"), u, l));\n      }\n    }\n\n    return n;\n  }\n\n  function We(e, t, n) {\n    for (var r, i = t ? k.filter(t, e) : e, o = 0; null != (r = i[o]); o++) {\n      n || 1 !== r.nodeType || k.cleanData(ve(r)), r.parentNode && (n && oe(r) && ye(ve(r, \"script\")), r.parentNode.removeChild(r));\n    }\n\n    return e;\n  }\n\n  k.extend({\n    htmlPrefilter: function htmlPrefilter(e) {\n      return e.replace(je, \"<$1></$2>\");\n    },\n    clone: function clone(e, t, n) {\n      var r,\n          i,\n          o,\n          a,\n          s,\n          u,\n          l,\n          c = e.cloneNode(!0),\n          f = oe(e);\n      if (!(y.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || k.isXMLDoc(e))) for (a = ve(c), r = 0, i = (o = ve(e)).length; r < i; r++) {\n        s = o[r], u = a[r], void 0, \"input\" === (l = u.nodeName.toLowerCase()) && pe.test(s.type) ? u.checked = s.checked : \"input\" !== l && \"textarea\" !== l || (u.defaultValue = s.defaultValue);\n      }\n      if (t) if (n) for (o = o || ve(e), a = a || ve(c), r = 0, i = o.length; r < i; r++) {\n        Me(o[r], a[r]);\n      } else Me(e, c);\n      return 0 < (a = ve(c, \"script\")).length && ye(a, !f && ve(e, \"script\")), c;\n    },\n    cleanData: function cleanData(e) {\n      for (var t, n, r, i = k.event.special, o = 0; void 0 !== (n = e[o]); o++) {\n        if (G(n)) {\n          if (t = n[Q.expando]) {\n            if (t.events) for (r in t.events) {\n              i[r] ? k.event.remove(n, r) : k.removeEvent(n, r, t.handle);\n            }\n            n[Q.expando] = void 0;\n          }\n\n          n[J.expando] && (n[J.expando] = void 0);\n        }\n      }\n    }\n  }), k.fn.extend({\n    detach: function detach(e) {\n      return We(this, e, !0);\n    },\n    remove: function remove(e) {\n      return We(this, e);\n    },\n    text: function text(e) {\n      return _(this, function (e) {\n        return void 0 === e ? k.text(this) : this.empty().each(function () {\n          1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = e);\n        });\n      }, null, e, arguments.length);\n    },\n    append: function append() {\n      return Ie(this, arguments, function (e) {\n        1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || Oe(this, e).appendChild(e);\n      });\n    },\n    prepend: function prepend() {\n      return Ie(this, arguments, function (e) {\n        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {\n          var t = Oe(this, e);\n          t.insertBefore(e, t.firstChild);\n        }\n      });\n    },\n    before: function before() {\n      return Ie(this, arguments, function (e) {\n        this.parentNode && this.parentNode.insertBefore(e, this);\n      });\n    },\n    after: function after() {\n      return Ie(this, arguments, function (e) {\n        this.parentNode && this.parentNode.insertBefore(e, this.nextSibling);\n      });\n    },\n    empty: function empty() {\n      for (var e, t = 0; null != (e = this[t]); t++) {\n        1 === e.nodeType && (k.cleanData(ve(e, !1)), e.textContent = \"\");\n      }\n\n      return this;\n    },\n    clone: function clone(e, t) {\n      return e = null != e && e, t = null == t ? e : t, this.map(function () {\n        return k.clone(this, e, t);\n      });\n    },\n    html: function html(e) {\n      return _(this, function (e) {\n        var t = this[0] || {},\n            n = 0,\n            r = this.length;\n        if (void 0 === e && 1 === t.nodeType) return t.innerHTML;\n\n        if (\"string\" == typeof e && !qe.test(e) && !ge[(de.exec(e) || [\"\", \"\"])[1].toLowerCase()]) {\n          e = k.htmlPrefilter(e);\n\n          try {\n            for (; n < r; n++) {\n              1 === (t = this[n] || {}).nodeType && (k.cleanData(ve(t, !1)), t.innerHTML = e);\n            }\n\n            t = 0;\n          } catch (e) {}\n        }\n\n        t && this.empty().append(e);\n      }, null, e, arguments.length);\n    },\n    replaceWith: function replaceWith() {\n      var n = [];\n      return Ie(this, arguments, function (e) {\n        var t = this.parentNode;\n        k.inArray(this, n) < 0 && (k.cleanData(ve(this)), t && t.replaceChild(e, this));\n      }, n);\n    }\n  }), k.each({\n    appendTo: \"append\",\n    prependTo: \"prepend\",\n    insertBefore: \"before\",\n    insertAfter: \"after\",\n    replaceAll: \"replaceWith\"\n  }, function (e, a) {\n    k.fn[e] = function (e) {\n      for (var t, n = [], r = k(e), i = r.length - 1, o = 0; o <= i; o++) {\n        t = o === i ? this : this.clone(!0), k(r[o])[a](t), u.apply(n, t.get());\n      }\n\n      return this.pushStack(n);\n    };\n  });\n\n  var $e = new RegExp(\"^(\" + te + \")(?!px)[a-z%]+$\", \"i\"),\n      Fe = function Fe(e) {\n    var t = e.ownerDocument.defaultView;\n    return t && t.opener || (t = C), t.getComputedStyle(e);\n  },\n      Be = new RegExp(re.join(\"|\"), \"i\");\n\n  function _e(e, t, n) {\n    var r,\n        i,\n        o,\n        a,\n        s = e.style;\n    return (n = n || Fe(e)) && (\"\" !== (a = n.getPropertyValue(t) || n[t]) || oe(e) || (a = k.style(e, t)), !y.pixelBoxStyles() && $e.test(a) && Be.test(t) && (r = s.width, i = s.minWidth, o = s.maxWidth, s.minWidth = s.maxWidth = s.width = a, a = n.width, s.width = r, s.minWidth = i, s.maxWidth = o)), void 0 !== a ? a + \"\" : a;\n  }\n\n  function ze(e, t) {\n    return {\n      get: function get() {\n        if (!e()) return (this.get = t).apply(this, arguments);\n        delete this.get;\n      }\n    };\n  }\n\n  !function () {\n    function e() {\n      if (u) {\n        s.style.cssText = \"position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0\", u.style.cssText = \"position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%\", ie.appendChild(s).appendChild(u);\n        var e = C.getComputedStyle(u);\n        n = \"1%\" !== e.top, a = 12 === t(e.marginLeft), u.style.right = \"60%\", o = 36 === t(e.right), r = 36 === t(e.width), u.style.position = \"absolute\", i = 12 === t(u.offsetWidth / 3), ie.removeChild(s), u = null;\n      }\n    }\n\n    function t(e) {\n      return Math.round(parseFloat(e));\n    }\n\n    var n,\n        r,\n        i,\n        o,\n        a,\n        s = E.createElement(\"div\"),\n        u = E.createElement(\"div\");\n    u.style && (u.style.backgroundClip = \"content-box\", u.cloneNode(!0).style.backgroundClip = \"\", y.clearCloneStyle = \"content-box\" === u.style.backgroundClip, k.extend(y, {\n      boxSizingReliable: function boxSizingReliable() {\n        return e(), r;\n      },\n      pixelBoxStyles: function pixelBoxStyles() {\n        return e(), o;\n      },\n      pixelPosition: function pixelPosition() {\n        return e(), n;\n      },\n      reliableMarginLeft: function reliableMarginLeft() {\n        return e(), a;\n      },\n      scrollboxSize: function scrollboxSize() {\n        return e(), i;\n      }\n    }));\n  }();\n  var Ue = [\"Webkit\", \"Moz\", \"ms\"],\n      Xe = E.createElement(\"div\").style,\n      Ve = {};\n\n  function Ge(e) {\n    var t = k.cssProps[e] || Ve[e];\n    return t || (e in Xe ? e : Ve[e] = function (e) {\n      var t = e[0].toUpperCase() + e.slice(1),\n          n = Ue.length;\n\n      while (n--) {\n        if ((e = Ue[n] + t) in Xe) return e;\n      }\n    }(e) || e);\n  }\n\n  var Ye = /^(none|table(?!-c[ea]).+)/,\n      Qe = /^--/,\n      Je = {\n    position: \"absolute\",\n    visibility: \"hidden\",\n    display: \"block\"\n  },\n      Ke = {\n    letterSpacing: \"0\",\n    fontWeight: \"400\"\n  };\n\n  function Ze(e, t, n) {\n    var r = ne.exec(t);\n    return r ? Math.max(0, r[2] - (n || 0)) + (r[3] || \"px\") : t;\n  }\n\n  function et(e, t, n, r, i, o) {\n    var a = \"width\" === t ? 1 : 0,\n        s = 0,\n        u = 0;\n    if (n === (r ? \"border\" : \"content\")) return 0;\n\n    for (; a < 4; a += 2) {\n      \"margin\" === n && (u += k.css(e, n + re[a], !0, i)), r ? (\"content\" === n && (u -= k.css(e, \"padding\" + re[a], !0, i)), \"margin\" !== n && (u -= k.css(e, \"border\" + re[a] + \"Width\", !0, i))) : (u += k.css(e, \"padding\" + re[a], !0, i), \"padding\" !== n ? u += k.css(e, \"border\" + re[a] + \"Width\", !0, i) : s += k.css(e, \"border\" + re[a] + \"Width\", !0, i));\n    }\n\n    return !r && 0 <= o && (u += Math.max(0, Math.ceil(e[\"offset\" + t[0].toUpperCase() + t.slice(1)] - o - u - s - .5)) || 0), u;\n  }\n\n  function tt(e, t, n) {\n    var r = Fe(e),\n        i = (!y.boxSizingReliable() || n) && \"border-box\" === k.css(e, \"boxSizing\", !1, r),\n        o = i,\n        a = _e(e, t, r),\n        s = \"offset\" + t[0].toUpperCase() + t.slice(1);\n\n    if ($e.test(a)) {\n      if (!n) return a;\n      a = \"auto\";\n    }\n\n    return (!y.boxSizingReliable() && i || \"auto\" === a || !parseFloat(a) && \"inline\" === k.css(e, \"display\", !1, r)) && e.getClientRects().length && (i = \"border-box\" === k.css(e, \"boxSizing\", !1, r), (o = s in e) && (a = e[s])), (a = parseFloat(a) || 0) + et(e, t, n || (i ? \"border\" : \"content\"), o, r, a) + \"px\";\n  }\n\n  function nt(e, t, n, r, i) {\n    return new nt.prototype.init(e, t, n, r, i);\n  }\n\n  k.extend({\n    cssHooks: {\n      opacity: {\n        get: function get(e, t) {\n          if (t) {\n            var n = _e(e, \"opacity\");\n\n            return \"\" === n ? \"1\" : n;\n          }\n        }\n      }\n    },\n    cssNumber: {\n      animationIterationCount: !0,\n      columnCount: !0,\n      fillOpacity: !0,\n      flexGrow: !0,\n      flexShrink: !0,\n      fontWeight: !0,\n      gridArea: !0,\n      gridColumn: !0,\n      gridColumnEnd: !0,\n      gridColumnStart: !0,\n      gridRow: !0,\n      gridRowEnd: !0,\n      gridRowStart: !0,\n      lineHeight: !0,\n      opacity: !0,\n      order: !0,\n      orphans: !0,\n      widows: !0,\n      zIndex: !0,\n      zoom: !0\n    },\n    cssProps: {},\n    style: function style(e, t, n, r) {\n      if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {\n        var i,\n            o,\n            a,\n            s = V(t),\n            u = Qe.test(t),\n            l = e.style;\n        if (u || (t = Ge(s)), a = k.cssHooks[t] || k.cssHooks[s], void 0 === n) return a && \"get\" in a && void 0 !== (i = a.get(e, !1, r)) ? i : l[t];\n        \"string\" === (o = _typeof(n)) && (i = ne.exec(n)) && i[1] && (n = le(e, t, i), o = \"number\"), null != n && n == n && (\"number\" !== o || u || (n += i && i[3] || (k.cssNumber[s] ? \"\" : \"px\")), y.clearCloneStyle || \"\" !== n || 0 !== t.indexOf(\"background\") || (l[t] = \"inherit\"), a && \"set\" in a && void 0 === (n = a.set(e, n, r)) || (u ? l.setProperty(t, n) : l[t] = n));\n      }\n    },\n    css: function css(e, t, n, r) {\n      var i,\n          o,\n          a,\n          s = V(t);\n      return Qe.test(t) || (t = Ge(s)), (a = k.cssHooks[t] || k.cssHooks[s]) && \"get\" in a && (i = a.get(e, !0, n)), void 0 === i && (i = _e(e, t, r)), \"normal\" === i && t in Ke && (i = Ke[t]), \"\" === n || n ? (o = parseFloat(i), !0 === n || isFinite(o) ? o || 0 : i) : i;\n    }\n  }), k.each([\"height\", \"width\"], function (e, u) {\n    k.cssHooks[u] = {\n      get: function get(e, t, n) {\n        if (t) return !Ye.test(k.css(e, \"display\")) || e.getClientRects().length && e.getBoundingClientRect().width ? tt(e, u, n) : ue(e, Je, function () {\n          return tt(e, u, n);\n        });\n      },\n      set: function set(e, t, n) {\n        var r,\n            i = Fe(e),\n            o = !y.scrollboxSize() && \"absolute\" === i.position,\n            a = (o || n) && \"border-box\" === k.css(e, \"boxSizing\", !1, i),\n            s = n ? et(e, u, n, a, i) : 0;\n        return a && o && (s -= Math.ceil(e[\"offset\" + u[0].toUpperCase() + u.slice(1)] - parseFloat(i[u]) - et(e, u, \"border\", !1, i) - .5)), s && (r = ne.exec(t)) && \"px\" !== (r[3] || \"px\") && (e.style[u] = t, t = k.css(e, u)), Ze(0, t, s);\n      }\n    };\n  }), k.cssHooks.marginLeft = ze(y.reliableMarginLeft, function (e, t) {\n    if (t) return (parseFloat(_e(e, \"marginLeft\")) || e.getBoundingClientRect().left - ue(e, {\n      marginLeft: 0\n    }, function () {\n      return e.getBoundingClientRect().left;\n    })) + \"px\";\n  }), k.each({\n    margin: \"\",\n    padding: \"\",\n    border: \"Width\"\n  }, function (i, o) {\n    k.cssHooks[i + o] = {\n      expand: function expand(e) {\n        for (var t = 0, n = {}, r = \"string\" == typeof e ? e.split(\" \") : [e]; t < 4; t++) {\n          n[i + re[t] + o] = r[t] || r[t - 2] || r[0];\n        }\n\n        return n;\n      }\n    }, \"margin\" !== i && (k.cssHooks[i + o].set = Ze);\n  }), k.fn.extend({\n    css: function css(e, t) {\n      return _(this, function (e, t, n) {\n        var r,\n            i,\n            o = {},\n            a = 0;\n\n        if (Array.isArray(t)) {\n          for (r = Fe(e), i = t.length; a < i; a++) {\n            o[t[a]] = k.css(e, t[a], !1, r);\n          }\n\n          return o;\n        }\n\n        return void 0 !== n ? k.style(e, t, n) : k.css(e, t);\n      }, e, t, 1 < arguments.length);\n    }\n  }), ((k.Tween = nt).prototype = {\n    constructor: nt,\n    init: function init(e, t, n, r, i, o) {\n      this.elem = e, this.prop = n, this.easing = i || k.easing._default, this.options = t, this.start = this.now = this.cur(), this.end = r, this.unit = o || (k.cssNumber[n] ? \"\" : \"px\");\n    },\n    cur: function cur() {\n      var e = nt.propHooks[this.prop];\n      return e && e.get ? e.get(this) : nt.propHooks._default.get(this);\n    },\n    run: function run(e) {\n      var t,\n          n = nt.propHooks[this.prop];\n      return this.options.duration ? this.pos = t = k.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e, this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), n && n.set ? n.set(this) : nt.propHooks._default.set(this), this;\n    }\n  }).init.prototype = nt.prototype, (nt.propHooks = {\n    _default: {\n      get: function get(e) {\n        var t;\n        return 1 !== e.elem.nodeType || null != e.elem[e.prop] && null == e.elem.style[e.prop] ? e.elem[e.prop] : (t = k.css(e.elem, e.prop, \"\")) && \"auto\" !== t ? t : 0;\n      },\n      set: function set(e) {\n        k.fx.step[e.prop] ? k.fx.step[e.prop](e) : 1 !== e.elem.nodeType || !k.cssHooks[e.prop] && null == e.elem.style[Ge(e.prop)] ? e.elem[e.prop] = e.now : k.style(e.elem, e.prop, e.now + e.unit);\n      }\n    }\n  }).scrollTop = nt.propHooks.scrollLeft = {\n    set: function set(e) {\n      e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now);\n    }\n  }, k.easing = {\n    linear: function linear(e) {\n      return e;\n    },\n    swing: function swing(e) {\n      return .5 - Math.cos(e * Math.PI) / 2;\n    },\n    _default: \"swing\"\n  }, k.fx = nt.prototype.init, k.fx.step = {};\n  var rt,\n      it,\n      ot,\n      at,\n      st = /^(?:toggle|show|hide)$/,\n      ut = /queueHooks$/;\n\n  function lt() {\n    it && (!1 === E.hidden && C.requestAnimationFrame ? C.requestAnimationFrame(lt) : C.setTimeout(lt, k.fx.interval), k.fx.tick());\n  }\n\n  function ct() {\n    return C.setTimeout(function () {\n      rt = void 0;\n    }), rt = Date.now();\n  }\n\n  function ft(e, t) {\n    var n,\n        r = 0,\n        i = {\n      height: e\n    };\n\n    for (t = t ? 1 : 0; r < 4; r += 2 - t) {\n      i[\"margin\" + (n = re[r])] = i[\"padding\" + n] = e;\n    }\n\n    return t && (i.opacity = i.width = e), i;\n  }\n\n  function pt(e, t, n) {\n    for (var r, i = (dt.tweeners[t] || []).concat(dt.tweeners[\"*\"]), o = 0, a = i.length; o < a; o++) {\n      if (r = i[o].call(n, t, e)) return r;\n    }\n  }\n\n  function dt(o, e, t) {\n    var n,\n        a,\n        r = 0,\n        i = dt.prefilters.length,\n        s = k.Deferred().always(function () {\n      delete u.elem;\n    }),\n        u = function u() {\n      if (a) return !1;\n\n      for (var e = rt || ct(), t = Math.max(0, l.startTime + l.duration - e), n = 1 - (t / l.duration || 0), r = 0, i = l.tweens.length; r < i; r++) {\n        l.tweens[r].run(n);\n      }\n\n      return s.notifyWith(o, [l, n, t]), n < 1 && i ? t : (i || s.notifyWith(o, [l, 1, 0]), s.resolveWith(o, [l]), !1);\n    },\n        l = s.promise({\n      elem: o,\n      props: k.extend({}, e),\n      opts: k.extend(!0, {\n        specialEasing: {},\n        easing: k.easing._default\n      }, t),\n      originalProperties: e,\n      originalOptions: t,\n      startTime: rt || ct(),\n      duration: t.duration,\n      tweens: [],\n      createTween: function createTween(e, t) {\n        var n = k.Tween(o, l.opts, e, t, l.opts.specialEasing[e] || l.opts.easing);\n        return l.tweens.push(n), n;\n      },\n      stop: function stop(e) {\n        var t = 0,\n            n = e ? l.tweens.length : 0;\n        if (a) return this;\n\n        for (a = !0; t < n; t++) {\n          l.tweens[t].run(1);\n        }\n\n        return e ? (s.notifyWith(o, [l, 1, 0]), s.resolveWith(o, [l, e])) : s.rejectWith(o, [l, e]), this;\n      }\n    }),\n        c = l.props;\n\n    for (!function (e, t) {\n      var n, r, i, o, a;\n\n      for (n in e) {\n        if (i = t[r = V(n)], o = e[n], Array.isArray(o) && (i = o[1], o = e[n] = o[0]), n !== r && (e[r] = o, delete e[n]), (a = k.cssHooks[r]) && (\"expand\" in a)) for (n in o = a.expand(o), delete e[r], o) {\n          (n in e) || (e[n] = o[n], t[n] = i);\n        } else t[r] = i;\n      }\n    }(c, l.opts.specialEasing); r < i; r++) {\n      if (n = dt.prefilters[r].call(l, o, c, l.opts)) return m(n.stop) && (k._queueHooks(l.elem, l.opts.queue).stop = n.stop.bind(n)), n;\n    }\n\n    return k.map(c, pt, l), m(l.opts.start) && l.opts.start.call(o, l), l.progress(l.opts.progress).done(l.opts.done, l.opts.complete).fail(l.opts.fail).always(l.opts.always), k.fx.timer(k.extend(u, {\n      elem: o,\n      anim: l,\n      queue: l.opts.queue\n    })), l;\n  }\n\n  k.Animation = k.extend(dt, {\n    tweeners: {\n      \"*\": [function (e, t) {\n        var n = this.createTween(e, t);\n        return le(n.elem, e, ne.exec(t), n), n;\n      }]\n    },\n    tweener: function tweener(e, t) {\n      m(e) ? (t = e, e = [\"*\"]) : e = e.match(R);\n\n      for (var n, r = 0, i = e.length; r < i; r++) {\n        n = e[r], dt.tweeners[n] = dt.tweeners[n] || [], dt.tweeners[n].unshift(t);\n      }\n    },\n    prefilters: [function (e, t, n) {\n      var r,\n          i,\n          o,\n          a,\n          s,\n          u,\n          l,\n          c,\n          f = \"width\" in t || \"height\" in t,\n          p = this,\n          d = {},\n          h = e.style,\n          g = e.nodeType && se(e),\n          v = Q.get(e, \"fxshow\");\n\n      for (r in n.queue || (null == (a = k._queueHooks(e, \"fx\")).unqueued && (a.unqueued = 0, s = a.empty.fire, a.empty.fire = function () {\n        a.unqueued || s();\n      }), a.unqueued++, p.always(function () {\n        p.always(function () {\n          a.unqueued--, k.queue(e, \"fx\").length || a.empty.fire();\n        });\n      })), t) {\n        if (i = t[r], st.test(i)) {\n          if (delete t[r], o = o || \"toggle\" === i, i === (g ? \"hide\" : \"show\")) {\n            if (\"show\" !== i || !v || void 0 === v[r]) continue;\n            g = !0;\n          }\n\n          d[r] = v && v[r] || k.style(e, r);\n        }\n      }\n\n      if ((u = !k.isEmptyObject(t)) || !k.isEmptyObject(d)) for (r in f && 1 === e.nodeType && (n.overflow = [h.overflow, h.overflowX, h.overflowY], null == (l = v && v.display) && (l = Q.get(e, \"display\")), \"none\" === (c = k.css(e, \"display\")) && (l ? c = l : (fe([e], !0), l = e.style.display || l, c = k.css(e, \"display\"), fe([e]))), (\"inline\" === c || \"inline-block\" === c && null != l) && \"none\" === k.css(e, \"float\") && (u || (p.done(function () {\n        h.display = l;\n      }), null == l && (c = h.display, l = \"none\" === c ? \"\" : c)), h.display = \"inline-block\")), n.overflow && (h.overflow = \"hidden\", p.always(function () {\n        h.overflow = n.overflow[0], h.overflowX = n.overflow[1], h.overflowY = n.overflow[2];\n      })), u = !1, d) {\n        u || (v ? \"hidden\" in v && (g = v.hidden) : v = Q.access(e, \"fxshow\", {\n          display: l\n        }), o && (v.hidden = !g), g && fe([e], !0), p.done(function () {\n          for (r in g || fe([e]), Q.remove(e, \"fxshow\"), d) {\n            k.style(e, r, d[r]);\n          }\n        })), u = pt(g ? v[r] : 0, r, p), r in v || (v[r] = u.start, g && (u.end = u.start, u.start = 0));\n      }\n    }],\n    prefilter: function prefilter(e, t) {\n      t ? dt.prefilters.unshift(e) : dt.prefilters.push(e);\n    }\n  }), k.speed = function (e, t, n) {\n    var r = e && \"object\" == _typeof(e) ? k.extend({}, e) : {\n      complete: n || !n && t || m(e) && e,\n      duration: e,\n      easing: n && t || t && !m(t) && t\n    };\n    return k.fx.off ? r.duration = 0 : \"number\" != typeof r.duration && (r.duration in k.fx.speeds ? r.duration = k.fx.speeds[r.duration] : r.duration = k.fx.speeds._default), null != r.queue && !0 !== r.queue || (r.queue = \"fx\"), r.old = r.complete, r.complete = function () {\n      m(r.old) && r.old.call(this), r.queue && k.dequeue(this, r.queue);\n    }, r;\n  }, k.fn.extend({\n    fadeTo: function fadeTo(e, t, n, r) {\n      return this.filter(se).css(\"opacity\", 0).show().end().animate({\n        opacity: t\n      }, e, n, r);\n    },\n    animate: function animate(t, e, n, r) {\n      var i = k.isEmptyObject(t),\n          o = k.speed(e, n, r),\n          a = function a() {\n        var e = dt(this, k.extend({}, t), o);\n        (i || Q.get(this, \"finish\")) && e.stop(!0);\n      };\n\n      return a.finish = a, i || !1 === o.queue ? this.each(a) : this.queue(o.queue, a);\n    },\n    stop: function stop(i, e, o) {\n      var a = function a(e) {\n        var t = e.stop;\n        delete e.stop, t(o);\n      };\n\n      return \"string\" != typeof i && (o = e, e = i, i = void 0), e && !1 !== i && this.queue(i || \"fx\", []), this.each(function () {\n        var e = !0,\n            t = null != i && i + \"queueHooks\",\n            n = k.timers,\n            r = Q.get(this);\n        if (t) r[t] && r[t].stop && a(r[t]);else for (t in r) {\n          r[t] && r[t].stop && ut.test(t) && a(r[t]);\n        }\n\n        for (t = n.length; t--;) {\n          n[t].elem !== this || null != i && n[t].queue !== i || (n[t].anim.stop(o), e = !1, n.splice(t, 1));\n        }\n\n        !e && o || k.dequeue(this, i);\n      });\n    },\n    finish: function finish(a) {\n      return !1 !== a && (a = a || \"fx\"), this.each(function () {\n        var e,\n            t = Q.get(this),\n            n = t[a + \"queue\"],\n            r = t[a + \"queueHooks\"],\n            i = k.timers,\n            o = n ? n.length : 0;\n\n        for (t.finish = !0, k.queue(this, a, []), r && r.stop && r.stop.call(this, !0), e = i.length; e--;) {\n          i[e].elem === this && i[e].queue === a && (i[e].anim.stop(!0), i.splice(e, 1));\n        }\n\n        for (e = 0; e < o; e++) {\n          n[e] && n[e].finish && n[e].finish.call(this);\n        }\n\n        delete t.finish;\n      });\n    }\n  }), k.each([\"toggle\", \"show\", \"hide\"], function (e, r) {\n    var i = k.fn[r];\n\n    k.fn[r] = function (e, t, n) {\n      return null == e || \"boolean\" == typeof e ? i.apply(this, arguments) : this.animate(ft(r, !0), e, t, n);\n    };\n  }), k.each({\n    slideDown: ft(\"show\"),\n    slideUp: ft(\"hide\"),\n    slideToggle: ft(\"toggle\"),\n    fadeIn: {\n      opacity: \"show\"\n    },\n    fadeOut: {\n      opacity: \"hide\"\n    },\n    fadeToggle: {\n      opacity: \"toggle\"\n    }\n  }, function (e, r) {\n    k.fn[e] = function (e, t, n) {\n      return this.animate(r, e, t, n);\n    };\n  }), k.timers = [], k.fx.tick = function () {\n    var e,\n        t = 0,\n        n = k.timers;\n\n    for (rt = Date.now(); t < n.length; t++) {\n      (e = n[t])() || n[t] !== e || n.splice(t--, 1);\n    }\n\n    n.length || k.fx.stop(), rt = void 0;\n  }, k.fx.timer = function (e) {\n    k.timers.push(e), k.fx.start();\n  }, k.fx.interval = 13, k.fx.start = function () {\n    it || (it = !0, lt());\n  }, k.fx.stop = function () {\n    it = null;\n  }, k.fx.speeds = {\n    slow: 600,\n    fast: 200,\n    _default: 400\n  }, k.fn.delay = function (r, e) {\n    return r = k.fx && k.fx.speeds[r] || r, e = e || \"fx\", this.queue(e, function (e, t) {\n      var n = C.setTimeout(e, r);\n\n      t.stop = function () {\n        C.clearTimeout(n);\n      };\n    });\n  }, ot = E.createElement(\"input\"), at = E.createElement(\"select\").appendChild(E.createElement(\"option\")), ot.type = \"checkbox\", y.checkOn = \"\" !== ot.value, y.optSelected = at.selected, (ot = E.createElement(\"input\")).value = \"t\", ot.type = \"radio\", y.radioValue = \"t\" === ot.value;\n  var ht,\n      gt = k.expr.attrHandle;\n  k.fn.extend({\n    attr: function attr(e, t) {\n      return _(this, k.attr, e, t, 1 < arguments.length);\n    },\n    removeAttr: function removeAttr(e) {\n      return this.each(function () {\n        k.removeAttr(this, e);\n      });\n    }\n  }), k.extend({\n    attr: function attr(e, t, n) {\n      var r,\n          i,\n          o = e.nodeType;\n      if (3 !== o && 8 !== o && 2 !== o) return \"undefined\" == typeof e.getAttribute ? k.prop(e, t, n) : (1 === o && k.isXMLDoc(e) || (i = k.attrHooks[t.toLowerCase()] || (k.expr.match.bool.test(t) ? ht : void 0)), void 0 !== n ? null === n ? void k.removeAttr(e, t) : i && \"set\" in i && void 0 !== (r = i.set(e, n, t)) ? r : (e.setAttribute(t, n + \"\"), n) : i && \"get\" in i && null !== (r = i.get(e, t)) ? r : null == (r = k.find.attr(e, t)) ? void 0 : r);\n    },\n    attrHooks: {\n      type: {\n        set: function set(e, t) {\n          if (!y.radioValue && \"radio\" === t && A(e, \"input\")) {\n            var n = e.value;\n            return e.setAttribute(\"type\", t), n && (e.value = n), t;\n          }\n        }\n      }\n    },\n    removeAttr: function removeAttr(e, t) {\n      var n,\n          r = 0,\n          i = t && t.match(R);\n      if (i && 1 === e.nodeType) while (n = i[r++]) {\n        e.removeAttribute(n);\n      }\n    }\n  }), ht = {\n    set: function set(e, t, n) {\n      return !1 === t ? k.removeAttr(e, n) : e.setAttribute(n, n), n;\n    }\n  }, k.each(k.expr.match.bool.source.match(/\\w+/g), function (e, t) {\n    var a = gt[t] || k.find.attr;\n\n    gt[t] = function (e, t, n) {\n      var r,\n          i,\n          o = t.toLowerCase();\n      return n || (i = gt[o], gt[o] = r, r = null != a(e, t, n) ? o : null, gt[o] = i), r;\n    };\n  });\n  var vt = /^(?:input|select|textarea|button)$/i,\n      yt = /^(?:a|area)$/i;\n\n  function mt(e) {\n    return (e.match(R) || []).join(\" \");\n  }\n\n  function xt(e) {\n    return e.getAttribute && e.getAttribute(\"class\") || \"\";\n  }\n\n  function bt(e) {\n    return Array.isArray(e) ? e : \"string\" == typeof e && e.match(R) || [];\n  }\n\n  k.fn.extend({\n    prop: function prop(e, t) {\n      return _(this, k.prop, e, t, 1 < arguments.length);\n    },\n    removeProp: function removeProp(e) {\n      return this.each(function () {\n        delete this[k.propFix[e] || e];\n      });\n    }\n  }), k.extend({\n    prop: function prop(e, t, n) {\n      var r,\n          i,\n          o = e.nodeType;\n      if (3 !== o && 8 !== o && 2 !== o) return 1 === o && k.isXMLDoc(e) || (t = k.propFix[t] || t, i = k.propHooks[t]), void 0 !== n ? i && \"set\" in i && void 0 !== (r = i.set(e, n, t)) ? r : e[t] = n : i && \"get\" in i && null !== (r = i.get(e, t)) ? r : e[t];\n    },\n    propHooks: {\n      tabIndex: {\n        get: function get(e) {\n          var t = k.find.attr(e, \"tabindex\");\n          return t ? parseInt(t, 10) : vt.test(e.nodeName) || yt.test(e.nodeName) && e.href ? 0 : -1;\n        }\n      }\n    },\n    propFix: {\n      \"for\": \"htmlFor\",\n      \"class\": \"className\"\n    }\n  }), y.optSelected || (k.propHooks.selected = {\n    get: function get(e) {\n      var t = e.parentNode;\n      return t && t.parentNode && t.parentNode.selectedIndex, null;\n    },\n    set: function set(e) {\n      var t = e.parentNode;\n      t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex);\n    }\n  }), k.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n    k.propFix[this.toLowerCase()] = this;\n  }), k.fn.extend({\n    addClass: function addClass(t) {\n      var e,\n          n,\n          r,\n          i,\n          o,\n          a,\n          s,\n          u = 0;\n      if (m(t)) return this.each(function (e) {\n        k(this).addClass(t.call(this, e, xt(this)));\n      });\n      if ((e = bt(t)).length) while (n = this[u++]) {\n        if (i = xt(n), r = 1 === n.nodeType && \" \" + mt(i) + \" \") {\n          a = 0;\n\n          while (o = e[a++]) {\n            r.indexOf(\" \" + o + \" \") < 0 && (r += o + \" \");\n          }\n\n          i !== (s = mt(r)) && n.setAttribute(\"class\", s);\n        }\n      }\n      return this;\n    },\n    removeClass: function removeClass(t) {\n      var e,\n          n,\n          r,\n          i,\n          o,\n          a,\n          s,\n          u = 0;\n      if (m(t)) return this.each(function (e) {\n        k(this).removeClass(t.call(this, e, xt(this)));\n      });\n      if (!arguments.length) return this.attr(\"class\", \"\");\n      if ((e = bt(t)).length) while (n = this[u++]) {\n        if (i = xt(n), r = 1 === n.nodeType && \" \" + mt(i) + \" \") {\n          a = 0;\n\n          while (o = e[a++]) {\n            while (-1 < r.indexOf(\" \" + o + \" \")) {\n              r = r.replace(\" \" + o + \" \", \" \");\n            }\n          }\n\n          i !== (s = mt(r)) && n.setAttribute(\"class\", s);\n        }\n      }\n      return this;\n    },\n    toggleClass: function toggleClass(i, t) {\n      var o = _typeof(i),\n          a = \"string\" === o || Array.isArray(i);\n\n      return \"boolean\" == typeof t && a ? t ? this.addClass(i) : this.removeClass(i) : m(i) ? this.each(function (e) {\n        k(this).toggleClass(i.call(this, e, xt(this), t), t);\n      }) : this.each(function () {\n        var e, t, n, r;\n\n        if (a) {\n          t = 0, n = k(this), r = bt(i);\n\n          while (e = r[t++]) {\n            n.hasClass(e) ? n.removeClass(e) : n.addClass(e);\n          }\n        } else void 0 !== i && \"boolean\" !== o || ((e = xt(this)) && Q.set(this, \"__className__\", e), this.setAttribute && this.setAttribute(\"class\", e || !1 === i ? \"\" : Q.get(this, \"__className__\") || \"\"));\n      });\n    },\n    hasClass: function hasClass(e) {\n      var t,\n          n,\n          r = 0;\n      t = \" \" + e + \" \";\n\n      while (n = this[r++]) {\n        if (1 === n.nodeType && -1 < (\" \" + mt(xt(n)) + \" \").indexOf(t)) return !0;\n      }\n\n      return !1;\n    }\n  });\n  var wt = /\\r/g;\n  k.fn.extend({\n    val: function val(n) {\n      var r,\n          e,\n          i,\n          t = this[0];\n      return arguments.length ? (i = m(n), this.each(function (e) {\n        var t;\n        1 === this.nodeType && (null == (t = i ? n.call(this, e, k(this).val()) : n) ? t = \"\" : \"number\" == typeof t ? t += \"\" : Array.isArray(t) && (t = k.map(t, function (e) {\n          return null == e ? \"\" : e + \"\";\n        })), (r = k.valHooks[this.type] || k.valHooks[this.nodeName.toLowerCase()]) && \"set\" in r && void 0 !== r.set(this, t, \"value\") || (this.value = t));\n      })) : t ? (r = k.valHooks[t.type] || k.valHooks[t.nodeName.toLowerCase()]) && \"get\" in r && void 0 !== (e = r.get(t, \"value\")) ? e : \"string\" == typeof (e = t.value) ? e.replace(wt, \"\") : null == e ? \"\" : e : void 0;\n    }\n  }), k.extend({\n    valHooks: {\n      option: {\n        get: function get(e) {\n          var t = k.find.attr(e, \"value\");\n          return null != t ? t : mt(k.text(e));\n        }\n      },\n      select: {\n        get: function get(e) {\n          var t,\n              n,\n              r,\n              i = e.options,\n              o = e.selectedIndex,\n              a = \"select-one\" === e.type,\n              s = a ? null : [],\n              u = a ? o + 1 : i.length;\n\n          for (r = o < 0 ? u : a ? o : 0; r < u; r++) {\n            if (((n = i[r]).selected || r === o) && !n.disabled && (!n.parentNode.disabled || !A(n.parentNode, \"optgroup\"))) {\n              if (t = k(n).val(), a) return t;\n              s.push(t);\n            }\n          }\n\n          return s;\n        },\n        set: function set(e, t) {\n          var n,\n              r,\n              i = e.options,\n              o = k.makeArray(t),\n              a = i.length;\n\n          while (a--) {\n            ((r = i[a]).selected = -1 < k.inArray(k.valHooks.option.get(r), o)) && (n = !0);\n          }\n\n          return n || (e.selectedIndex = -1), o;\n        }\n      }\n    }\n  }), k.each([\"radio\", \"checkbox\"], function () {\n    k.valHooks[this] = {\n      set: function set(e, t) {\n        if (Array.isArray(t)) return e.checked = -1 < k.inArray(k(e).val(), t);\n      }\n    }, y.checkOn || (k.valHooks[this].get = function (e) {\n      return null === e.getAttribute(\"value\") ? \"on\" : e.value;\n    });\n  }), y.focusin = \"onfocusin\" in C;\n\n  var Tt = /^(?:focusinfocus|focusoutblur)$/,\n      Ct = function Ct(e) {\n    e.stopPropagation();\n  };\n\n  k.extend(k.event, {\n    trigger: function trigger(e, t, n, r) {\n      var i,\n          o,\n          a,\n          s,\n          u,\n          l,\n          c,\n          f,\n          p = [n || E],\n          d = v.call(e, \"type\") ? e.type : e,\n          h = v.call(e, \"namespace\") ? e.namespace.split(\".\") : [];\n\n      if (o = f = a = n = n || E, 3 !== n.nodeType && 8 !== n.nodeType && !Tt.test(d + k.event.triggered) && (-1 < d.indexOf(\".\") && (d = (h = d.split(\".\")).shift(), h.sort()), u = d.indexOf(\":\") < 0 && \"on\" + d, (e = e[k.expando] ? e : new k.Event(d, \"object\" == _typeof(e) && e)).isTrigger = r ? 2 : 3, e.namespace = h.join(\".\"), e.rnamespace = e.namespace ? new RegExp(\"(^|\\\\.)\" + h.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null, e.result = void 0, e.target || (e.target = n), t = null == t ? [e] : k.makeArray(t, [e]), c = k.event.special[d] || {}, r || !c.trigger || !1 !== c.trigger.apply(n, t))) {\n        if (!r && !c.noBubble && !x(n)) {\n          for (s = c.delegateType || d, Tt.test(s + d) || (o = o.parentNode); o; o = o.parentNode) {\n            p.push(o), a = o;\n          }\n\n          a === (n.ownerDocument || E) && p.push(a.defaultView || a.parentWindow || C);\n        }\n\n        i = 0;\n\n        while ((o = p[i++]) && !e.isPropagationStopped()) {\n          f = o, e.type = 1 < i ? s : c.bindType || d, (l = (Q.get(o, \"events\") || {})[e.type] && Q.get(o, \"handle\")) && l.apply(o, t), (l = u && o[u]) && l.apply && G(o) && (e.result = l.apply(o, t), !1 === e.result && e.preventDefault());\n        }\n\n        return e.type = d, r || e.isDefaultPrevented() || c._default && !1 !== c._default.apply(p.pop(), t) || !G(n) || u && m(n[d]) && !x(n) && ((a = n[u]) && (n[u] = null), k.event.triggered = d, e.isPropagationStopped() && f.addEventListener(d, Ct), n[d](), e.isPropagationStopped() && f.removeEventListener(d, Ct), k.event.triggered = void 0, a && (n[u] = a)), e.result;\n      }\n    },\n    simulate: function simulate(e, t, n) {\n      var r = k.extend(new k.Event(), n, {\n        type: e,\n        isSimulated: !0\n      });\n      k.event.trigger(r, null, t);\n    }\n  }), k.fn.extend({\n    trigger: function trigger(e, t) {\n      return this.each(function () {\n        k.event.trigger(e, t, this);\n      });\n    },\n    triggerHandler: function triggerHandler(e, t) {\n      var n = this[0];\n      if (n) return k.event.trigger(e, t, n, !0);\n    }\n  }), y.focusin || k.each({\n    focus: \"focusin\",\n    blur: \"focusout\"\n  }, function (n, r) {\n    var i = function i(e) {\n      k.event.simulate(r, e.target, k.event.fix(e));\n    };\n\n    k.event.special[r] = {\n      setup: function setup() {\n        var e = this.ownerDocument || this,\n            t = Q.access(e, r);\n        t || e.addEventListener(n, i, !0), Q.access(e, r, (t || 0) + 1);\n      },\n      teardown: function teardown() {\n        var e = this.ownerDocument || this,\n            t = Q.access(e, r) - 1;\n        t ? Q.access(e, r, t) : (e.removeEventListener(n, i, !0), Q.remove(e, r));\n      }\n    };\n  });\n  var Et = C.location,\n      kt = Date.now(),\n      St = /\\?/;\n\n  k.parseXML = function (e) {\n    var t;\n    if (!e || \"string\" != typeof e) return null;\n\n    try {\n      t = new C.DOMParser().parseFromString(e, \"text/xml\");\n    } catch (e) {\n      t = void 0;\n    }\n\n    return t && !t.getElementsByTagName(\"parsererror\").length || k.error(\"Invalid XML: \" + e), t;\n  };\n\n  var Nt = /\\[\\]$/,\n      At = /\\r?\\n/g,\n      Dt = /^(?:submit|button|image|reset|file)$/i,\n      jt = /^(?:input|select|textarea|keygen)/i;\n\n  function qt(n, e, r, i) {\n    var t;\n    if (Array.isArray(e)) k.each(e, function (e, t) {\n      r || Nt.test(n) ? i(n, t) : qt(n + \"[\" + (\"object\" == _typeof(t) && null != t ? e : \"\") + \"]\", t, r, i);\n    });else if (r || \"object\" !== w(e)) i(n, e);else for (t in e) {\n      qt(n + \"[\" + t + \"]\", e[t], r, i);\n    }\n  }\n\n  k.param = function (e, t) {\n    var n,\n        r = [],\n        i = function i(e, t) {\n      var n = m(t) ? t() : t;\n      r[r.length] = encodeURIComponent(e) + \"=\" + encodeURIComponent(null == n ? \"\" : n);\n    };\n\n    if (null == e) return \"\";\n    if (Array.isArray(e) || e.jquery && !k.isPlainObject(e)) k.each(e, function () {\n      i(this.name, this.value);\n    });else for (n in e) {\n      qt(n, e[n], t, i);\n    }\n    return r.join(\"&\");\n  }, k.fn.extend({\n    serialize: function serialize() {\n      return k.param(this.serializeArray());\n    },\n    serializeArray: function serializeArray() {\n      return this.map(function () {\n        var e = k.prop(this, \"elements\");\n        return e ? k.makeArray(e) : this;\n      }).filter(function () {\n        var e = this.type;\n        return this.name && !k(this).is(\":disabled\") && jt.test(this.nodeName) && !Dt.test(e) && (this.checked || !pe.test(e));\n      }).map(function (e, t) {\n        var n = k(this).val();\n        return null == n ? null : Array.isArray(n) ? k.map(n, function (e) {\n          return {\n            name: t.name,\n            value: e.replace(At, \"\\r\\n\")\n          };\n        }) : {\n          name: t.name,\n          value: n.replace(At, \"\\r\\n\")\n        };\n      }).get();\n    }\n  });\n  var Lt = /%20/g,\n      Ht = /#.*$/,\n      Ot = /([?&])_=[^&]*/,\n      Pt = /^(.*?):[ \\t]*([^\\r\\n]*)$/gm,\n      Rt = /^(?:GET|HEAD)$/,\n      Mt = /^\\/\\//,\n      It = {},\n      Wt = {},\n      $t = \"*/\".concat(\"*\"),\n      Ft = E.createElement(\"a\");\n\n  function Bt(o) {\n    return function (e, t) {\n      \"string\" != typeof e && (t = e, e = \"*\");\n      var n,\n          r = 0,\n          i = e.toLowerCase().match(R) || [];\n      if (m(t)) while (n = i[r++]) {\n        \"+\" === n[0] ? (n = n.slice(1) || \"*\", (o[n] = o[n] || []).unshift(t)) : (o[n] = o[n] || []).push(t);\n      }\n    };\n  }\n\n  function _t(t, i, o, a) {\n    var s = {},\n        u = t === Wt;\n\n    function l(e) {\n      var r;\n      return s[e] = !0, k.each(t[e] || [], function (e, t) {\n        var n = t(i, o, a);\n        return \"string\" != typeof n || u || s[n] ? u ? !(r = n) : void 0 : (i.dataTypes.unshift(n), l(n), !1);\n      }), r;\n    }\n\n    return l(i.dataTypes[0]) || !s[\"*\"] && l(\"*\");\n  }\n\n  function zt(e, t) {\n    var n,\n        r,\n        i = k.ajaxSettings.flatOptions || {};\n\n    for (n in t) {\n      void 0 !== t[n] && ((i[n] ? e : r || (r = {}))[n] = t[n]);\n    }\n\n    return r && k.extend(!0, e, r), e;\n  }\n\n  Ft.href = Et.href, k.extend({\n    active: 0,\n    lastModified: {},\n    etag: {},\n    ajaxSettings: {\n      url: Et.href,\n      type: \"GET\",\n      isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Et.protocol),\n      global: !0,\n      processData: !0,\n      async: !0,\n      contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n      accepts: {\n        \"*\": $t,\n        text: \"text/plain\",\n        html: \"text/html\",\n        xml: \"application/xml, text/xml\",\n        json: \"application/json, text/javascript\"\n      },\n      contents: {\n        xml: /\\bxml\\b/,\n        html: /\\bhtml/,\n        json: /\\bjson\\b/\n      },\n      responseFields: {\n        xml: \"responseXML\",\n        text: \"responseText\",\n        json: \"responseJSON\"\n      },\n      converters: {\n        \"* text\": String,\n        \"text html\": !0,\n        \"text json\": JSON.parse,\n        \"text xml\": k.parseXML\n      },\n      flatOptions: {\n        url: !0,\n        context: !0\n      }\n    },\n    ajaxSetup: function ajaxSetup(e, t) {\n      return t ? zt(zt(e, k.ajaxSettings), t) : zt(k.ajaxSettings, e);\n    },\n    ajaxPrefilter: Bt(It),\n    ajaxTransport: Bt(Wt),\n    ajax: function ajax(e, t) {\n      \"object\" == _typeof(e) && (t = e, e = void 0), t = t || {};\n      var c,\n          f,\n          p,\n          n,\n          d,\n          r,\n          h,\n          g,\n          i,\n          o,\n          v = k.ajaxSetup({}, t),\n          y = v.context || v,\n          m = v.context && (y.nodeType || y.jquery) ? k(y) : k.event,\n          x = k.Deferred(),\n          b = k.Callbacks(\"once memory\"),\n          w = v.statusCode || {},\n          a = {},\n          s = {},\n          u = \"canceled\",\n          T = {\n        readyState: 0,\n        getResponseHeader: function getResponseHeader(e) {\n          var t;\n\n          if (h) {\n            if (!n) {\n              n = {};\n\n              while (t = Pt.exec(p)) {\n                n[t[1].toLowerCase() + \" \"] = (n[t[1].toLowerCase() + \" \"] || []).concat(t[2]);\n              }\n            }\n\n            t = n[e.toLowerCase() + \" \"];\n          }\n\n          return null == t ? null : t.join(\", \");\n        },\n        getAllResponseHeaders: function getAllResponseHeaders() {\n          return h ? p : null;\n        },\n        setRequestHeader: function setRequestHeader(e, t) {\n          return null == h && (e = s[e.toLowerCase()] = s[e.toLowerCase()] || e, a[e] = t), this;\n        },\n        overrideMimeType: function overrideMimeType(e) {\n          return null == h && (v.mimeType = e), this;\n        },\n        statusCode: function statusCode(e) {\n          var t;\n          if (e) if (h) T.always(e[T.status]);else for (t in e) {\n            w[t] = [w[t], e[t]];\n          }\n          return this;\n        },\n        abort: function abort(e) {\n          var t = e || u;\n          return c && c.abort(t), l(0, t), this;\n        }\n      };\n\n      if (x.promise(T), v.url = ((e || v.url || Et.href) + \"\").replace(Mt, Et.protocol + \"//\"), v.type = t.method || t.type || v.method || v.type, v.dataTypes = (v.dataType || \"*\").toLowerCase().match(R) || [\"\"], null == v.crossDomain) {\n        r = E.createElement(\"a\");\n\n        try {\n          r.href = v.url, r.href = r.href, v.crossDomain = Ft.protocol + \"//\" + Ft.host != r.protocol + \"//\" + r.host;\n        } catch (e) {\n          v.crossDomain = !0;\n        }\n      }\n\n      if (v.data && v.processData && \"string\" != typeof v.data && (v.data = k.param(v.data, v.traditional)), _t(It, v, t, T), h) return T;\n\n      for (i in (g = k.event && v.global) && 0 == k.active++ && k.event.trigger(\"ajaxStart\"), v.type = v.type.toUpperCase(), v.hasContent = !Rt.test(v.type), f = v.url.replace(Ht, \"\"), v.hasContent ? v.data && v.processData && 0 === (v.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && (v.data = v.data.replace(Lt, \"+\")) : (o = v.url.slice(f.length), v.data && (v.processData || \"string\" == typeof v.data) && (f += (St.test(f) ? \"&\" : \"?\") + v.data, delete v.data), !1 === v.cache && (f = f.replace(Ot, \"$1\"), o = (St.test(f) ? \"&\" : \"?\") + \"_=\" + kt++ + o), v.url = f + o), v.ifModified && (k.lastModified[f] && T.setRequestHeader(\"If-Modified-Since\", k.lastModified[f]), k.etag[f] && T.setRequestHeader(\"If-None-Match\", k.etag[f])), (v.data && v.hasContent && !1 !== v.contentType || t.contentType) && T.setRequestHeader(\"Content-Type\", v.contentType), T.setRequestHeader(\"Accept\", v.dataTypes[0] && v.accepts[v.dataTypes[0]] ? v.accepts[v.dataTypes[0]] + (\"*\" !== v.dataTypes[0] ? \", \" + $t + \"; q=0.01\" : \"\") : v.accepts[\"*\"]), v.headers) {\n        T.setRequestHeader(i, v.headers[i]);\n      }\n\n      if (v.beforeSend && (!1 === v.beforeSend.call(y, T, v) || h)) return T.abort();\n\n      if (u = \"abort\", b.add(v.complete), T.done(v.success), T.fail(v.error), c = _t(Wt, v, t, T)) {\n        if (T.readyState = 1, g && m.trigger(\"ajaxSend\", [T, v]), h) return T;\n        v.async && 0 < v.timeout && (d = C.setTimeout(function () {\n          T.abort(\"timeout\");\n        }, v.timeout));\n\n        try {\n          h = !1, c.send(a, l);\n        } catch (e) {\n          if (h) throw e;\n          l(-1, e);\n        }\n      } else l(-1, \"No Transport\");\n\n      function l(e, t, n, r) {\n        var i,\n            o,\n            a,\n            s,\n            u,\n            l = t;\n        h || (h = !0, d && C.clearTimeout(d), c = void 0, p = r || \"\", T.readyState = 0 < e ? 4 : 0, i = 200 <= e && e < 300 || 304 === e, n && (s = function (e, t, n) {\n          var r,\n              i,\n              o,\n              a,\n              s = e.contents,\n              u = e.dataTypes;\n\n          while (\"*\" === u[0]) {\n            u.shift(), void 0 === r && (r = e.mimeType || t.getResponseHeader(\"Content-Type\"));\n          }\n\n          if (r) for (i in s) {\n            if (s[i] && s[i].test(r)) {\n              u.unshift(i);\n              break;\n            }\n          }\n          if (u[0] in n) o = u[0];else {\n            for (i in n) {\n              if (!u[0] || e.converters[i + \" \" + u[0]]) {\n                o = i;\n                break;\n              }\n\n              a || (a = i);\n            }\n\n            o = o || a;\n          }\n          if (o) return o !== u[0] && u.unshift(o), n[o];\n        }(v, T, n)), s = function (e, t, n, r) {\n          var i,\n              o,\n              a,\n              s,\n              u,\n              l = {},\n              c = e.dataTypes.slice();\n          if (c[1]) for (a in e.converters) {\n            l[a.toLowerCase()] = e.converters[a];\n          }\n          o = c.shift();\n\n          while (o) {\n            if (e.responseFields[o] && (n[e.responseFields[o]] = t), !u && r && e.dataFilter && (t = e.dataFilter(t, e.dataType)), u = o, o = c.shift()) if (\"*\" === o) o = u;else if (\"*\" !== u && u !== o) {\n              if (!(a = l[u + \" \" + o] || l[\"* \" + o])) for (i in l) {\n                if ((s = i.split(\" \"))[1] === o && (a = l[u + \" \" + s[0]] || l[\"* \" + s[0]])) {\n                  !0 === a ? a = l[i] : !0 !== l[i] && (o = s[0], c.unshift(s[1]));\n                  break;\n                }\n              }\n              if (!0 !== a) if (a && e[\"throws\"]) t = a(t);else try {\n                t = a(t);\n              } catch (e) {\n                return {\n                  state: \"parsererror\",\n                  error: a ? e : \"No conversion from \" + u + \" to \" + o\n                };\n              }\n            }\n          }\n\n          return {\n            state: \"success\",\n            data: t\n          };\n        }(v, s, T, i), i ? (v.ifModified && ((u = T.getResponseHeader(\"Last-Modified\")) && (k.lastModified[f] = u), (u = T.getResponseHeader(\"etag\")) && (k.etag[f] = u)), 204 === e || \"HEAD\" === v.type ? l = \"nocontent\" : 304 === e ? l = \"notmodified\" : (l = s.state, o = s.data, i = !(a = s.error))) : (a = l, !e && l || (l = \"error\", e < 0 && (e = 0))), T.status = e, T.statusText = (t || l) + \"\", i ? x.resolveWith(y, [o, l, T]) : x.rejectWith(y, [T, l, a]), T.statusCode(w), w = void 0, g && m.trigger(i ? \"ajaxSuccess\" : \"ajaxError\", [T, v, i ? o : a]), b.fireWith(y, [T, l]), g && (m.trigger(\"ajaxComplete\", [T, v]), --k.active || k.event.trigger(\"ajaxStop\")));\n      }\n\n      return T;\n    },\n    getJSON: function getJSON(e, t, n) {\n      return k.get(e, t, n, \"json\");\n    },\n    getScript: function getScript(e, t) {\n      return k.get(e, void 0, t, \"script\");\n    }\n  }), k.each([\"get\", \"post\"], function (e, i) {\n    k[i] = function (e, t, n, r) {\n      return m(t) && (r = r || n, n = t, t = void 0), k.ajax(k.extend({\n        url: e,\n        type: i,\n        dataType: r,\n        data: t,\n        success: n\n      }, k.isPlainObject(e) && e));\n    };\n  }), k._evalUrl = function (e, t) {\n    return k.ajax({\n      url: e,\n      type: \"GET\",\n      dataType: \"script\",\n      cache: !0,\n      async: !1,\n      global: !1,\n      converters: {\n        \"text script\": function textScript() {}\n      },\n      dataFilter: function dataFilter(e) {\n        k.globalEval(e, t);\n      }\n    });\n  }, k.fn.extend({\n    wrapAll: function wrapAll(e) {\n      var t;\n      return this[0] && (m(e) && (e = e.call(this[0])), t = k(e, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && t.insertBefore(this[0]), t.map(function () {\n        var e = this;\n\n        while (e.firstElementChild) {\n          e = e.firstElementChild;\n        }\n\n        return e;\n      }).append(this)), this;\n    },\n    wrapInner: function wrapInner(n) {\n      return m(n) ? this.each(function (e) {\n        k(this).wrapInner(n.call(this, e));\n      }) : this.each(function () {\n        var e = k(this),\n            t = e.contents();\n        t.length ? t.wrapAll(n) : e.append(n);\n      });\n    },\n    wrap: function wrap(t) {\n      var n = m(t);\n      return this.each(function (e) {\n        k(this).wrapAll(n ? t.call(this, e) : t);\n      });\n    },\n    unwrap: function unwrap(e) {\n      return this.parent(e).not(\"body\").each(function () {\n        k(this).replaceWith(this.childNodes);\n      }), this;\n    }\n  }), k.expr.pseudos.hidden = function (e) {\n    return !k.expr.pseudos.visible(e);\n  }, k.expr.pseudos.visible = function (e) {\n    return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length);\n  }, k.ajaxSettings.xhr = function () {\n    try {\n      return new C.XMLHttpRequest();\n    } catch (e) {}\n  };\n  var Ut = {\n    0: 200,\n    1223: 204\n  },\n      Xt = k.ajaxSettings.xhr();\n  y.cors = !!Xt && \"withCredentials\" in Xt, y.ajax = Xt = !!Xt, k.ajaxTransport(function (i) {\n    var _o, a;\n\n    if (y.cors || Xt && !i.crossDomain) return {\n      send: function send(e, t) {\n        var n,\n            r = i.xhr();\n        if (r.open(i.type, i.url, i.async, i.username, i.password), i.xhrFields) for (n in i.xhrFields) {\n          r[n] = i.xhrFields[n];\n        }\n\n        for (n in i.mimeType && r.overrideMimeType && r.overrideMimeType(i.mimeType), i.crossDomain || e[\"X-Requested-With\"] || (e[\"X-Requested-With\"] = \"XMLHttpRequest\"), e) {\n          r.setRequestHeader(n, e[n]);\n        }\n\n        _o = function o(e) {\n          return function () {\n            _o && (_o = a = r.onload = r.onerror = r.onabort = r.ontimeout = r.onreadystatechange = null, \"abort\" === e ? r.abort() : \"error\" === e ? \"number\" != typeof r.status ? t(0, \"error\") : t(r.status, r.statusText) : t(Ut[r.status] || r.status, r.statusText, \"text\" !== (r.responseType || \"text\") || \"string\" != typeof r.responseText ? {\n              binary: r.response\n            } : {\n              text: r.responseText\n            }, r.getAllResponseHeaders()));\n          };\n        }, r.onload = _o(), a = r.onerror = r.ontimeout = _o(\"error\"), void 0 !== r.onabort ? r.onabort = a : r.onreadystatechange = function () {\n          4 === r.readyState && C.setTimeout(function () {\n            _o && a();\n          });\n        }, _o = _o(\"abort\");\n\n        try {\n          r.send(i.hasContent && i.data || null);\n        } catch (e) {\n          if (_o) throw e;\n        }\n      },\n      abort: function abort() {\n        _o && _o();\n      }\n    };\n  }), k.ajaxPrefilter(function (e) {\n    e.crossDomain && (e.contents.script = !1);\n  }), k.ajaxSetup({\n    accepts: {\n      script: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\n    },\n    contents: {\n      script: /\\b(?:java|ecma)script\\b/\n    },\n    converters: {\n      \"text script\": function textScript(e) {\n        return k.globalEval(e), e;\n      }\n    }\n  }), k.ajaxPrefilter(\"script\", function (e) {\n    void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = \"GET\");\n  }), k.ajaxTransport(\"script\", function (n) {\n    var r, _i;\n\n    if (n.crossDomain || n.scriptAttrs) return {\n      send: function send(e, t) {\n        r = k(\"<script>\").attr(n.scriptAttrs || {}).prop({\n          charset: n.scriptCharset,\n          src: n.url\n        }).on(\"load error\", _i = function i(e) {\n          r.remove(), _i = null, e && t(\"error\" === e.type ? 404 : 200, e.type);\n        }), E.head.appendChild(r[0]);\n      },\n      abort: function abort() {\n        _i && _i();\n      }\n    };\n  });\n  var Vt,\n      Gt = [],\n      Yt = /(=)\\?(?=&|$)|\\?\\?/;\n  k.ajaxSetup({\n    jsonp: \"callback\",\n    jsonpCallback: function jsonpCallback() {\n      var e = Gt.pop() || k.expando + \"_\" + kt++;\n      return this[e] = !0, e;\n    }\n  }), k.ajaxPrefilter(\"json jsonp\", function (e, t, n) {\n    var r,\n        i,\n        o,\n        a = !1 !== e.jsonp && (Yt.test(e.url) ? \"url\" : \"string\" == typeof e.data && 0 === (e.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && Yt.test(e.data) && \"data\");\n    if (a || \"jsonp\" === e.dataTypes[0]) return r = e.jsonpCallback = m(e.jsonpCallback) ? e.jsonpCallback() : e.jsonpCallback, a ? e[a] = e[a].replace(Yt, \"$1\" + r) : !1 !== e.jsonp && (e.url += (St.test(e.url) ? \"&\" : \"?\") + e.jsonp + \"=\" + r), e.converters[\"script json\"] = function () {\n      return o || k.error(r + \" was not called\"), o[0];\n    }, e.dataTypes[0] = \"json\", i = C[r], C[r] = function () {\n      o = arguments;\n    }, n.always(function () {\n      void 0 === i ? k(C).removeProp(r) : C[r] = i, e[r] && (e.jsonpCallback = t.jsonpCallback, Gt.push(r)), o && m(i) && i(o[0]), o = i = void 0;\n    }), \"script\";\n  }), y.createHTMLDocument = ((Vt = E.implementation.createHTMLDocument(\"\").body).innerHTML = \"<form></form><form></form>\", 2 === Vt.childNodes.length), k.parseHTML = function (e, t, n) {\n    return \"string\" != typeof e ? [] : (\"boolean\" == typeof t && (n = t, t = !1), t || (y.createHTMLDocument ? ((r = (t = E.implementation.createHTMLDocument(\"\")).createElement(\"base\")).href = E.location.href, t.head.appendChild(r)) : t = E), o = !n && [], (i = D.exec(e)) ? [t.createElement(i[1])] : (i = we([e], t, o), o && o.length && k(o).remove(), k.merge([], i.childNodes)));\n    var r, i, o;\n  }, k.fn.load = function (e, t, n) {\n    var r,\n        i,\n        o,\n        a = this,\n        s = e.indexOf(\" \");\n    return -1 < s && (r = mt(e.slice(s)), e = e.slice(0, s)), m(t) ? (n = t, t = void 0) : t && \"object\" == _typeof(t) && (i = \"POST\"), 0 < a.length && k.ajax({\n      url: e,\n      type: i || \"GET\",\n      dataType: \"html\",\n      data: t\n    }).done(function (e) {\n      o = arguments, a.html(r ? k(\"<div>\").append(k.parseHTML(e)).find(r) : e);\n    }).always(n && function (e, t) {\n      a.each(function () {\n        n.apply(this, o || [e.responseText, t, e]);\n      });\n    }), this;\n  }, k.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (e, t) {\n    k.fn[t] = function (e) {\n      return this.on(t, e);\n    };\n  }), k.expr.pseudos.animated = function (t) {\n    return k.grep(k.timers, function (e) {\n      return t === e.elem;\n    }).length;\n  }, k.offset = {\n    setOffset: function setOffset(e, t, n) {\n      var r,\n          i,\n          o,\n          a,\n          s,\n          u,\n          l = k.css(e, \"position\"),\n          c = k(e),\n          f = {};\n      \"static\" === l && (e.style.position = \"relative\"), s = c.offset(), o = k.css(e, \"top\"), u = k.css(e, \"left\"), (\"absolute\" === l || \"fixed\" === l) && -1 < (o + u).indexOf(\"auto\") ? (a = (r = c.position()).top, i = r.left) : (a = parseFloat(o) || 0, i = parseFloat(u) || 0), m(t) && (t = t.call(e, n, k.extend({}, s))), null != t.top && (f.top = t.top - s.top + a), null != t.left && (f.left = t.left - s.left + i), \"using\" in t ? t.using.call(e, f) : c.css(f);\n    }\n  }, k.fn.extend({\n    offset: function offset(t) {\n      if (arguments.length) return void 0 === t ? this : this.each(function (e) {\n        k.offset.setOffset(this, t, e);\n      });\n      var e,\n          n,\n          r = this[0];\n      return r ? r.getClientRects().length ? (e = r.getBoundingClientRect(), n = r.ownerDocument.defaultView, {\n        top: e.top + n.pageYOffset,\n        left: e.left + n.pageXOffset\n      }) : {\n        top: 0,\n        left: 0\n      } : void 0;\n    },\n    position: function position() {\n      if (this[0]) {\n        var e,\n            t,\n            n,\n            r = this[0],\n            i = {\n          top: 0,\n          left: 0\n        };\n        if (\"fixed\" === k.css(r, \"position\")) t = r.getBoundingClientRect();else {\n          t = this.offset(), n = r.ownerDocument, e = r.offsetParent || n.documentElement;\n\n          while (e && (e === n.body || e === n.documentElement) && \"static\" === k.css(e, \"position\")) {\n            e = e.parentNode;\n          }\n\n          e && e !== r && 1 === e.nodeType && ((i = k(e).offset()).top += k.css(e, \"borderTopWidth\", !0), i.left += k.css(e, \"borderLeftWidth\", !0));\n        }\n        return {\n          top: t.top - i.top - k.css(r, \"marginTop\", !0),\n          left: t.left - i.left - k.css(r, \"marginLeft\", !0)\n        };\n      }\n    },\n    offsetParent: function offsetParent() {\n      return this.map(function () {\n        var e = this.offsetParent;\n\n        while (e && \"static\" === k.css(e, \"position\")) {\n          e = e.offsetParent;\n        }\n\n        return e || ie;\n      });\n    }\n  }), k.each({\n    scrollLeft: \"pageXOffset\",\n    scrollTop: \"pageYOffset\"\n  }, function (t, i) {\n    var o = \"pageYOffset\" === i;\n\n    k.fn[t] = function (e) {\n      return _(this, function (e, t, n) {\n        var r;\n        if (x(e) ? r = e : 9 === e.nodeType && (r = e.defaultView), void 0 === n) return r ? r[i] : e[t];\n        r ? r.scrollTo(o ? r.pageXOffset : n, o ? n : r.pageYOffset) : e[t] = n;\n      }, t, e, arguments.length);\n    };\n  }), k.each([\"top\", \"left\"], function (e, n) {\n    k.cssHooks[n] = ze(y.pixelPosition, function (e, t) {\n      if (t) return t = _e(e, n), $e.test(t) ? k(e).position()[n] + \"px\" : t;\n    });\n  }), k.each({\n    Height: \"height\",\n    Width: \"width\"\n  }, function (a, s) {\n    k.each({\n      padding: \"inner\" + a,\n      content: s,\n      \"\": \"outer\" + a\n    }, function (r, o) {\n      k.fn[o] = function (e, t) {\n        var n = arguments.length && (r || \"boolean\" != typeof e),\n            i = r || (!0 === e || !0 === t ? \"margin\" : \"border\");\n        return _(this, function (e, t, n) {\n          var r;\n          return x(e) ? 0 === o.indexOf(\"outer\") ? e[\"inner\" + a] : e.document.documentElement[\"client\" + a] : 9 === e.nodeType ? (r = e.documentElement, Math.max(e.body[\"scroll\" + a], r[\"scroll\" + a], e.body[\"offset\" + a], r[\"offset\" + a], r[\"client\" + a])) : void 0 === n ? k.css(e, t, i) : k.style(e, t, n, i);\n        }, s, n ? e : void 0, n);\n      };\n    });\n  }), k.each(\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\".split(\" \"), function (e, n) {\n    k.fn[n] = function (e, t) {\n      return 0 < arguments.length ? this.on(n, null, e, t) : this.trigger(n);\n    };\n  }), k.fn.extend({\n    hover: function hover(e, t) {\n      return this.mouseenter(e).mouseleave(t || e);\n    }\n  }), k.fn.extend({\n    bind: function bind(e, t, n) {\n      return this.on(e, null, t, n);\n    },\n    unbind: function unbind(e, t) {\n      return this.off(e, null, t);\n    },\n    delegate: function delegate(e, t, n, r) {\n      return this.on(t, e, n, r);\n    },\n    undelegate: function undelegate(e, t, n) {\n      return 1 === arguments.length ? this.off(e, \"**\") : this.off(t, e || \"**\", n);\n    }\n  }), k.proxy = function (e, t) {\n    var n, r, i;\n    if (\"string\" == typeof t && (n = e[t], t = e, e = n), m(e)) return r = s.call(arguments, 2), (i = function i() {\n      return e.apply(t || this, r.concat(s.call(arguments)));\n    }).guid = e.guid = e.guid || k.guid++, i;\n  }, k.holdReady = function (e) {\n    e ? k.readyWait++ : k.ready(!0);\n  }, k.isArray = Array.isArray, k.parseJSON = JSON.parse, k.nodeName = A, k.isFunction = m, k.isWindow = x, k.camelCase = V, k.type = w, k.now = Date.now, k.isNumeric = function (e) {\n    var t = k.type(e);\n    return (\"number\" === t || \"string\" === t) && !isNaN(e - parseFloat(e));\n  },  true && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return k;\n  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  var Qt = C.jQuery,\n      Jt = C.$;\n  return k.noConflict = function (e) {\n    return C.$ === k && (C.$ = Jt), e && C.jQuery === k && (C.jQuery = Qt), k;\n  }, e || (C.jQuery = C.$ = k), k;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/plugins/jquery/jquery.min.js\n");

/***/ }),

/***/ "./node_modules/jquery-validation/dist/jquery.validate.js":
/*!****************************************************************!*\
  !*** ./node_modules/jquery-validation/dist/jquery.validate.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\r\n * jQuery Validation Plugin v1.19.3\r\n *\r\n * https://jqueryvalidation.org/\r\n *\r\n * Copyright (c) 2021 Jörn Zaefferer\r\n * Released under the MIT license\r\n */\r\n(function( factory ) {\r\n\tif ( true ) {\r\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t} else {}\r\n}(function( $ ) {\r\n\r\n$.extend( $.fn, {\n\n\t// https://jqueryvalidation.org/validate/\n\tvalidate: function( options ) {\n\n\t\t// If nothing is selected, return nothing; can't chain anyway\n\t\tif ( !this.length ) {\n\t\t\tif ( options && options.debug && window.console ) {\n\t\t\t\tconsole.warn( \"Nothing selected, can't validate, returning nothing.\" );\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if a validator for this form was already created\n\t\tvar validator = $.data( this[ 0 ], \"validator\" );\n\t\tif ( validator ) {\n\t\t\treturn validator;\n\t\t}\n\n\t\t// Add novalidate tag if HTML5.\n\t\tthis.attr( \"novalidate\", \"novalidate\" );\n\n\t\tvalidator = new $.validator( options, this[ 0 ] );\n\t\t$.data( this[ 0 ], \"validator\", validator );\n\n\t\tif ( validator.settings.onsubmit ) {\n\n\t\t\tthis.on( \"click.validate\", \":submit\", function( event ) {\n\n\t\t\t\t// Track the used submit button to properly handle scripted\n\t\t\t\t// submits later.\n\t\t\t\tvalidator.submitButton = event.currentTarget;\n\n\t\t\t\t// Allow suppressing validation by adding a cancel class to the submit button\n\t\t\t\tif ( $( this ).hasClass( \"cancel\" ) ) {\n\t\t\t\t\tvalidator.cancelSubmit = true;\n\t\t\t\t}\n\n\t\t\t\t// Allow suppressing validation by adding the html5 formnovalidate attribute to the submit button\n\t\t\t\tif ( $( this ).attr( \"formnovalidate\" ) !== undefined ) {\n\t\t\t\t\tvalidator.cancelSubmit = true;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// Validate the form on submit\n\t\t\tthis.on( \"submit.validate\", function( event ) {\n\t\t\t\tif ( validator.settings.debug ) {\n\n\t\t\t\t\t// Prevent form submit to be able to see console output\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\n\t\t\t\tfunction handle() {\n\t\t\t\t\tvar hidden, result;\n\n\t\t\t\t\t// Insert a hidden input as a replacement for the missing submit button\n\t\t\t\t\t// The hidden input is inserted in two cases:\n\t\t\t\t\t//   - A user defined a `submitHandler`\n\t\t\t\t\t//   - There was a pending request due to `remote` method and `stopRequest()`\n\t\t\t\t\t//     was called to submit the form in case it's valid\n\t\t\t\t\tif ( validator.submitButton && ( validator.settings.submitHandler || validator.formSubmitted ) ) {\n\t\t\t\t\t\thidden = $( \"<input type='hidden'/>\" )\n\t\t\t\t\t\t\t.attr( \"name\", validator.submitButton.name )\n\t\t\t\t\t\t\t.val( $( validator.submitButton ).val() )\n\t\t\t\t\t\t\t.appendTo( validator.currentForm );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( validator.settings.submitHandler && !validator.settings.debug ) {\n\t\t\t\t\t\tresult = validator.settings.submitHandler.call( validator, validator.currentForm, event );\n\t\t\t\t\t\tif ( hidden ) {\n\n\t\t\t\t\t\t\t// And clean up afterwards; thanks to no-block-scope, hidden can be referenced\n\t\t\t\t\t\t\thidden.remove();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( result !== undefined ) {\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// Prevent submit for invalid forms or custom submit handlers\n\t\t\t\tif ( validator.cancelSubmit ) {\n\t\t\t\t\tvalidator.cancelSubmit = false;\n\t\t\t\t\treturn handle();\n\t\t\t\t}\n\t\t\t\tif ( validator.form() ) {\n\t\t\t\t\tif ( validator.pendingRequest ) {\n\t\t\t\t\t\tvalidator.formSubmitted = true;\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\treturn handle();\n\t\t\t\t} else {\n\t\t\t\t\tvalidator.focusInvalid();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn validator;\n\t},\n\n\t// https://jqueryvalidation.org/valid/\n\tvalid: function() {\n\t\tvar valid, validator, errorList;\n\n\t\tif ( $( this[ 0 ] ).is( \"form\" ) ) {\n\t\t\tvalid = this.validate().form();\n\t\t} else {\n\t\t\terrorList = [];\n\t\t\tvalid = true;\n\t\t\tvalidator = $( this[ 0 ].form ).validate();\n\t\t\tthis.each( function() {\n\t\t\t\tvalid = validator.element( this ) && valid;\n\t\t\t\tif ( !valid ) {\n\t\t\t\t\terrorList = errorList.concat( validator.errorList );\n\t\t\t\t}\n\t\t\t} );\n\t\t\tvalidator.errorList = errorList;\n\t\t}\n\t\treturn valid;\n\t},\n\n\t// https://jqueryvalidation.org/rules/\n\trules: function( command, argument ) {\n\t\tvar element = this[ 0 ],\n\t\t\tisContentEditable = typeof this.attr( \"contenteditable\" ) !== \"undefined\" && this.attr( \"contenteditable\" ) !== \"false\",\n\t\t\tsettings, staticRules, existingRules, data, param, filtered;\n\n\t\t// If nothing is selected, return empty object; can't chain anyway\n\t\tif ( element == null ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !element.form && isContentEditable ) {\n\t\t\telement.form = this.closest( \"form\" )[ 0 ];\n\t\t\telement.name = this.attr( \"name\" );\n\t\t}\n\n\t\tif ( element.form == null ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( command ) {\n\t\t\tsettings = $.data( element.form, \"validator\" ).settings;\n\t\t\tstaticRules = settings.rules;\n\t\t\texistingRules = $.validator.staticRules( element );\n\t\t\tswitch ( command ) {\n\t\t\tcase \"add\":\n\t\t\t\t$.extend( existingRules, $.validator.normalizeRule( argument ) );\n\n\t\t\t\t// Remove messages from rules, but allow them to be set separately\n\t\t\t\tdelete existingRules.messages;\n\t\t\t\tstaticRules[ element.name ] = existingRules;\n\t\t\t\tif ( argument.messages ) {\n\t\t\t\t\tsettings.messages[ element.name ] = $.extend( settings.messages[ element.name ], argument.messages );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"remove\":\n\t\t\t\tif ( !argument ) {\n\t\t\t\t\tdelete staticRules[ element.name ];\n\t\t\t\t\treturn existingRules;\n\t\t\t\t}\n\t\t\t\tfiltered = {};\n\t\t\t\t$.each( argument.split( /\\s/ ), function( index, method ) {\n\t\t\t\t\tfiltered[ method ] = existingRules[ method ];\n\t\t\t\t\tdelete existingRules[ method ];\n\t\t\t\t} );\n\t\t\t\treturn filtered;\n\t\t\t}\n\t\t}\n\n\t\tdata = $.validator.normalizeRules(\n\t\t$.extend(\n\t\t\t{},\n\t\t\t$.validator.classRules( element ),\n\t\t\t$.validator.attributeRules( element ),\n\t\t\t$.validator.dataRules( element ),\n\t\t\t$.validator.staticRules( element )\n\t\t), element );\n\n\t\t// Make sure required is at front\n\t\tif ( data.required ) {\n\t\t\tparam = data.required;\n\t\t\tdelete data.required;\n\t\t\tdata = $.extend( { required: param }, data );\n\t\t}\n\n\t\t// Make sure remote is at back\n\t\tif ( data.remote ) {\n\t\t\tparam = data.remote;\n\t\t\tdelete data.remote;\n\t\t\tdata = $.extend( data, { remote: param } );\n\t\t}\n\n\t\treturn data;\n\t}\n} );\n\n// JQuery trim is deprecated, provide a trim method based on String.prototype.trim\nvar trim = function( str ) {\n\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim#Polyfill\n\treturn str.replace( /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \"\" );\n};\n\n// Custom selectors\n$.extend( $.expr.pseudos || $.expr[ \":\" ], {\t\t// '|| $.expr[ \":\" ]' here enables backwards compatibility to jQuery 1.7. Can be removed when dropping jQ 1.7.x support\n\n\t// https://jqueryvalidation.org/blank-selector/\n\tblank: function( a ) {\n\t\treturn !trim( \"\" + $( a ).val() );\n\t},\n\n\t// https://jqueryvalidation.org/filled-selector/\n\tfilled: function( a ) {\n\t\tvar val = $( a ).val();\n\t\treturn val !== null && !!trim( \"\" + val );\n\t},\n\n\t// https://jqueryvalidation.org/unchecked-selector/\n\tunchecked: function( a ) {\n\t\treturn !$( a ).prop( \"checked\" );\n\t}\n} );\n\n// Constructor for validator\n$.validator = function( options, form ) {\n\tthis.settings = $.extend( true, {}, $.validator.defaults, options );\n\tthis.currentForm = form;\n\tthis.init();\n};\n\n// https://jqueryvalidation.org/jQuery.validator.format/\n$.validator.format = function( source, params ) {\n\tif ( arguments.length === 1 ) {\n\t\treturn function() {\n\t\t\tvar args = $.makeArray( arguments );\n\t\t\targs.unshift( source );\n\t\t\treturn $.validator.format.apply( this, args );\n\t\t};\n\t}\n\tif ( params === undefined ) {\n\t\treturn source;\n\t}\n\tif ( arguments.length > 2 && params.constructor !== Array  ) {\n\t\tparams = $.makeArray( arguments ).slice( 1 );\n\t}\n\tif ( params.constructor !== Array ) {\n\t\tparams = [ params ];\n\t}\n\t$.each( params, function( i, n ) {\n\t\tsource = source.replace( new RegExp( \"\\\\{\" + i + \"\\\\}\", \"g\" ), function() {\n\t\t\treturn n;\n\t\t} );\n\t} );\n\treturn source;\n};\n\n$.extend( $.validator, {\n\n\tdefaults: {\n\t\tmessages: {},\n\t\tgroups: {},\n\t\trules: {},\n\t\terrorClass: \"error\",\n\t\tpendingClass: \"pending\",\n\t\tvalidClass: \"valid\",\n\t\terrorElement: \"label\",\n\t\tfocusCleanup: false,\n\t\tfocusInvalid: true,\n\t\terrorContainer: $( [] ),\n\t\terrorLabelContainer: $( [] ),\n\t\tonsubmit: true,\n\t\tignore: \":hidden\",\n\t\tignoreTitle: false,\n\t\tonfocusin: function( element ) {\n\t\t\tthis.lastActive = element;\n\n\t\t\t// Hide error label and remove error class on focus if enabled\n\t\t\tif ( this.settings.focusCleanup ) {\n\t\t\t\tif ( this.settings.unhighlight ) {\n\t\t\t\t\tthis.settings.unhighlight.call( this, element, this.settings.errorClass, this.settings.validClass );\n\t\t\t\t}\n\t\t\t\tthis.hideThese( this.errorsFor( element ) );\n\t\t\t}\n\t\t},\n\t\tonfocusout: function( element ) {\n\t\t\tif ( !this.checkable( element ) && ( element.name in this.submitted || !this.optional( element ) ) ) {\n\t\t\t\tthis.element( element );\n\t\t\t}\n\t\t},\n\t\tonkeyup: function( element, event ) {\n\n\t\t\t// Avoid revalidate the field when pressing one of the following keys\n\t\t\t// Shift       => 16\n\t\t\t// Ctrl        => 17\n\t\t\t// Alt         => 18\n\t\t\t// Caps lock   => 20\n\t\t\t// End         => 35\n\t\t\t// Home        => 36\n\t\t\t// Left arrow  => 37\n\t\t\t// Up arrow    => 38\n\t\t\t// Right arrow => 39\n\t\t\t// Down arrow  => 40\n\t\t\t// Insert      => 45\n\t\t\t// Num lock    => 144\n\t\t\t// AltGr key   => 225\n\t\t\tvar excludedKeys = [\n\t\t\t\t16, 17, 18, 20, 35, 36, 37,\n\t\t\t\t38, 39, 40, 45, 144, 225\n\t\t\t];\n\n\t\t\tif ( event.which === 9 && this.elementValue( element ) === \"\" || $.inArray( event.keyCode, excludedKeys ) !== -1 ) {\n\t\t\t\treturn;\n\t\t\t} else if ( element.name in this.submitted || element.name in this.invalid ) {\n\t\t\t\tthis.element( element );\n\t\t\t}\n\t\t},\n\t\tonclick: function( element ) {\n\n\t\t\t// Click on selects, radiobuttons and checkboxes\n\t\t\tif ( element.name in this.submitted ) {\n\t\t\t\tthis.element( element );\n\n\t\t\t// Or option elements, check parent select in that case\n\t\t\t} else if ( element.parentNode.name in this.submitted ) {\n\t\t\t\tthis.element( element.parentNode );\n\t\t\t}\n\t\t},\n\t\thighlight: function( element, errorClass, validClass ) {\n\t\t\tif ( element.type === \"radio\" ) {\n\t\t\t\tthis.findByName( element.name ).addClass( errorClass ).removeClass( validClass );\n\t\t\t} else {\n\t\t\t\t$( element ).addClass( errorClass ).removeClass( validClass );\n\t\t\t}\n\t\t},\n\t\tunhighlight: function( element, errorClass, validClass ) {\n\t\t\tif ( element.type === \"radio\" ) {\n\t\t\t\tthis.findByName( element.name ).removeClass( errorClass ).addClass( validClass );\n\t\t\t} else {\n\t\t\t\t$( element ).removeClass( errorClass ).addClass( validClass );\n\t\t\t}\n\t\t}\n\t},\n\n\t// https://jqueryvalidation.org/jQuery.validator.setDefaults/\n\tsetDefaults: function( settings ) {\n\t\t$.extend( $.validator.defaults, settings );\n\t},\n\n\tmessages: {\n\t\trequired: \"This field is required.\",\n\t\tremote: \"Please fix this field.\",\n\t\temail: \"Please enter a valid email address.\",\n\t\turl: \"Please enter a valid URL.\",\n\t\tdate: \"Please enter a valid date.\",\n\t\tdateISO: \"Please enter a valid date (ISO).\",\n\t\tnumber: \"Please enter a valid number.\",\n\t\tdigits: \"Please enter only digits.\",\n\t\tequalTo: \"Please enter the same value again.\",\n\t\tmaxlength: $.validator.format( \"Please enter no more than {0} characters.\" ),\n\t\tminlength: $.validator.format( \"Please enter at least {0} characters.\" ),\n\t\trangelength: $.validator.format( \"Please enter a value between {0} and {1} characters long.\" ),\n\t\trange: $.validator.format( \"Please enter a value between {0} and {1}.\" ),\n\t\tmax: $.validator.format( \"Please enter a value less than or equal to {0}.\" ),\n\t\tmin: $.validator.format( \"Please enter a value greater than or equal to {0}.\" ),\n\t\tstep: $.validator.format( \"Please enter a multiple of {0}.\" )\n\t},\n\n\tautoCreateRanges: false,\n\n\tprototype: {\n\n\t\tinit: function() {\n\t\t\tthis.labelContainer = $( this.settings.errorLabelContainer );\n\t\t\tthis.errorContext = this.labelContainer.length && this.labelContainer || $( this.currentForm );\n\t\t\tthis.containers = $( this.settings.errorContainer ).add( this.settings.errorLabelContainer );\n\t\t\tthis.submitted = {};\n\t\t\tthis.valueCache = {};\n\t\t\tthis.pendingRequest = 0;\n\t\t\tthis.pending = {};\n\t\t\tthis.invalid = {};\n\t\t\tthis.reset();\n\n\t\t\tvar currentForm = this.currentForm,\n\t\t\t\tgroups = ( this.groups = {} ),\n\t\t\t\trules;\n\t\t\t$.each( this.settings.groups, function( key, value ) {\n\t\t\t\tif ( typeof value === \"string\" ) {\n\t\t\t\t\tvalue = value.split( /\\s/ );\n\t\t\t\t}\n\t\t\t\t$.each( value, function( index, name ) {\n\t\t\t\t\tgroups[ name ] = key;\n\t\t\t\t} );\n\t\t\t} );\n\t\t\trules = this.settings.rules;\n\t\t\t$.each( rules, function( key, value ) {\n\t\t\t\trules[ key ] = $.validator.normalizeRule( value );\n\t\t\t} );\n\n\t\t\tfunction delegate( event ) {\n\t\t\t\tvar isContentEditable = typeof $( this ).attr( \"contenteditable\" ) !== \"undefined\" && $( this ).attr( \"contenteditable\" ) !== \"false\";\n\n\t\t\t\t// Set form expando on contenteditable\n\t\t\t\tif ( !this.form && isContentEditable ) {\n\t\t\t\t\tthis.form = $( this ).closest( \"form\" )[ 0 ];\n\t\t\t\t\tthis.name = $( this ).attr( \"name\" );\n\t\t\t\t}\n\n\t\t\t\t// Ignore the element if it belongs to another form. This will happen mainly\n\t\t\t\t// when setting the `form` attribute of an input to the id of another form.\n\t\t\t\tif ( currentForm !== this.form ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar validator = $.data( this.form, \"validator\" ),\n\t\t\t\t\teventType = \"on\" + event.type.replace( /^validate/, \"\" ),\n\t\t\t\t\tsettings = validator.settings;\n\t\t\t\tif ( settings[ eventType ] && !$( this ).is( settings.ignore ) ) {\n\t\t\t\t\tsettings[ eventType ].call( validator, this, event );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$( this.currentForm )\n\t\t\t\t.on( \"focusin.validate focusout.validate keyup.validate\",\n\t\t\t\t\t\":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], \" +\n\t\t\t\t\t\"[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], \" +\n\t\t\t\t\t\"[type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], \" +\n\t\t\t\t\t\"[type='radio'], [type='checkbox'], [contenteditable], [type='button']\", delegate )\n\n\t\t\t\t// Support: Chrome, oldIE\n\t\t\t\t// \"select\" is provided as event.target when clicking a option\n\t\t\t\t.on( \"click.validate\", \"select, option, [type='radio'], [type='checkbox']\", delegate );\n\n\t\t\tif ( this.settings.invalidHandler ) {\n\t\t\t\t$( this.currentForm ).on( \"invalid-form.validate\", this.settings.invalidHandler );\n\t\t\t}\n\t\t},\n\n\t\t// https://jqueryvalidation.org/Validator.form/\n\t\tform: function() {\n\t\t\tthis.checkForm();\n\t\t\t$.extend( this.submitted, this.errorMap );\n\t\t\tthis.invalid = $.extend( {}, this.errorMap );\n\t\t\tif ( !this.valid() ) {\n\t\t\t\t$( this.currentForm ).triggerHandler( \"invalid-form\", [ this ] );\n\t\t\t}\n\t\t\tthis.showErrors();\n\t\t\treturn this.valid();\n\t\t},\n\n\t\tcheckForm: function() {\n\t\t\tthis.prepareForm();\n\t\t\tfor ( var i = 0, elements = ( this.currentElements = this.elements() ); elements[ i ]; i++ ) {\n\t\t\t\tthis.check( elements[ i ] );\n\t\t\t}\n\t\t\treturn this.valid();\n\t\t},\n\n\t\t// https://jqueryvalidation.org/Validator.element/\n\t\telement: function( element ) {\n\t\t\tvar cleanElement = this.clean( element ),\n\t\t\t\tcheckElement = this.validationTargetFor( cleanElement ),\n\t\t\t\tv = this,\n\t\t\t\tresult = true,\n\t\t\t\trs, group;\n\n\t\t\tif ( checkElement === undefined ) {\n\t\t\t\tdelete this.invalid[ cleanElement.name ];\n\t\t\t} else {\n\t\t\t\tthis.prepareElement( checkElement );\n\t\t\t\tthis.currentElements = $( checkElement );\n\n\t\t\t\t// If this element is grouped, then validate all group elements already\n\t\t\t\t// containing a value\n\t\t\t\tgroup = this.groups[ checkElement.name ];\n\t\t\t\tif ( group ) {\n\t\t\t\t\t$.each( this.groups, function( name, testgroup ) {\n\t\t\t\t\t\tif ( testgroup === group && name !== checkElement.name ) {\n\t\t\t\t\t\t\tcleanElement = v.validationTargetFor( v.clean( v.findByName( name ) ) );\n\t\t\t\t\t\t\tif ( cleanElement && cleanElement.name in v.invalid ) {\n\t\t\t\t\t\t\t\tv.currentElements.push( cleanElement );\n\t\t\t\t\t\t\t\tresult = v.check( cleanElement ) && result;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\trs = this.check( checkElement ) !== false;\n\t\t\t\tresult = result && rs;\n\t\t\t\tif ( rs ) {\n\t\t\t\t\tthis.invalid[ checkElement.name ] = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.invalid[ checkElement.name ] = true;\n\t\t\t\t}\n\n\t\t\t\tif ( !this.numberOfInvalids() ) {\n\n\t\t\t\t\t// Hide error containers on last error\n\t\t\t\t\tthis.toHide = this.toHide.add( this.containers );\n\t\t\t\t}\n\t\t\t\tthis.showErrors();\n\n\t\t\t\t// Add aria-invalid status for screen readers\n\t\t\t\t$( element ).attr( \"aria-invalid\", !rs );\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\n\t\t// https://jqueryvalidation.org/Validator.showErrors/\n\t\tshowErrors: function( errors ) {\n\t\t\tif ( errors ) {\n\t\t\t\tvar validator = this;\n\n\t\t\t\t// Add items to error list and map\n\t\t\t\t$.extend( this.errorMap, errors );\n\t\t\t\tthis.errorList = $.map( this.errorMap, function( message, name ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: message,\n\t\t\t\t\t\telement: validator.findByName( name )[ 0 ]\n\t\t\t\t\t};\n\t\t\t\t} );\n\n\t\t\t\t// Remove items from success list\n\t\t\t\tthis.successList = $.grep( this.successList, function( element ) {\n\t\t\t\t\treturn !( element.name in errors );\n\t\t\t\t} );\n\t\t\t}\n\t\t\tif ( this.settings.showErrors ) {\n\t\t\t\tthis.settings.showErrors.call( this, this.errorMap, this.errorList );\n\t\t\t} else {\n\t\t\t\tthis.defaultShowErrors();\n\t\t\t}\n\t\t},\n\n\t\t// https://jqueryvalidation.org/Validator.resetForm/\n\t\tresetForm: function() {\n\t\t\tif ( $.fn.resetForm ) {\n\t\t\t\t$( this.currentForm ).resetForm();\n\t\t\t}\n\t\t\tthis.invalid = {};\n\t\t\tthis.submitted = {};\n\t\t\tthis.prepareForm();\n\t\t\tthis.hideErrors();\n\t\t\tvar elements = this.elements()\n\t\t\t\t.removeData( \"previousValue\" )\n\t\t\t\t.removeAttr( \"aria-invalid\" );\n\n\t\t\tthis.resetElements( elements );\n\t\t},\n\n\t\tresetElements: function( elements ) {\n\t\t\tvar i;\n\n\t\t\tif ( this.settings.unhighlight ) {\n\t\t\t\tfor ( i = 0; elements[ i ]; i++ ) {\n\t\t\t\t\tthis.settings.unhighlight.call( this, elements[ i ],\n\t\t\t\t\t\tthis.settings.errorClass, \"\" );\n\t\t\t\t\tthis.findByName( elements[ i ].name ).removeClass( this.settings.validClass );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\telements\n\t\t\t\t\t.removeClass( this.settings.errorClass )\n\t\t\t\t\t.removeClass( this.settings.validClass );\n\t\t\t}\n\t\t},\n\n\t\tnumberOfInvalids: function() {\n\t\t\treturn this.objectLength( this.invalid );\n\t\t},\n\n\t\tobjectLength: function( obj ) {\n\t\t\t/* jshint unused: false */\n\t\t\tvar count = 0,\n\t\t\t\ti;\n\t\t\tfor ( i in obj ) {\n\n\t\t\t\t// This check allows counting elements with empty error\n\t\t\t\t// message as invalid elements\n\t\t\t\tif ( obj[ i ] !== undefined && obj[ i ] !== null && obj[ i ] !== false ) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn count;\n\t\t},\n\n\t\thideErrors: function() {\n\t\t\tthis.hideThese( this.toHide );\n\t\t},\n\n\t\thideThese: function( errors ) {\n\t\t\terrors.not( this.containers ).text( \"\" );\n\t\t\tthis.addWrapper( errors ).hide();\n\t\t},\n\n\t\tvalid: function() {\n\t\t\treturn this.size() === 0;\n\t\t},\n\n\t\tsize: function() {\n\t\t\treturn this.errorList.length;\n\t\t},\n\n\t\tfocusInvalid: function() {\n\t\t\tif ( this.settings.focusInvalid ) {\n\t\t\t\ttry {\n\t\t\t\t\t$( this.findLastActive() || this.errorList.length && this.errorList[ 0 ].element || [] )\n\t\t\t\t\t.filter( \":visible\" )\n\t\t\t\t\t.trigger( \"focus\" )\n\n\t\t\t\t\t// Manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find\n\t\t\t\t\t.trigger( \"focusin\" );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// Ignore IE throwing errors when focusing hidden elements\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tfindLastActive: function() {\n\t\t\tvar lastActive = this.lastActive;\n\t\t\treturn lastActive && $.grep( this.errorList, function( n ) {\n\t\t\t\treturn n.element.name === lastActive.name;\n\t\t\t} ).length === 1 && lastActive;\n\t\t},\n\n\t\telements: function() {\n\t\t\tvar validator = this,\n\t\t\t\trulesCache = {};\n\n\t\t\t// Select all valid inputs inside the form (no submit or reset buttons)\n\t\t\treturn $( this.currentForm )\n\t\t\t.find( \"input, select, textarea, [contenteditable]\" )\n\t\t\t.not( \":submit, :reset, :image, :disabled\" )\n\t\t\t.not( this.settings.ignore )\n\t\t\t.filter( function() {\n\t\t\t\tvar name = this.name || $( this ).attr( \"name\" ); // For contenteditable\n\t\t\t\tvar isContentEditable = typeof $( this ).attr( \"contenteditable\" ) !== \"undefined\" && $( this ).attr( \"contenteditable\" ) !== \"false\";\n\n\t\t\t\tif ( !name && validator.settings.debug && window.console ) {\n\t\t\t\t\tconsole.error( \"%o has no name assigned\", this );\n\t\t\t\t}\n\n\t\t\t\t// Set form expando on contenteditable\n\t\t\t\tif ( isContentEditable ) {\n\t\t\t\t\tthis.form = $( this ).closest( \"form\" )[ 0 ];\n\t\t\t\t\tthis.name = name;\n\t\t\t\t}\n\n\t\t\t\t// Ignore elements that belong to other/nested forms\n\t\t\t\tif ( this.form !== validator.currentForm ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Select only the first element for each name, and only those with rules specified\n\t\t\t\tif ( name in rulesCache || !validator.objectLength( $( this ).rules() ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\trulesCache[ name ] = true;\n\t\t\t\treturn true;\n\t\t\t} );\n\t\t},\n\n\t\tclean: function( selector ) {\n\t\t\treturn $( selector )[ 0 ];\n\t\t},\n\n\t\terrors: function() {\n\t\t\tvar errorClass = this.settings.errorClass.split( \" \" ).join( \".\" );\n\t\t\treturn $( this.settings.errorElement + \".\" + errorClass, this.errorContext );\n\t\t},\n\n\t\tresetInternals: function() {\n\t\t\tthis.successList = [];\n\t\t\tthis.errorList = [];\n\t\t\tthis.errorMap = {};\n\t\t\tthis.toShow = $( [] );\n\t\t\tthis.toHide = $( [] );\n\t\t},\n\n\t\treset: function() {\n\t\t\tthis.resetInternals();\n\t\t\tthis.currentElements = $( [] );\n\t\t},\n\n\t\tprepareForm: function() {\n\t\t\tthis.reset();\n\t\t\tthis.toHide = this.errors().add( this.containers );\n\t\t},\n\n\t\tprepareElement: function( element ) {\n\t\t\tthis.reset();\n\t\t\tthis.toHide = this.errorsFor( element );\n\t\t},\n\n\t\telementValue: function( element ) {\n\t\t\tvar $element = $( element ),\n\t\t\t\ttype = element.type,\n\t\t\t\tisContentEditable = typeof $element.attr( \"contenteditable\" ) !== \"undefined\" && $element.attr( \"contenteditable\" ) !== \"false\",\n\t\t\t\tval, idx;\n\n\t\t\tif ( type === \"radio\" || type === \"checkbox\" ) {\n\t\t\t\treturn this.findByName( element.name ).filter( \":checked\" ).val();\n\t\t\t} else if ( type === \"number\" && typeof element.validity !== \"undefined\" ) {\n\t\t\t\treturn element.validity.badInput ? \"NaN\" : $element.val();\n\t\t\t}\n\n\t\t\tif ( isContentEditable ) {\n\t\t\t\tval = $element.text();\n\t\t\t} else {\n\t\t\t\tval = $element.val();\n\t\t\t}\n\n\t\t\tif ( type === \"file\" ) {\n\n\t\t\t\t// Modern browser (chrome & safari)\n\t\t\t\tif ( val.substr( 0, 12 ) === \"C:\\\\fakepath\\\\\" ) {\n\t\t\t\t\treturn val.substr( 12 );\n\t\t\t\t}\n\n\t\t\t\t// Legacy browsers\n\t\t\t\t// Unix-based path\n\t\t\t\tidx = val.lastIndexOf( \"/\" );\n\t\t\t\tif ( idx >= 0 ) {\n\t\t\t\t\treturn val.substr( idx + 1 );\n\t\t\t\t}\n\n\t\t\t\t// Windows-based path\n\t\t\t\tidx = val.lastIndexOf( \"\\\\\" );\n\t\t\t\tif ( idx >= 0 ) {\n\t\t\t\t\treturn val.substr( idx + 1 );\n\t\t\t\t}\n\n\t\t\t\t// Just the file name\n\t\t\t\treturn val;\n\t\t\t}\n\n\t\t\tif ( typeof val === \"string\" ) {\n\t\t\t\treturn val.replace( /\\r/g, \"\" );\n\t\t\t}\n\t\t\treturn val;\n\t\t},\n\n\t\tcheck: function( element ) {\n\t\t\telement = this.validationTargetFor( this.clean( element ) );\n\n\t\t\tvar rules = $( element ).rules(),\n\t\t\t\trulesCount = $.map( rules, function( n, i ) {\n\t\t\t\t\treturn i;\n\t\t\t\t} ).length,\n\t\t\t\tdependencyMismatch = false,\n\t\t\t\tval = this.elementValue( element ),\n\t\t\t\tresult, method, rule, normalizer;\n\n\t\t\t// Prioritize the local normalizer defined for this element over the global one\n\t\t\t// if the former exists, otherwise user the global one in case it exists.\n\t\t\tif ( typeof rules.normalizer === \"function\" ) {\n\t\t\t\tnormalizer = rules.normalizer;\n\t\t\t} else if (\ttypeof this.settings.normalizer === \"function\" ) {\n\t\t\t\tnormalizer = this.settings.normalizer;\n\t\t\t}\n\n\t\t\t// If normalizer is defined, then call it to retreive the changed value instead\n\t\t\t// of using the real one.\n\t\t\t// Note that `this` in the normalizer is `element`.\n\t\t\tif ( normalizer ) {\n\t\t\t\tval = normalizer.call( element, val );\n\n\t\t\t\t// Delete the normalizer from rules to avoid treating it as a pre-defined method.\n\t\t\t\tdelete rules.normalizer;\n\t\t\t}\n\n\t\t\tfor ( method in rules ) {\n\t\t\t\trule = { method: method, parameters: rules[ method ] };\n\t\t\t\ttry {\n\t\t\t\t\tresult = $.validator.methods[ method ].call( this, val, element, rule.parameters );\n\n\t\t\t\t\t// If a method indicates that the field is optional and therefore valid,\n\t\t\t\t\t// don't mark it as valid when there are no other rules\n\t\t\t\t\tif ( result === \"dependency-mismatch\" && rulesCount === 1 ) {\n\t\t\t\t\t\tdependencyMismatch = true;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tdependencyMismatch = false;\n\n\t\t\t\t\tif ( result === \"pending\" ) {\n\t\t\t\t\t\tthis.toHide = this.toHide.not( this.errorsFor( element ) );\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !result ) {\n\t\t\t\t\t\tthis.formatAndAdd( element, rule );\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} catch ( e ) {\n\t\t\t\t\tif ( this.settings.debug && window.console ) {\n\t\t\t\t\t\tconsole.log( \"Exception occurred when checking element \" + element.id + \", check the '\" + rule.method + \"' method.\", e );\n\t\t\t\t\t}\n\t\t\t\t\tif ( e instanceof TypeError ) {\n\t\t\t\t\t\te.message += \".  Exception occurred when checking element \" + element.id + \", check the '\" + rule.method + \"' method.\";\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( dependencyMismatch ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( this.objectLength( rules ) ) {\n\t\t\t\tthis.successList.push( element );\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t// Return the custom message for the given element and validation method\n\t\t// specified in the element's HTML5 data attribute\n\t\t// return the generic message if present and no method specific message is present\n\t\tcustomDataMessage: function( element, method ) {\n\t\t\treturn $( element ).data( \"msg\" + method.charAt( 0 ).toUpperCase() +\n\t\t\t\tmethod.substring( 1 ).toLowerCase() ) || $( element ).data( \"msg\" );\n\t\t},\n\n\t\t// Return the custom message for the given element name and validation method\n\t\tcustomMessage: function( name, method ) {\n\t\t\tvar m = this.settings.messages[ name ];\n\t\t\treturn m && ( m.constructor === String ? m : m[ method ] );\n\t\t},\n\n\t\t// Return the first defined argument, allowing empty strings\n\t\tfindDefined: function() {\n\t\t\tfor ( var i = 0; i < arguments.length; i++ ) {\n\t\t\t\tif ( arguments[ i ] !== undefined ) {\n\t\t\t\t\treturn arguments[ i ];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn undefined;\n\t\t},\n\n\t\t// The second parameter 'rule' used to be a string, and extended to an object literal\n\t\t// of the following form:\n\t\t// rule = {\n\t\t//     method: \"method name\",\n\t\t//     parameters: \"the given method parameters\"\n\t\t// }\n\t\t//\n\t\t// The old behavior still supported, kept to maintain backward compatibility with\n\t\t// old code, and will be removed in the next major release.\n\t\tdefaultMessage: function( element, rule ) {\n\t\t\tif ( typeof rule === \"string\" ) {\n\t\t\t\trule = { method: rule };\n\t\t\t}\n\n\t\t\tvar message = this.findDefined(\n\t\t\t\t\tthis.customMessage( element.name, rule.method ),\n\t\t\t\t\tthis.customDataMessage( element, rule.method ),\n\n\t\t\t\t\t// 'title' is never undefined, so handle empty string as undefined\n\t\t\t\t\t!this.settings.ignoreTitle && element.title || undefined,\n\t\t\t\t\t$.validator.messages[ rule.method ],\n\t\t\t\t\t\"<strong>Warning: No message defined for \" + element.name + \"</strong>\"\n\t\t\t\t),\n\t\t\t\ttheregex = /\\$?\\{(\\d+)\\}/g;\n\t\t\tif ( typeof message === \"function\" ) {\n\t\t\t\tmessage = message.call( this, rule.parameters, element );\n\t\t\t} else if ( theregex.test( message ) ) {\n\t\t\t\tmessage = $.validator.format( message.replace( theregex, \"{$1}\" ), rule.parameters );\n\t\t\t}\n\n\t\t\treturn message;\n\t\t},\n\n\t\tformatAndAdd: function( element, rule ) {\n\t\t\tvar message = this.defaultMessage( element, rule );\n\n\t\t\tthis.errorList.push( {\n\t\t\t\tmessage: message,\n\t\t\t\telement: element,\n\t\t\t\tmethod: rule.method\n\t\t\t} );\n\n\t\t\tthis.errorMap[ element.name ] = message;\n\t\t\tthis.submitted[ element.name ] = message;\n\t\t},\n\n\t\taddWrapper: function( toToggle ) {\n\t\t\tif ( this.settings.wrapper ) {\n\t\t\t\ttoToggle = toToggle.add( toToggle.parent( this.settings.wrapper ) );\n\t\t\t}\n\t\t\treturn toToggle;\n\t\t},\n\n\t\tdefaultShowErrors: function() {\n\t\t\tvar i, elements, error;\n\t\t\tfor ( i = 0; this.errorList[ i ]; i++ ) {\n\t\t\t\terror = this.errorList[ i ];\n\t\t\t\tif ( this.settings.highlight ) {\n\t\t\t\t\tthis.settings.highlight.call( this, error.element, this.settings.errorClass, this.settings.validClass );\n\t\t\t\t}\n\t\t\t\tthis.showLabel( error.element, error.message );\n\t\t\t}\n\t\t\tif ( this.errorList.length ) {\n\t\t\t\tthis.toShow = this.toShow.add( this.containers );\n\t\t\t}\n\t\t\tif ( this.settings.success ) {\n\t\t\t\tfor ( i = 0; this.successList[ i ]; i++ ) {\n\t\t\t\t\tthis.showLabel( this.successList[ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( this.settings.unhighlight ) {\n\t\t\t\tfor ( i = 0, elements = this.validElements(); elements[ i ]; i++ ) {\n\t\t\t\t\tthis.settings.unhighlight.call( this, elements[ i ], this.settings.errorClass, this.settings.validClass );\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.toHide = this.toHide.not( this.toShow );\n\t\t\tthis.hideErrors();\n\t\t\tthis.addWrapper( this.toShow ).show();\n\t\t},\n\n\t\tvalidElements: function() {\n\t\t\treturn this.currentElements.not( this.invalidElements() );\n\t\t},\n\n\t\tinvalidElements: function() {\n\t\t\treturn $( this.errorList ).map( function() {\n\t\t\t\treturn this.element;\n\t\t\t} );\n\t\t},\n\n\t\tshowLabel: function( element, message ) {\n\t\t\tvar place, group, errorID, v,\n\t\t\t\terror = this.errorsFor( element ),\n\t\t\t\telementID = this.idOrName( element ),\n\t\t\t\tdescribedBy = $( element ).attr( \"aria-describedby\" );\n\n\t\t\tif ( error.length ) {\n\n\t\t\t\t// Refresh error/success class\n\t\t\t\terror.removeClass( this.settings.validClass ).addClass( this.settings.errorClass );\n\n\t\t\t\t// Replace message on existing label\n\t\t\t\terror.html( message );\n\t\t\t} else {\n\n\t\t\t\t// Create error element\n\t\t\t\terror = $( \"<\" + this.settings.errorElement + \">\" )\n\t\t\t\t\t.attr( \"id\", elementID + \"-error\" )\n\t\t\t\t\t.addClass( this.settings.errorClass )\n\t\t\t\t\t.html( message || \"\" );\n\n\t\t\t\t// Maintain reference to the element to be placed into the DOM\n\t\t\t\tplace = error;\n\t\t\t\tif ( this.settings.wrapper ) {\n\n\t\t\t\t\t// Make sure the element is visible, even in IE\n\t\t\t\t\t// actually showing the wrapped element is handled elsewhere\n\t\t\t\t\tplace = error.hide().show().wrap( \"<\" + this.settings.wrapper + \"/>\" ).parent();\n\t\t\t\t}\n\t\t\t\tif ( this.labelContainer.length ) {\n\t\t\t\t\tthis.labelContainer.append( place );\n\t\t\t\t} else if ( this.settings.errorPlacement ) {\n\t\t\t\t\tthis.settings.errorPlacement.call( this, place, $( element ) );\n\t\t\t\t} else {\n\t\t\t\t\tplace.insertAfter( element );\n\t\t\t\t}\n\n\t\t\t\t// Link error back to the element\n\t\t\t\tif ( error.is( \"label\" ) ) {\n\n\t\t\t\t\t// If the error is a label, then associate using 'for'\n\t\t\t\t\terror.attr( \"for\", elementID );\n\n\t\t\t\t\t// If the element is not a child of an associated label, then it's necessary\n\t\t\t\t\t// to explicitly apply aria-describedby\n\t\t\t\t} else if ( error.parents( \"label[for='\" + this.escapeCssMeta( elementID ) + \"']\" ).length === 0 ) {\n\t\t\t\t\terrorID = error.attr( \"id\" );\n\n\t\t\t\t\t// Respect existing non-error aria-describedby\n\t\t\t\t\tif ( !describedBy ) {\n\t\t\t\t\t\tdescribedBy = errorID;\n\t\t\t\t\t} else if ( !describedBy.match( new RegExp( \"\\\\b\" + this.escapeCssMeta( errorID ) + \"\\\\b\" ) ) ) {\n\n\t\t\t\t\t\t// Add to end of list if not already present\n\t\t\t\t\t\tdescribedBy += \" \" + errorID;\n\t\t\t\t\t}\n\t\t\t\t\t$( element ).attr( \"aria-describedby\", describedBy );\n\n\t\t\t\t\t// If this element is grouped, then assign to all elements in the same group\n\t\t\t\t\tgroup = this.groups[ element.name ];\n\t\t\t\t\tif ( group ) {\n\t\t\t\t\t\tv = this;\n\t\t\t\t\t\t$.each( v.groups, function( name, testgroup ) {\n\t\t\t\t\t\t\tif ( testgroup === group ) {\n\t\t\t\t\t\t\t\t$( \"[name='\" + v.escapeCssMeta( name ) + \"']\", v.currentForm )\n\t\t\t\t\t\t\t\t\t.attr( \"aria-describedby\", error.attr( \"id\" ) );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( !message && this.settings.success ) {\n\t\t\t\terror.text( \"\" );\n\t\t\t\tif ( typeof this.settings.success === \"string\" ) {\n\t\t\t\t\terror.addClass( this.settings.success );\n\t\t\t\t} else {\n\t\t\t\t\tthis.settings.success( error, element );\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.toShow = this.toShow.add( error );\n\t\t},\n\n\t\terrorsFor: function( element ) {\n\t\t\tvar name = this.escapeCssMeta( this.idOrName( element ) ),\n\t\t\t\tdescriber = $( element ).attr( \"aria-describedby\" ),\n\t\t\t\tselector = \"label[for='\" + name + \"'], label[for='\" + name + \"'] *\";\n\n\t\t\t// 'aria-describedby' should directly reference the error element\n\t\t\tif ( describer ) {\n\t\t\t\tselector = selector + \", #\" + this.escapeCssMeta( describer )\n\t\t\t\t\t.replace( /\\s+/g, \", #\" );\n\t\t\t}\n\n\t\t\treturn this\n\t\t\t\t.errors()\n\t\t\t\t.filter( selector );\n\t\t},\n\n\t\t// See https://api.jquery.com/category/selectors/, for CSS\n\t\t// meta-characters that should be escaped in order to be used with JQuery\n\t\t// as a literal part of a name/id or any selector.\n\t\tescapeCssMeta: function( string ) {\n\t\t\treturn string.replace( /([\\\\!\"#$%&'()*+,./:;<=>?@\\[\\]^`{|}~])/g, \"\\\\$1\" );\n\t\t},\n\n\t\tidOrName: function( element ) {\n\t\t\treturn this.groups[ element.name ] || ( this.checkable( element ) ? element.name : element.id || element.name );\n\t\t},\n\n\t\tvalidationTargetFor: function( element ) {\n\n\t\t\t// If radio/checkbox, validate first element in group instead\n\t\t\tif ( this.checkable( element ) ) {\n\t\t\t\telement = this.findByName( element.name );\n\t\t\t}\n\n\t\t\t// Always apply ignore filter\n\t\t\treturn $( element ).not( this.settings.ignore )[ 0 ];\n\t\t},\n\n\t\tcheckable: function( element ) {\n\t\t\treturn ( /radio|checkbox/i ).test( element.type );\n\t\t},\n\n\t\tfindByName: function( name ) {\n\t\t\treturn $( this.currentForm ).find( \"[name='\" + this.escapeCssMeta( name ) + \"']\" );\n\t\t},\n\n\t\tgetLength: function( value, element ) {\n\t\t\tswitch ( element.nodeName.toLowerCase() ) {\n\t\t\tcase \"select\":\n\t\t\t\treturn $( \"option:selected\", element ).length;\n\t\t\tcase \"input\":\n\t\t\t\tif ( this.checkable( element ) ) {\n\t\t\t\t\treturn this.findByName( element.name ).filter( \":checked\" ).length;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn value.length;\n\t\t},\n\n\t\tdepend: function( param, element ) {\n\t\t\treturn this.dependTypes[ typeof param ] ? this.dependTypes[ typeof param ]( param, element ) : true;\n\t\t},\n\n\t\tdependTypes: {\n\t\t\t\"boolean\": function( param ) {\n\t\t\t\treturn param;\n\t\t\t},\n\t\t\t\"string\": function( param, element ) {\n\t\t\t\treturn !!$( param, element.form ).length;\n\t\t\t},\n\t\t\t\"function\": function( param, element ) {\n\t\t\t\treturn param( element );\n\t\t\t}\n\t\t},\n\n\t\toptional: function( element ) {\n\t\t\tvar val = this.elementValue( element );\n\t\t\treturn !$.validator.methods.required.call( this, val, element ) && \"dependency-mismatch\";\n\t\t},\n\n\t\tstartRequest: function( element ) {\n\t\t\tif ( !this.pending[ element.name ] ) {\n\t\t\t\tthis.pendingRequest++;\n\t\t\t\t$( element ).addClass( this.settings.pendingClass );\n\t\t\t\tthis.pending[ element.name ] = true;\n\t\t\t}\n\t\t},\n\n\t\tstopRequest: function( element, valid ) {\n\t\t\tthis.pendingRequest--;\n\n\t\t\t// Sometimes synchronization fails, make sure pendingRequest is never < 0\n\t\t\tif ( this.pendingRequest < 0 ) {\n\t\t\t\tthis.pendingRequest = 0;\n\t\t\t}\n\t\t\tdelete this.pending[ element.name ];\n\t\t\t$( element ).removeClass( this.settings.pendingClass );\n\t\t\tif ( valid && this.pendingRequest === 0 && this.formSubmitted && this.form() ) {\n\t\t\t\t$( this.currentForm ).submit();\n\n\t\t\t\t// Remove the hidden input that was used as a replacement for the\n\t\t\t\t// missing submit button. The hidden input is added by `handle()`\n\t\t\t\t// to ensure that the value of the used submit button is passed on\n\t\t\t\t// for scripted submits triggered by this method\n\t\t\t\tif ( this.submitButton ) {\n\t\t\t\t\t$( \"input:hidden[name='\" + this.submitButton.name + \"']\", this.currentForm ).remove();\n\t\t\t\t}\n\n\t\t\t\tthis.formSubmitted = false;\n\t\t\t} else if ( !valid && this.pendingRequest === 0 && this.formSubmitted ) {\n\t\t\t\t$( this.currentForm ).triggerHandler( \"invalid-form\", [ this ] );\n\t\t\t\tthis.formSubmitted = false;\n\t\t\t}\n\t\t},\n\n\t\tpreviousValue: function( element, method ) {\n\t\t\tmethod = typeof method === \"string\" && method || \"remote\";\n\n\t\t\treturn $.data( element, \"previousValue\" ) || $.data( element, \"previousValue\", {\n\t\t\t\told: null,\n\t\t\t\tvalid: true,\n\t\t\t\tmessage: this.defaultMessage( element, { method: method } )\n\t\t\t} );\n\t\t},\n\n\t\t// Cleans up all forms and elements, removes validator-specific events\n\t\tdestroy: function() {\n\t\t\tthis.resetForm();\n\n\t\t\t$( this.currentForm )\n\t\t\t\t.off( \".validate\" )\n\t\t\t\t.removeData( \"validator\" )\n\t\t\t\t.find( \".validate-equalTo-blur\" )\n\t\t\t\t\t.off( \".validate-equalTo\" )\n\t\t\t\t\t.removeClass( \"validate-equalTo-blur\" )\n\t\t\t\t.find( \".validate-lessThan-blur\" )\n\t\t\t\t\t.off( \".validate-lessThan\" )\n\t\t\t\t\t.removeClass( \"validate-lessThan-blur\" )\n\t\t\t\t.find( \".validate-lessThanEqual-blur\" )\n\t\t\t\t\t.off( \".validate-lessThanEqual\" )\n\t\t\t\t\t.removeClass( \"validate-lessThanEqual-blur\" )\n\t\t\t\t.find( \".validate-greaterThanEqual-blur\" )\n\t\t\t\t\t.off( \".validate-greaterThanEqual\" )\n\t\t\t\t\t.removeClass( \"validate-greaterThanEqual-blur\" )\n\t\t\t\t.find( \".validate-greaterThan-blur\" )\n\t\t\t\t\t.off( \".validate-greaterThan\" )\n\t\t\t\t\t.removeClass( \"validate-greaterThan-blur\" );\n\t\t}\n\n\t},\n\n\tclassRuleSettings: {\n\t\trequired: { required: true },\n\t\temail: { email: true },\n\t\turl: { url: true },\n\t\tdate: { date: true },\n\t\tdateISO: { dateISO: true },\n\t\tnumber: { number: true },\n\t\tdigits: { digits: true },\n\t\tcreditcard: { creditcard: true }\n\t},\n\n\taddClassRules: function( className, rules ) {\n\t\tif ( className.constructor === String ) {\n\t\t\tthis.classRuleSettings[ className ] = rules;\n\t\t} else {\n\t\t\t$.extend( this.classRuleSettings, className );\n\t\t}\n\t},\n\n\tclassRules: function( element ) {\n\t\tvar rules = {},\n\t\t\tclasses = $( element ).attr( \"class\" );\n\n\t\tif ( classes ) {\n\t\t\t$.each( classes.split( \" \" ), function() {\n\t\t\t\tif ( this in $.validator.classRuleSettings ) {\n\t\t\t\t\t$.extend( rules, $.validator.classRuleSettings[ this ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t\treturn rules;\n\t},\n\n\tnormalizeAttributeRule: function( rules, type, method, value ) {\n\n\t\t// Convert the value to a number for number inputs, and for text for backwards compability\n\t\t// allows type=\"date\" and others to be compared as strings\n\t\tif ( /min|max|step/.test( method ) && ( type === null || /number|range|text/.test( type ) ) ) {\n\t\t\tvalue = Number( value );\n\n\t\t\t// Support Opera Mini, which returns NaN for undefined minlength\n\t\t\tif ( isNaN( value ) ) {\n\t\t\t\tvalue = undefined;\n\t\t\t}\n\t\t}\n\n\t\tif ( value || value === 0 ) {\n\t\t\trules[ method ] = value;\n\t\t} else if ( type === method && type !== \"range\" ) {\n\n\t\t\t// Exception: the jquery validate 'range' method\n\t\t\t// does not test for the html5 'range' type\n\t\t\trules[ method ] = true;\n\t\t}\n\t},\n\n\tattributeRules: function( element ) {\n\t\tvar rules = {},\n\t\t\t$element = $( element ),\n\t\t\ttype = element.getAttribute( \"type\" ),\n\t\t\tmethod, value;\n\n\t\tfor ( method in $.validator.methods ) {\n\n\t\t\t// Support for <input required> in both html5 and older browsers\n\t\t\tif ( method === \"required\" ) {\n\t\t\t\tvalue = element.getAttribute( method );\n\n\t\t\t\t// Some browsers return an empty string for the required attribute\n\t\t\t\t// and non-HTML5 browsers might have required=\"\" markup\n\t\t\t\tif ( value === \"\" ) {\n\t\t\t\t\tvalue = true;\n\t\t\t\t}\n\n\t\t\t\t// Force non-HTML5 browsers to return bool\n\t\t\t\tvalue = !!value;\n\t\t\t} else {\n\t\t\t\tvalue = $element.attr( method );\n\t\t\t}\n\n\t\t\tthis.normalizeAttributeRule( rules, type, method, value );\n\t\t}\n\n\t\t// 'maxlength' may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs\n\t\tif ( rules.maxlength && /-1|2147483647|524288/.test( rules.maxlength ) ) {\n\t\t\tdelete rules.maxlength;\n\t\t}\n\n\t\treturn rules;\n\t},\n\n\tdataRules: function( element ) {\n\t\tvar rules = {},\n\t\t\t$element = $( element ),\n\t\t\ttype = element.getAttribute( \"type\" ),\n\t\t\tmethod, value;\n\n\t\tfor ( method in $.validator.methods ) {\n\t\t\tvalue = $element.data( \"rule\" + method.charAt( 0 ).toUpperCase() + method.substring( 1 ).toLowerCase() );\n\n\t\t\t// Cast empty attributes like `data-rule-required` to `true`\n\t\t\tif ( value === \"\" ) {\n\t\t\t\tvalue = true;\n\t\t\t}\n\n\t\t\tthis.normalizeAttributeRule( rules, type, method, value );\n\t\t}\n\t\treturn rules;\n\t},\n\n\tstaticRules: function( element ) {\n\t\tvar rules = {},\n\t\t\tvalidator = $.data( element.form, \"validator\" );\n\n\t\tif ( validator.settings.rules ) {\n\t\t\trules = $.validator.normalizeRule( validator.settings.rules[ element.name ] ) || {};\n\t\t}\n\t\treturn rules;\n\t},\n\n\tnormalizeRules: function( rules, element ) {\n\n\t\t// Handle dependency check\n\t\t$.each( rules, function( prop, val ) {\n\n\t\t\t// Ignore rule when param is explicitly false, eg. required:false\n\t\t\tif ( val === false ) {\n\t\t\t\tdelete rules[ prop ];\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( val.param || val.depends ) {\n\t\t\t\tvar keepRule = true;\n\t\t\t\tswitch ( typeof val.depends ) {\n\t\t\t\tcase \"string\":\n\t\t\t\t\tkeepRule = !!$( val.depends, element.form ).length;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"function\":\n\t\t\t\t\tkeepRule = val.depends.call( element, element );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif ( keepRule ) {\n\t\t\t\t\trules[ prop ] = val.param !== undefined ? val.param : true;\n\t\t\t\t} else {\n\t\t\t\t\t$.data( element.form, \"validator\" ).resetElements( $( element ) );\n\t\t\t\t\tdelete rules[ prop ];\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// Evaluate parameters\n\t\t$.each( rules, function( rule, parameter ) {\n\t\t\trules[ rule ] = typeof parameter === \"function\" && rule !== \"normalizer\" ? parameter( element ) : parameter;\n\t\t} );\n\n\t\t// Clean number parameters\n\t\t$.each( [ \"minlength\", \"maxlength\" ], function() {\n\t\t\tif ( rules[ this ] ) {\n\t\t\t\trules[ this ] = Number( rules[ this ] );\n\t\t\t}\n\t\t} );\n\t\t$.each( [ \"rangelength\", \"range\" ], function() {\n\t\t\tvar parts;\n\t\t\tif ( rules[ this ] ) {\n\t\t\t\tif ( Array.isArray( rules[ this ] ) ) {\n\t\t\t\t\trules[ this ] = [ Number( rules[ this ][ 0 ] ), Number( rules[ this ][ 1 ] ) ];\n\t\t\t\t} else if ( typeof rules[ this ] === \"string\" ) {\n\t\t\t\t\tparts = rules[ this ].replace( /[\\[\\]]/g, \"\" ).split( /[\\s,]+/ );\n\t\t\t\t\trules[ this ] = [ Number( parts[ 0 ] ), Number( parts[ 1 ] ) ];\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tif ( $.validator.autoCreateRanges ) {\n\n\t\t\t// Auto-create ranges\n\t\t\tif ( rules.min != null && rules.max != null ) {\n\t\t\t\trules.range = [ rules.min, rules.max ];\n\t\t\t\tdelete rules.min;\n\t\t\t\tdelete rules.max;\n\t\t\t}\n\t\t\tif ( rules.minlength != null && rules.maxlength != null ) {\n\t\t\t\trules.rangelength = [ rules.minlength, rules.maxlength ];\n\t\t\t\tdelete rules.minlength;\n\t\t\t\tdelete rules.maxlength;\n\t\t\t}\n\t\t}\n\n\t\treturn rules;\n\t},\n\n\t// Converts a simple string to a {string: true} rule, e.g., \"required\" to {required:true}\n\tnormalizeRule: function( data ) {\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tvar transformed = {};\n\t\t\t$.each( data.split( /\\s/ ), function() {\n\t\t\t\ttransformed[ this ] = true;\n\t\t\t} );\n\t\t\tdata = transformed;\n\t\t}\n\t\treturn data;\n\t},\n\n\t// https://jqueryvalidation.org/jQuery.validator.addMethod/\n\taddMethod: function( name, method, message ) {\n\t\t$.validator.methods[ name ] = method;\n\t\t$.validator.messages[ name ] = message !== undefined ? message : $.validator.messages[ name ];\n\t\tif ( method.length < 3 ) {\n\t\t\t$.validator.addClassRules( name, $.validator.normalizeRule( name ) );\n\t\t}\n\t},\n\n\t// https://jqueryvalidation.org/jQuery.validator.methods/\n\tmethods: {\n\n\t\t// https://jqueryvalidation.org/required-method/\n\t\trequired: function( value, element, param ) {\n\n\t\t\t// Check if dependency is met\n\t\t\tif ( !this.depend( param, element ) ) {\n\t\t\t\treturn \"dependency-mismatch\";\n\t\t\t}\n\t\t\tif ( element.nodeName.toLowerCase() === \"select\" ) {\n\n\t\t\t\t// Could be an array for select-multiple or a string, both are fine this way\n\t\t\t\tvar val = $( element ).val();\n\t\t\t\treturn val && val.length > 0;\n\t\t\t}\n\t\t\tif ( this.checkable( element ) ) {\n\t\t\t\treturn this.getLength( value, element ) > 0;\n\t\t\t}\n\t\t\treturn value !== undefined && value !== null && value.length > 0;\n\t\t},\n\n\t\t// https://jqueryvalidation.org/email-method/\n\t\temail: function( value, element ) {\n\n\t\t\t// From https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address\n\t\t\t// Retrieved 2014-01-14\n\t\t\t// If you have a problem with this implementation, report a bug against the above spec\n\t\t\t// Or use custom methods to implement your own email validation\n\t\t\treturn this.optional( element ) || /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test( value );\n\t\t},\n\n\t\t// https://jqueryvalidation.org/url-method/\n\t\turl: function( value, element ) {\n\n\t\t\t// Copyright (c) 2010-2013 Diego Perini, MIT licensed\n\t\t\t// https://gist.github.com/dperini/729294\n\t\t\t// see also https://mathiasbynens.be/demo/url-regex\n\t\t\t// modified to allow protocol-relative URLs\n\t\t\treturn this.optional( element ) || /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test( value );\n\t\t},\n\n\t\t// https://jqueryvalidation.org/date-method/\n\t\tdate: ( function() {\n\t\t\tvar called = false;\n\n\t\t\treturn function( value, element ) {\n\t\t\t\tif ( !called ) {\n\t\t\t\t\tcalled = true;\n\t\t\t\t\tif ( this.settings.debug && window.console ) {\n\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t\"The `date` method is deprecated and will be removed in version '2.0.0'.\\n\" +\n\t\t\t\t\t\t\t\"Please don't use it, since it relies on the Date constructor, which\\n\" +\n\t\t\t\t\t\t\t\"behaves very differently across browsers and locales. Use `dateISO`\\n\" +\n\t\t\t\t\t\t\t\"instead or one of the locale specific methods in `localizations/`\\n\" +\n\t\t\t\t\t\t\t\"and `additional-methods.js`.\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn this.optional( element ) || !/Invalid|NaN/.test( new Date( value ).toString() );\n\t\t\t};\n\t\t}() ),\n\n\t\t// https://jqueryvalidation.org/dateISO-method/\n\t\tdateISO: function( value, element ) {\n\t\t\treturn this.optional( element ) || /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/.test( value );\n\t\t},\n\n\t\t// https://jqueryvalidation.org/number-method/\n\t\tnumber: function( value, element ) {\n\t\t\treturn this.optional( element ) || /^(?:-?\\d+|-?\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/.test( value );\n\t\t},\n\n\t\t// https://jqueryvalidation.org/digits-method/\n\t\tdigits: function( value, element ) {\n\t\t\treturn this.optional( element ) || /^\\d+$/.test( value );\n\t\t},\n\n\t\t// https://jqueryvalidation.org/minlength-method/\n\t\tminlength: function( value, element, param ) {\n\t\t\tvar length = Array.isArray( value ) ? value.length : this.getLength( value, element );\n\t\t\treturn this.optional( element ) || length >= param;\n\t\t},\n\n\t\t// https://jqueryvalidation.org/maxlength-method/\n\t\tmaxlength: function( value, element, param ) {\n\t\t\tvar length = Array.isArray( value ) ? value.length : this.getLength( value, element );\n\t\t\treturn this.optional( element ) || length <= param;\n\t\t},\n\n\t\t// https://jqueryvalidation.org/rangelength-method/\n\t\trangelength: function( value, element, param ) {\n\t\t\tvar length = Array.isArray( value ) ? value.length : this.getLength( value, element );\n\t\t\treturn this.optional( element ) || ( length >= param[ 0 ] && length <= param[ 1 ] );\n\t\t},\n\n\t\t// https://jqueryvalidation.org/min-method/\n\t\tmin: function( value, element, param ) {\n\t\t\treturn this.optional( element ) || value >= param;\n\t\t},\n\n\t\t// https://jqueryvalidation.org/max-method/\n\t\tmax: function( value, element, param ) {\n\t\t\treturn this.optional( element ) || value <= param;\n\t\t},\n\n\t\t// https://jqueryvalidation.org/range-method/\n\t\trange: function( value, element, param ) {\n\t\t\treturn this.optional( element ) || ( value >= param[ 0 ] && value <= param[ 1 ] );\n\t\t},\n\n\t\t// https://jqueryvalidation.org/step-method/\n\t\tstep: function( value, element, param ) {\n\t\t\tvar type = $( element ).attr( \"type\" ),\n\t\t\t\terrorMessage = \"Step attribute on input type \" + type + \" is not supported.\",\n\t\t\t\tsupportedTypes = [ \"text\", \"number\", \"range\" ],\n\t\t\t\tre = new RegExp( \"\\\\b\" + type + \"\\\\b\" ),\n\t\t\t\tnotSupported = type && !re.test( supportedTypes.join() ),\n\t\t\t\tdecimalPlaces = function( num ) {\n\t\t\t\t\tvar match = ( \"\" + num ).match( /(?:\\.(\\d+))?$/ );\n\t\t\t\t\tif ( !match ) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Number of digits right of decimal point.\n\t\t\t\t\treturn match[ 1 ] ? match[ 1 ].length : 0;\n\t\t\t\t},\n\t\t\t\ttoInt = function( num ) {\n\t\t\t\t\treturn Math.round( num * Math.pow( 10, decimals ) );\n\t\t\t\t},\n\t\t\t\tvalid = true,\n\t\t\t\tdecimals;\n\n\t\t\t// Works only for text, number and range input types\n\t\t\t// TODO find a way to support input types date, datetime, datetime-local, month, time and week\n\t\t\tif ( notSupported ) {\n\t\t\t\tthrow new Error( errorMessage );\n\t\t\t}\n\n\t\t\tdecimals = decimalPlaces( param );\n\n\t\t\t// Value can't have too many decimals\n\t\t\tif ( decimalPlaces( value ) > decimals || toInt( value ) % toInt( param ) !== 0 ) {\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\treturn this.optional( element ) || valid;\n\t\t},\n\n\t\t// https://jqueryvalidation.org/equalTo-method/\n\t\tequalTo: function( value, element, param ) {\n\n\t\t\t// Bind to the blur event of the target in order to revalidate whenever the target field is updated\n\t\t\tvar target = $( param );\n\t\t\tif ( this.settings.onfocusout && target.not( \".validate-equalTo-blur\" ).length ) {\n\t\t\t\ttarget.addClass( \"validate-equalTo-blur\" ).on( \"blur.validate-equalTo\", function() {\n\t\t\t\t\t$( element ).valid();\n\t\t\t\t} );\n\t\t\t}\n\t\t\treturn value === target.val();\n\t\t},\n\n\t\t// https://jqueryvalidation.org/remote-method/\n\t\tremote: function( value, element, param, method ) {\n\t\t\tif ( this.optional( element ) ) {\n\t\t\t\treturn \"dependency-mismatch\";\n\t\t\t}\n\n\t\t\tmethod = typeof method === \"string\" && method || \"remote\";\n\n\t\t\tvar previous = this.previousValue( element, method ),\n\t\t\t\tvalidator, data, optionDataString;\n\n\t\t\tif ( !this.settings.messages[ element.name ] ) {\n\t\t\t\tthis.settings.messages[ element.name ] = {};\n\t\t\t}\n\t\t\tprevious.originalMessage = previous.originalMessage || this.settings.messages[ element.name ][ method ];\n\t\t\tthis.settings.messages[ element.name ][ method ] = previous.message;\n\n\t\t\tparam = typeof param === \"string\" && { url: param } || param;\n\t\t\toptionDataString = $.param( $.extend( { data: value }, param.data ) );\n\t\t\tif ( previous.old === optionDataString ) {\n\t\t\t\treturn previous.valid;\n\t\t\t}\n\n\t\t\tprevious.old = optionDataString;\n\t\t\tvalidator = this;\n\t\t\tthis.startRequest( element );\n\t\t\tdata = {};\n\t\t\tdata[ element.name ] = value;\n\t\t\t$.ajax( $.extend( true, {\n\t\t\t\tmode: \"abort\",\n\t\t\t\tport: \"validate\" + element.name,\n\t\t\t\tdataType: \"json\",\n\t\t\t\tdata: data,\n\t\t\t\tcontext: validator.currentForm,\n\t\t\t\tsuccess: function( response ) {\n\t\t\t\t\tvar valid = response === true || response === \"true\",\n\t\t\t\t\t\terrors, message, submitted;\n\n\t\t\t\t\tvalidator.settings.messages[ element.name ][ method ] = previous.originalMessage;\n\t\t\t\t\tif ( valid ) {\n\t\t\t\t\t\tsubmitted = validator.formSubmitted;\n\t\t\t\t\t\tvalidator.resetInternals();\n\t\t\t\t\t\tvalidator.toHide = validator.errorsFor( element );\n\t\t\t\t\t\tvalidator.formSubmitted = submitted;\n\t\t\t\t\t\tvalidator.successList.push( element );\n\t\t\t\t\t\tvalidator.invalid[ element.name ] = false;\n\t\t\t\t\t\tvalidator.showErrors();\n\t\t\t\t\t} else {\n\t\t\t\t\t\terrors = {};\n\t\t\t\t\t\tmessage = response || validator.defaultMessage( element, { method: method, parameters: value } );\n\t\t\t\t\t\terrors[ element.name ] = previous.message = message;\n\t\t\t\t\t\tvalidator.invalid[ element.name ] = true;\n\t\t\t\t\t\tvalidator.showErrors( errors );\n\t\t\t\t\t}\n\t\t\t\t\tprevious.valid = valid;\n\t\t\t\t\tvalidator.stopRequest( element, valid );\n\t\t\t\t}\n\t\t\t}, param ) );\n\t\t\treturn \"pending\";\n\t\t}\n\t}\n\n} );\n\r\n// Ajax mode: abort\n// usage: $.ajax({ mode: \"abort\"[, port: \"uniqueport\"]});\n// if mode:\"abort\" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()\n\nvar pendingRequests = {},\n\tajax;\n\n// Use a prefilter if available (1.5+)\nif ( $.ajaxPrefilter ) {\n\t$.ajaxPrefilter( function( settings, _, xhr ) {\n\t\tvar port = settings.port;\n\t\tif ( settings.mode === \"abort\" ) {\n\t\t\tif ( pendingRequests[ port ] ) {\n\t\t\t\tpendingRequests[ port ].abort();\n\t\t\t}\n\t\t\tpendingRequests[ port ] = xhr;\n\t\t}\n\t} );\n} else {\n\n\t// Proxy ajax\n\tajax = $.ajax;\n\t$.ajax = function( settings ) {\n\t\tvar mode = ( \"mode\" in settings ? settings : $.ajaxSettings ).mode,\n\t\t\tport = ( \"port\" in settings ? settings : $.ajaxSettings ).port;\n\t\tif ( mode === \"abort\" ) {\n\t\t\tif ( pendingRequests[ port ] ) {\n\t\t\t\tpendingRequests[ port ].abort();\n\t\t\t}\n\t\t\tpendingRequests[ port ] = ajax.apply( this, arguments );\n\t\t\treturn pendingRequests[ port ];\n\t\t}\n\t\treturn ajax.apply( this, arguments );\n\t};\n}\nreturn $;\r\n}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery-validation/dist/jquery.validate.js\n");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.6.0\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2021-03-02T17:08Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif (  true && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar flat = arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n\t\t// Support: Chrome <=57, Firefox <=52\n\t\t// In some browsers, typeof returns \"function\" for HTML <object> elements\n\t\t// (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n\t\t// We don't want to classify *any* DOM node as a function.\n\t\t// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n\t\t// Plus for old WebKit, typeof returns \"function\" for HTML collections\n\t\t// (e.g., `typeof document.getElementsByTagName(\"div\") === \"function\"`). (gh-4756)\n\t\treturn typeof obj === \"function\" && typeof obj.nodeType !== \"number\" &&\n\t\t\ttypeof obj.item !== \"function\";\n\t};\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\nvar document = window.document;\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnonce: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, node, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar i, val,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\n\t\t\t\t// Support: Firefox 64+, Edge 18+\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n\t\t\t\t// becomes browsing-context connected.\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n\t\t\t\t// via an object.\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tscript.setAttribute( i, val );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.6.0\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teven: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn ( i + 1 ) % 2;\n\t\t} ) );\n\t},\n\n\todd: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn i % 2;\n\t\t} ) );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a provided context; falls back to the global one\n\t// if not specified.\n\tglobalEval: function( code, options, doc ) {\n\t\tDOMEval( code, { nonce: options && options.nonce }, doc );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn flat( ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n\tfunction( _i, name ) {\n\t\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n\t} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.6\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://js.foundation/\n *\n * Date: 2021-02-16\n */\n( function( window ) {\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tnonnativeSelectorCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ( {} ).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpushNative = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[ i ] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|\" +\n\t\t\"ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n\tidentifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\n\t\t// \"Attribute values must be CSS identifiers [capture 5]\n\t\t// or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n\t\twhitespace + \"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" +\n\t\twhitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace +\n\t\t\"*\" ),\n\trdescend = new RegExp( whitespace + \"|>\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n\t\t\twhitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n\t\t\twhitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace +\n\t\t\t\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n\t\t\t\"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trhtml = /HTML$/i,\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace + \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n\tfunescape = function( escape, nonHex ) {\n\t\tvar high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n\t\treturn nonHex ?\n\n\t\t\t// Strip the backslash prefix from a non-hex escape sequence\n\t\t\tnonHex :\n\n\t\t\t// Replace a hexadecimal escape sequence with the encoded Unicode code point\n\t\t\t// Support: IE <=11+\n\t\t\t// For values outside the Basic Multilingual Plane (BMP), manually construct a\n\t\t\t// surrogate pair\n\t\t\thigh < 0 ?\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" +\n\t\t\t\tch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tinDisabledFieldset = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t( arr = slice.call( preferredDoc.childNodes ) ),\n\t\tpreferredDoc.childNodes\n\t);\n\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\t// eslint-disable-next-line no-unused-expressions\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpushNative.apply( target, slice.call( els ) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( ( target[ j++ ] = els[ i++ ] ) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\t\tsetDocument( context );\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( ( m = match[ 1 ] ) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( ( elem = context.getElementById( m ) ) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && ( elem = newContext.getElementById( m ) ) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[ 2 ] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!nonnativeSelectorCache[ selector + \" \" ] &&\n\t\t\t\t( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&\n\n\t\t\t\t// Support: IE 8 only\n\t\t\t\t// Exclude object elements\n\t\t\t\t( nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\" ) ) {\n\n\t\t\t\tnewSelector = selector;\n\t\t\t\tnewContext = context;\n\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n\t\t\t\t// descendant combinators, which is not what we want.\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n\t\t\t\t// list with an ID selector referencing the scope context.\n\t\t\t\t// The technique has to be used as well when a leading combinator is used\n\t\t\t\t// as such selectors are not recognized by querySelectorAll.\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\n\t\t\t\tif ( nodeType === 1 &&\n\t\t\t\t\t( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\n\t\t\t\t\t// We can use :scope instead of the ID hack if the browser\n\t\t\t\t\t// supports it & if we're not changing the context.\n\t\t\t\t\tif ( newContext !== context || !support.scope ) {\n\n\t\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\t\tif ( ( nid = context.getAttribute( \"id\" ) ) ) {\n\t\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.setAttribute( \"id\", ( nid = expando ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n\t\t\t\t\t\t\ttoSelector( groups[ i ] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\n\t\t\t\t} finally {\n\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn ( cache[ key + \" \" ] = value );\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement( \"fieldset\" );\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch ( e ) {\n\t\treturn false;\n\t} finally {\n\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split( \"|\" ),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[ i ] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( ( cur = cur.nextSibling ) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn ( name === \"input\" || name === \"button\" ) && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction( function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction( function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n\t\t\t\t\tseed[ j ] = !( matches[ j ] = seed[ j ] );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\tvar namespace = elem && elem.namespaceURI,\n\t\tdocElem = elem && ( elem.ownerDocument || elem ).documentElement;\n\n\t// Support: IE <=8\n\t// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\n\t// https://bugs.jquery.com/ticket/4833\n\treturn !rhtml.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( preferredDoc != document &&\n\t\t( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,\n\t// Safari 4 - 5 only, Opera <=11.6 - 12.x only\n\t// IE/Edge & older browsers don't support the :scope pseudo-class.\n\t// Support: Safari 6.0 only\n\t// Safari 6.0 supports :scope but it's an alias of :root there.\n\tsupport.scope = assert( function( el ) {\n\t\tdocElem.appendChild( el ).appendChild( document.createElement( \"div\" ) );\n\t\treturn typeof el.querySelectorAll !== \"undefined\" &&\n\t\t\t!el.querySelectorAll( \":scope fieldset div\" ).length;\n\t} );\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert( function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute( \"className\" );\n\t} );\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert( function( el ) {\n\t\tel.appendChild( document.createComment( \"\" ) );\n\t\treturn !el.getElementsByTagName( \"*\" ).length;\n\t} );\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert( function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t} );\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[ \"ID\" ] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute( \"id\" ) === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[ \"ID\" ] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode( \"id\" );\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( ( elem = elems[ i++ ] ) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[ \"TAG\" ] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[ \"CLASS\" ] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {\n\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert( function( el ) {\n\n\t\t\tvar input;\n\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll( \"[msallowcapture^='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll( \"[selected]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"~=\" );\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 15 - 18+\n\t\t\t// IE 11/Edge don't find elements on a `[name='']` query in some cases.\n\t\t\t// Adding a temporary attribute to the document before the selection works\n\t\t\t// around the issue.\n\t\t\t// Interestingly, IE 10 & older don't seem to have the issue.\n\t\t\tinput = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"name\", \"\" );\n\t\t\tel.appendChild( input );\n\t\t\tif ( !el.querySelectorAll( \"[name='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\t\t\t\twhitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll( \":checked\" ).length ) {\n\t\t\t\trbuggyQSA.push( \":checked\" );\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push( \".#.+[+~]\" );\n\t\t\t}\n\n\t\t\t// Support: Firefox <=3.6 - 5 only\n\t\t\t// Old Firefox doesn't throw on a badly-escaped identifier.\n\t\t\tel.querySelectorAll( \"\\\\\\f\" );\n\t\t\trbuggyQSA.push( \"[\\\\r\\\\n\\\\f]\" );\n\t\t} );\n\n\t\tassert( function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll( \"[name=d]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll( \":enabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll( \":disabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: Opera 10 - 11 only\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll( \"*,:x\" );\n\t\t\trbuggyQSA.push( \",.*:\" );\n\t\t} );\n\t}\n\n\tif ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector ) ) ) ) {\n\n\t\tassert( function( el ) {\n\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t} );\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( \"|\" ) );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( \"|\" ) );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t) );\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( ( b = b.parentNode ) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t// two documents; shallow comparisons work.\n\t\t// eslint-disable-next-line eqeqeq\n\t\tcompare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( a == document || a.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, a ) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( b == document || b.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, b ) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\treturn a == document ? -1 :\n\t\t\t\tb == document ? 1 :\n\t\t\t\t/* eslint-enable eqeqeq */\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[ i ] === bp[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[ i ], bp[ i ] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\tap[ i ] == preferredDoc ? -1 :\n\t\t\tbp[ i ] == preferredDoc ? 1 :\n\t\t\t/* eslint-enable eqeqeq */\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\tsetDocument( elem );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\n\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t// fragment in IE 9\n\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch ( e ) {\n\t\t\tnonnativeSelectorCache( expr, true );\n\t\t}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( context.ownerDocument || context ) != document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( elem.ownerDocument || elem ) != document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( ( node = elem[ i++ ] ) ) {\n\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[ 3 ] = ( match[ 3 ] || match[ 4 ] ||\n\t\t\t\tmatch[ 5 ] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[ 2 ] === \"~=\" ) {\n\t\t\t\tmatch[ 3 ] = \" \" + match[ 3 ] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[ 1 ] = match[ 1 ].toLowerCase();\n\n\t\t\tif ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[ 3 ] ) {\n\t\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[ 4 ] = +( match[ 4 ] ?\n\t\t\t\t\tmatch[ 5 ] + ( match[ 6 ] || 1 ) :\n\t\t\t\t\t2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" ) );\n\t\t\t\tmatch[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n\t\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[ 3 ] ) {\n\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[ 6 ] && match[ 2 ];\n\n\t\t\tif ( matchExpr[ \"CHILD\" ].test( match[ 0 ] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[ 3 ] ) {\n\t\t\t\tmatch[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t( excess = tokenize( unquoted, true ) ) &&\n\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[ 0 ] = match[ 0 ].slice( 0, excess );\n\t\t\t\tmatch[ 2 ] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() {\n\t\t\t\t\treturn true;\n\t\t\t\t} :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t( pattern = new RegExp( \"(^|\" + whitespace +\n\t\t\t\t\t\")\" + className + \"(\" + whitespace + \"|$)\" ) ) && classCache(\n\t\t\t\t\t\tclassName, function( elem ) {\n\t\t\t\t\t\t\treturn pattern.test(\n\t\t\t\t\t\t\t\ttypeof elem.className === \"string\" && elem.className ||\n\t\t\t\t\t\t\t\ttypeof elem.getAttribute !== \"undefined\" &&\n\t\t\t\t\t\t\t\t\telem.getAttribute( \"class\" ) ||\n\t\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t\t);\n\t\t\t\t} );\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\t/* eslint-disable max-len */\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t\t/* eslint-enable max-len */\n\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, _argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( ( node = node[ dir ] ) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction( function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[ i ] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[ i ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t} ) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction( function( selector ) {\n\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction( function( seed, matches, _context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\t\t\t\t\tseed[ i ] = !( matches[ i ] = elem );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} ) :\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tinput[ 0 ] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[ 0 ] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t} ),\n\n\t\t\"has\": markFunction( function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t} ),\n\n\t\t\"contains\": markFunction( function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t} ),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test( lang || \"\" ) ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( ( elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t} ),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement &&\n\t\t\t\t( !document.hasFocus || document.hasFocus() ) &&\n\t\t\t\t!!( elem.type || elem.href || ~elem.tabIndex );\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn ( nodeName === \"input\" && !!elem.checked ) ||\n\t\t\t\t( nodeName === \"option\" && !!elem.selected );\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[ \"empty\" ]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( ( attr = elem.getAttribute( \"type\" ) ) == null ||\n\t\t\t\t\tattr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo( function() {\n\t\t\treturn [ 0 ];\n\t\t} ),\n\n\t\t\"last\": createPositionalPseudo( function( _matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t} ),\n\n\t\t\"eq\": createPositionalPseudo( function( _matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t} ),\n\n\t\t\"even\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"odd\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"lt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ?\n\t\t\t\targument + length :\n\t\t\t\targument > length ?\n\t\t\t\t\tlength :\n\t\t\t\t\targument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"gt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} )\n\t}\n};\n\nExpr.pseudos[ \"nth\" ] = Expr.pseudos[ \"eq\" ];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n\t\t\tif ( match ) {\n\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[ 0 ].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( ( tokens = [] ) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( ( match = rcombinators.exec( soFar ) ) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push( {\n\t\t\t\tvalue: matched,\n\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[ 0 ].replace( rtrim, \" \" )\n\t\t\t} );\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n\t\t\t\t( match = preFilters[ type ]( match ) ) ) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push( {\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t} );\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[ i ].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] ||\n\t\t\t\t\t\t\t( outerCache[ elem.uniqueID ] = {} );\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( ( oldCache = uniqueCache[ key ] ) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn ( newCache[ 2 ] = oldCache[ 2 ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[ i ]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[ i ], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction( function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts(\n\t\t\t\tselector || \"*\",\n\t\t\t\tcontext.nodeType ? [ context ] : context,\n\t\t\t\t[]\n\t\t\t),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( ( elem = temp[ i ] ) ) {\n\t\t\t\t\tmatcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) ) {\n\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( ( matcherIn[ i ] = elem ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, ( matcherOut = [] ), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) &&\n\t\t\t\t\t\t( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n\t\t\t\t\t\tseed[ temp ] = !( results[ temp ] = elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t} );\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[ 0 ].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[ \" \" ],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t( checkContext = context ).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n\t\t\tmatchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[ j ].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\n\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\ttokens\n\t\t\t\t\t\t.slice( 0, i - 1 )\n\t\t\t\t\t\t.concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[ \"TAG\" ]( \"*\", outermost ),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\n\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\toutermostContext = context == document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( !context && elem.ownerDocument != document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( ( matcher = elementMatchers[ j++ ] ) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml ) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( ( elem = !matcher && elem ) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( ( matcher = setMatchers[ j++ ] ) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n\t\t\t\t\t\t\t\tsetMatched[ i ] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[ i ] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache(\n\t\t\tselector,\n\t\t\tmatcherFromGroupMatchers( elementMatchers, setMatchers )\n\t\t);\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[ 0 ] = match[ 0 ].slice( 0 );\n\t\tif ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n\t\t\tcontext = ( Expr.find[ \"ID\" ]( token.matches[ 0 ]\n\t\t\t\t.replace( runescape, funescape ), context ) || [] )[ 0 ];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[ \"needsContext\" ].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[ i ];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ ( type = token.type ) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( ( find = Expr.find[ type ] ) ) {\n\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( ( seed = find(\n\t\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext\n\t\t\t\t) ) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split( \"\" ).sort( sortOrder ).join( \"\" ) === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert( function( el ) {\n\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement( \"fieldset\" ) ) & 1;\n} );\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert( function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute( \"href\" ) === \"#\";\n} ) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert( function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n} ) ) {\n\taddHandle( \"value\", function( elem, _name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert( function( el ) {\n\treturn el.getAttribute( \"disabled\" ) == null;\n} ) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\t\tnull;\n\t\t}\n\t} );\n}\n\nreturn Sizzle;\n\n} )( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n}\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\tif ( elem.contentDocument != null &&\n\n\t\t\t// Support: IE 11+\n\t\t\t// <object> elements with no `data` attribute has an object\n\t\t\t// `contentDocument` with a `null` prototype.\n\t\t\tgetProto( elem.contentDocument ) ) {\n\n\t\t\treturn elem.contentDocument;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t// Treat the template element as a regular one in browsers that\n\t\t// don't support it.\n\t\tif ( nodeName( elem, \"template\" ) ) {\n\t\t\telem = elem.content || elem;\n\t\t}\n\n\t\treturn jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( _i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the primary Deferred\n\t\t\tprimary = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tprimary.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( primary.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn primary.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );\n\t\t}\n\n\t\treturn primary.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, _key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\t\tvalue :\n\t\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( _all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (#9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar documentElement = document.documentElement;\n\n\n\n\tvar isAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n\t\t},\n\t\tcomposed = { composed: true };\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n\t// Support: iOS 10.0-10.2 only\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n\t// leading to errors. We need to check for `getRootNode`.\n\tif ( documentElement.getRootNode ) {\n\t\tisAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n\t\t};\n\t}\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tisAttached( elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = elem.nodeType &&\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n\n\t// Support: IE <=9 only\n\t// IE <=9 replaces <option> tags with their contents when inserted outside of\n\t// the select element.\n\tdiv.innerHTML = \"<option></option>\";\n\tsupport.option = !!div.lastChild;\n} )();\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n// Support: IE <=9 only\nif ( !support.option ) {\n\twrapMap.optgroup = wrapMap.option = [ 1, \"<select multiple='multiple'>\", \"</select>\" ];\n}\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, attached, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tattached = isAttached( elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( attached ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\nvar rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 - 11+\n// focus() and blur() are asynchronous, except when they are no-op.\n// So expect focus to be synchronous when the element is already active,\n// and blur to be synchronous when the element is not already active.\n// (focus and blur are always synchronous in other supported browsers,\n// this just defines when we can count on it).\nfunction expectSync( elem, type ) {\n\treturn ( elem === safeActiveElement() ) === ( type === \"focus\" );\n}\n\n// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Only attach events to objects that accept data\n\t\tif ( !acceptData( elem ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = Object.create( null );\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tevent = jQuery.event.fix( nativeEvent ),\n\n\t\t\thandlers = (\n\t\t\t\tdataPriv.get( this, \"events\" ) || Object.create( null )\n\t\t\t)[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tclick: {\n\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\n\t\t\tsetup: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Claim the first handler\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n\t\t\t\t\tleverageNative( el, \"click\", returnTrue );\n\t\t\t\t}\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\ttrigger: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Force setup before triggering a click\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\tleverageNative( el, \"click\" );\n\t\t\t\t}\n\n\t\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, suppress native .click() on links\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n\t\t\t_default: function( event ) {\n\t\t\t\tvar target = event.target;\n\t\t\t\treturn rcheckableType.test( target.type ) &&\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n\t\t\t\t\tnodeName( target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative( el, type, expectSync ) {\n\n\t// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n\tif ( !expectSync ) {\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\n\t\t\tjQuery.event.add( el, type, returnTrue );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Register the controller as a special universal handler for all event namespaces\n\tdataPriv.set( el, type, false );\n\tjQuery.event.add( el, type, {\n\t\tnamespace: false,\n\t\thandler: function( event ) {\n\t\t\tvar notAsync, result,\n\t\t\t\tsaved = dataPriv.get( this, type );\n\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n\t\t\t\t// Saved data should be false in such cases, but might be a leftover capture object\n\t\t\t\t// from an async native handler (gh-4350)\n\t\t\t\tif ( !saved.length ) {\n\n\t\t\t\t\t// Store arguments for use when handling the inner native event\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n\t\t\t\t\t// will not be confused with a leftover capture object.\n\t\t\t\t\tsaved = slice.call( arguments );\n\t\t\t\t\tdataPriv.set( this, type, saved );\n\n\t\t\t\t\t// Trigger the native event and capture its result\n\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t// focus() and blur() are asynchronous\n\t\t\t\t\tnotAsync = expectSync( this, type );\n\t\t\t\t\tthis[ type ]();\n\t\t\t\t\tresult = dataPriv.get( this, type );\n\t\t\t\t\tif ( saved !== result || notAsync ) {\n\t\t\t\t\t\tdataPriv.set( this, type, false );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = {};\n\t\t\t\t\t}\n\t\t\t\t\tif ( saved !== result ) {\n\n\t\t\t\t\t\t// Cancel the outer synthetic event\n\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\t// Support: Chrome 86+\n\t\t\t\t\t\t// In Chrome, if an element having a focusout handler is blurred by\n\t\t\t\t\t\t// clicking outside of it, it invokes the handler synchronously. If\n\t\t\t\t\t\t// that handler calls `.remove()` on the element, the data is cleared,\n\t\t\t\t\t\t// leaving `result` undefined. We need to guard against this.\n\t\t\t\t\t\treturn result && result.value;\n\t\t\t\t\t}\n\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering the\n\t\t\t\t// native event and prevent that from happening again here.\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n\t\t\t\t// less bad than duplication.\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t// If this is a native event triggered above, everything is now in order\n\t\t\t// Fire an inner synthetic event with the original arguments\n\t\t\t} else if ( saved.length ) {\n\n\t\t\t\t// ...and capture the result\n\t\t\t\tdataPriv.set( this, type, {\n\t\t\t\t\tvalue: jQuery.event.trigger(\n\n\t\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t\t// Extend with the prototype to reset the above stopImmediatePropagation()\n\t\t\t\t\t\tjQuery.extend( saved[ 0 ], jQuery.Event.prototype ),\n\t\t\t\t\t\tsaved.slice( 1 ),\n\t\t\t\t\t\tthis\n\t\t\t\t\t)\n\t\t\t\t} );\n\n\t\t\t\t// Abort handling of the native event\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t}\n\t\t}\n\t} );\n}\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcode: true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\twhich: true\n}, jQuery.event.addProp );\n\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n\tjQuery.event.special[ type ] = {\n\n\t\t// Utilize native event if possible so blur/focus sequence is correct\n\t\tsetup: function() {\n\n\t\t\t// Claim the first handler\n\t\t\t// dataPriv.set( this, \"focus\", ... )\n\t\t\t// dataPriv.set( this, \"blur\", ... )\n\t\t\tleverageNative( this, type, expectSync );\n\n\t\t\t// Return false to allow normal processing in the caller\n\t\t\treturn false;\n\t\t},\n\t\ttrigger: function() {\n\n\t\t\t// Force setup before trigger\n\t\t\tleverageNative( this, type );\n\n\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\treturn true;\n\t\t},\n\n\t\t// Suppress native focus or blur as it's already being fired\n\t\t// in leverageNative.\n\t\t_default: function() {\n\t\t\treturn true;\n\t\t},\n\n\t\tdelegateType: delegateType\n\t};\n} );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.get( src );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdataPriv.remove( dest, \"handle events\" );\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = flat( args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t}, doc );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html;\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar swap = function( elem, options, callback ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.call( elem );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\t// Support: Chrome <=64\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableTrDimensionsVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t},\n\n\t\t// Support: IE 9 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Behavior in IE 9 is more subtle than in newer versions & it passes\n\t\t// some versions of this test; make sure not to make it pass there!\n\t\t//\n\t\t// Support: Firefox 70+\n\t\t// Only Firefox includes border widths\n\t\t// in computed dimensions. (gh-4529)\n\t\treliableTrDimensions: function() {\n\t\t\tvar table, tr, trChild, trStyle;\n\t\t\tif ( reliableTrDimensionsVal == null ) {\n\t\t\t\ttable = document.createElement( \"table\" );\n\t\t\t\ttr = document.createElement( \"tr\" );\n\t\t\t\ttrChild = document.createElement( \"div\" );\n\n\t\t\t\ttable.style.cssText = \"position:absolute;left:-11111px;border-collapse:separate\";\n\t\t\t\ttr.style.cssText = \"border:1px solid\";\n\n\t\t\t\t// Support: Chrome 86+\n\t\t\t\t// Height set through cssText does not get applied.\n\t\t\t\t// Computed height then comes back as 0.\n\t\t\t\ttr.style.height = \"1px\";\n\t\t\t\ttrChild.style.height = \"9px\";\n\n\t\t\t\t// Support: Android 8 Chrome 86+\n\t\t\t\t// In our bodyBackground.html iframe,\n\t\t\t\t// display for all div elements is set to \"inline\",\n\t\t\t\t// which causes a problem only in Android 8 Chrome 86.\n\t\t\t\t// Ensuring the div is display: block\n\t\t\t\t// gets around this issue.\n\t\t\t\ttrChild.style.display = \"block\";\n\n\t\t\t\tdocumentElement\n\t\t\t\t\t.appendChild( table )\n\t\t\t\t\t.appendChild( tr )\n\t\t\t\t\t.appendChild( trChild );\n\n\t\t\t\ttrStyle = window.getComputedStyle( tr );\n\t\t\t\treliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderTopWidth, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;\n\n\t\t\t\tdocumentElement.removeChild( table );\n\t\t\t}\n\t\t\treturn reliableTrDimensionsVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, #12537)\n\t//   .css('--customProperty) (#3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style,\n\tvendorProps = {};\n\n// Return a vendor-prefixed property or undefined\nfunction vendorPropName( name ) {\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName( name ) {\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n\n\tif ( final ) {\n\t\treturn final;\n\t}\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trcustomProp = /^--/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t};\n\nfunction setPositiveNumber( _elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\tif ( box === \"margin\" ) {\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\n\t\t) ) || 0;\n\t}\n\n\treturn delta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n\t\t// Fake content-box until we know it's needed to know the true value.\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n\t\tisBorderBox = boxSizingNeeded &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox,\n\n\t\tval = curCSS( elem, dimension, styles ),\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\n\t// Support: IE 9 - 11 only\n\t// Use offsetWidth/offsetHeight for when box sizing is unreliable.\n\t// In those cases, the computed value can be trusted to be border-box.\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n\n\t\t// Support: IE 10 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Interestingly, in some cases IE 9 doesn't suffer from this issue.\n\t\t!support.reliableTrDimensions() && nodeName( elem, \"tr\" ) ||\n\n\t\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t\t// This happens for inline elements with no explicit setting (gh-3571)\n\t\tval === \"auto\" ||\n\n\t\t// Support: Android <=4.1 - 4.3 only\n\t\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n\n\t\t// Make sure the element is visible & connected\n\t\telem.getClientRects().length ) {\n\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n\t\t// retrieved value as a content box dimension.\n\t\tvalueIsBorderBox = offsetProp in elem;\n\t\tif ( valueIsBorderBox ) {\n\t\t\tval = elem[ offsetProp ];\n\t\t}\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"gridArea\": true,\n\t\t\"gridColumn\": true,\n\t\t\"gridColumnEnd\": true,\n\t\t\"gridColumnStart\": true,\n\t\t\"gridRow\": true,\n\t\t\"gridRowEnd\": true,\n\t\t\"gridRowStart\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n\t\t\t// \"px\" to a few hardcoded values.\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( _i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t} ) :\n\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\n\t\t\t\t// Only read styles.position if the test has a chance to fail\n\t\t\t\t// to avoid forcing a reflow.\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n\t\t\t\t\tstyles.position === \"absolute\",\n\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n\t\t\t\tisBorderBox = boxSizingNeeded &&\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra ?\n\t\t\t\t\tboxModelAdjustment(\n\t\t\t\t\t\telem,\n\t\t\t\t\t\tdimension,\n\t\t\t\t\t\textra,\n\t\t\t\t\t\tisBorderBox,\n\t\t\t\t\t\tstyles\n\t\t\t\t\t) :\n\t\t\t\t\t0;\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\n\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\n\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( _i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = classesToArray( value );\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || Object.create( null ) )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\n\t\t\t\t// Handle: regular nodes (via `this.ownerDocument`), window\n\t\t\t\t// (via `this.document`) & document (via `this`).\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = { guid: Date.now() };\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml, parserErrorElem;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {}\n\n\tparserErrorElem = xml && xml.getElementsByTagName( \"parsererror\" )[ 0 ];\n\tif ( !xml || parserErrorElem ) {\n\t\tjQuery.error( \"Invalid XML: \" + (\n\t\t\tparserErrorElem ?\n\t\t\t\tjQuery.map( parserErrorElem.childNodes, function( el ) {\n\t\t\t\t\treturn el.textContent;\n\t\t\t\t} ).join( \"\\n\" ) :\n\t\t\t\tdata\n\t\t) );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\tif ( a == null ) {\n\t\treturn \"\";\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} ).filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} ).map( function( _i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\noriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce.guid++ ) +\n\t\t\t\t\tuncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Use a noop converter for missing script but not if jsonp\n\t\t\tif ( !isSuccess &&\n\t\t\t\tjQuery.inArray( \"script\", s.dataTypes ) > -1 &&\n\t\t\t\tjQuery.inArray( \"json\", s.dataTypes ) < 0 ) {\n\t\t\t\ts.converters[ \"text script\" ] = function() {};\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( _i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\njQuery.ajaxPrefilter( function( s ) {\n\tvar i;\n\tfor ( i in s.headers ) {\n\t\tif ( i.toLowerCase() === \"content-type\" ) {\n\t\t\ts.contentType = s.headers[ i ] || \"\";\n\t\t}\n\t}\n} );\n\n\njQuery._evalUrl = function( url, options, doc ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\n\t\t// Only evaluate the response if it is successful (gh-4126)\n\t\t// dataFilter is not invoked for failure responses, so using it instead\n\t\t// of the default converter is kludgy but it works.\n\t\tconverters: {\n\t\t\t\"text script\": function() {}\n\t\t},\n\t\tdataFilter: function( response ) {\n\t\t\tjQuery.globalEval( response, options, doc );\n\t\t}\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain or forced-by-attrs requests\n\tif ( s.crossDomain || s.scriptAttrs ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" )\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce.guid++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( _i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( {\n\t\tpadding: \"inner\" + name,\n\t\tcontent: type,\n\t\t\"\": \"outer\" + name\n\t}, function( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( _i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\njQuery.each(\n\t( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( _i, name ) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[ name ] = function( data, fn ) {\n\t\t\treturn arguments.length > 0 ?\n\t\t\t\tthis.on( name, null, data, fn ) :\n\t\t\t\tthis.trigger( name );\n\t\t};\n\t}\n);\n\n\n\n\n// Support: Android <=4.0 only\n// Make sure we trim BOM and NBSP\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\njQuery.trim = function( text ) {\n\treturn text == null ?\n\t\t\"\" :\n\t\t( text + \"\" ).replace( rtrim, \"\" );\n};\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\treturn jQuery;\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( typeof noGlobal === \"undefined\" ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/trainer/header.js");
/******/ 	
/******/ })()
;